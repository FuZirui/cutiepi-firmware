
stm32f0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000024e4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080025a4  080025a4  000125a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025dc  080025dc  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080025dc  080025dc  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025dc  080025dc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025dc  080025dc  000125dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025e0  080025e0  000125e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080025e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  20000010  080025f4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  080025f4  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae9d  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002359  00000000  00000000  0002aed5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004e27  00000000  00000000  0002d22e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000007e8  00000000  00000000  00032058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000778  00000000  00000000  00032840  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000d1db  00000000  00000000  00032fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00009240  00000000  00000000  00040193  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0004807c  00000000  00000000  000493d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0009144f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001298  00000000  00000000  000914cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800258c 	.word	0x0800258c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800258c 	.word	0x0800258c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000220:	b510      	push	{r4, lr}
 8000222:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000224:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <HAL_InitTick+0x40>)
 8000226:	7819      	ldrb	r1, [r3, #0]
 8000228:	20fa      	movs	r0, #250	; 0xfa
 800022a:	0080      	lsls	r0, r0, #2
 800022c:	f7ff ff6c 	bl	8000108 <__udivsi3>
 8000230:	0001      	movs	r1, r0
 8000232:	4b0c      	ldr	r3, [pc, #48]	; (8000264 <HAL_InitTick+0x44>)
 8000234:	6818      	ldr	r0, [r3, #0]
 8000236:	f7ff ff67 	bl	8000108 <__udivsi3>
 800023a:	f000 fb9f 	bl	800097c <HAL_SYSTICK_Config>
  {
    return HAL_ERROR;
 800023e:	2301      	movs	r3, #1
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000240:	2800      	cmp	r0, #0
 8000242:	d101      	bne.n	8000248 <HAL_InitTick+0x28>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000244:	2c03      	cmp	r4, #3
 8000246:	d901      	bls.n	800024c <HAL_InitTick+0x2c>
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
}
 8000248:	0018      	movs	r0, r3
 800024a:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800024c:	3001      	adds	r0, #1
 800024e:	2200      	movs	r2, #0
 8000250:	0021      	movs	r1, r4
 8000252:	4240      	negs	r0, r0
 8000254:	f000 fb54 	bl	8000900 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000258:	4b03      	ldr	r3, [pc, #12]	; (8000268 <HAL_InitTick+0x48>)
 800025a:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 800025c:	2300      	movs	r3, #0
 800025e:	e7f3      	b.n	8000248 <HAL_InitTick+0x28>
 8000260:	20000000 	.word	0x20000000
 8000264:	2000000c 	.word	0x2000000c
 8000268:	20000004 	.word	0x20000004

0800026c <HAL_Init>:
{
 800026c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800026e:	4a06      	ldr	r2, [pc, #24]	; (8000288 <HAL_Init+0x1c>)
 8000270:	6813      	ldr	r3, [r2, #0]
 8000272:	2110      	movs	r1, #16
 8000274:	430b      	orrs	r3, r1
 8000276:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000278:	2001      	movs	r0, #1
 800027a:	f7ff ffd1 	bl	8000220 <HAL_InitTick>
  HAL_MspInit();
 800027e:	f001 ffeb 	bl	8002258 <HAL_MspInit>
}
 8000282:	2000      	movs	r0, #0
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	40022000 	.word	0x40022000

0800028c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800028c:	4a03      	ldr	r2, [pc, #12]	; (800029c <HAL_IncTick+0x10>)
 800028e:	6811      	ldr	r1, [r2, #0]
 8000290:	4b03      	ldr	r3, [pc, #12]	; (80002a0 <HAL_IncTick+0x14>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	185b      	adds	r3, r3, r1
 8000296:	6013      	str	r3, [r2, #0]
}
 8000298:	4770      	bx	lr
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	20000044 	.word	0x20000044
 80002a0:	20000000 	.word	0x20000000

080002a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80002a4:	4b01      	ldr	r3, [pc, #4]	; (80002ac <HAL_GetTick+0x8>)
 80002a6:	6818      	ldr	r0, [r3, #0]
}
 80002a8:	4770      	bx	lr
 80002aa:	46c0      	nop			; (mov r8, r8)
 80002ac:	20000044 	.word	0x20000044

080002b0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80002b4:	6803      	ldr	r3, [r0, #0]
 80002b6:	689a      	ldr	r2, [r3, #8]
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80002b8:	2000      	movs	r0, #0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80002ba:	0752      	lsls	r2, r2, #29
 80002bc:	d521      	bpl.n	8000302 <ADC_ConversionStop+0x52>
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80002be:	689a      	ldr	r2, [r3, #8]
 80002c0:	0752      	lsls	r2, r2, #29
 80002c2:	d506      	bpl.n	80002d2 <ADC_ConversionStop+0x22>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80002c4:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80002c6:	0792      	lsls	r2, r2, #30
 80002c8:	d403      	bmi.n	80002d2 <ADC_ConversionStop+0x22>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80002ca:	689a      	ldr	r2, [r3, #8]
 80002cc:	2110      	movs	r1, #16
 80002ce:	430a      	orrs	r2, r1
 80002d0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80002d2:	f7ff ffe7 	bl	80002a4 <HAL_GetTick>
 80002d6:	0006      	movs	r6, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80002d8:	2504      	movs	r5, #4
 80002da:	6823      	ldr	r3, [r4, #0]
 80002dc:	689b      	ldr	r3, [r3, #8]
 80002de:	421d      	tst	r5, r3
 80002e0:	d00e      	beq.n	8000300 <ADC_ConversionStop+0x50>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80002e2:	f7ff ffdf 	bl	80002a4 <HAL_GetTick>
 80002e6:	1b80      	subs	r0, r0, r6
 80002e8:	2802      	cmp	r0, #2
 80002ea:	d9f6      	bls.n	80002da <ADC_ConversionStop+0x2a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80002ee:	2210      	movs	r2, #16
 80002f0:	4313      	orrs	r3, r2
 80002f2:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80002f6:	3a0f      	subs	r2, #15
 80002f8:	4313      	orrs	r3, r2
 80002fa:	63e3      	str	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80002fc:	2001      	movs	r0, #1
 80002fe:	e000      	b.n	8000302 <ADC_ConversionStop+0x52>
  return HAL_OK;
 8000300:	2000      	movs	r0, #0
}
 8000302:	bd70      	pop	{r4, r5, r6, pc}

08000304 <ADC_Disable>:
{
 8000304:	b570      	push	{r4, r5, r6, lr}
 8000306:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000308:	6802      	ldr	r2, [r0, #0]
 800030a:	6891      	ldr	r1, [r2, #8]
 800030c:	2303      	movs	r3, #3
 800030e:	400b      	ands	r3, r1
  return HAL_OK;
 8000310:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000312:	2b01      	cmp	r3, #1
 8000314:	d000      	beq.n	8000318 <ADC_Disable+0x14>
}
 8000316:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000318:	6813      	ldr	r3, [r2, #0]
 800031a:	07db      	lsls	r3, r3, #31
 800031c:	d402      	bmi.n	8000324 <ADC_Disable+0x20>
 800031e:	68d3      	ldr	r3, [r2, #12]
 8000320:	041b      	lsls	r3, r3, #16
 8000322:	d5f8      	bpl.n	8000316 <ADC_Disable+0x12>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000324:	6891      	ldr	r1, [r2, #8]
 8000326:	2305      	movs	r3, #5
 8000328:	400b      	ands	r3, r1
 800032a:	2b01      	cmp	r3, #1
 800032c:	d009      	beq.n	8000342 <ADC_Disable+0x3e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800032e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000330:	2210      	movs	r2, #16
 8000332:	4313      	orrs	r3, r2
 8000334:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000336:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000338:	3a0f      	subs	r2, #15
 800033a:	4313      	orrs	r3, r2
 800033c:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 800033e:	2001      	movs	r0, #1
 8000340:	e7e9      	b.n	8000316 <ADC_Disable+0x12>
      __HAL_ADC_DISABLE(hadc);
 8000342:	6893      	ldr	r3, [r2, #8]
 8000344:	2102      	movs	r1, #2
 8000346:	430b      	orrs	r3, r1
 8000348:	6093      	str	r3, [r2, #8]
 800034a:	6823      	ldr	r3, [r4, #0]
 800034c:	2203      	movs	r2, #3
 800034e:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000350:	f7ff ffa8 	bl	80002a4 <HAL_GetTick>
 8000354:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000356:	2501      	movs	r5, #1
 8000358:	6823      	ldr	r3, [r4, #0]
 800035a:	689b      	ldr	r3, [r3, #8]
 800035c:	421d      	tst	r5, r3
 800035e:	d00e      	beq.n	800037e <ADC_Disable+0x7a>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000360:	f7ff ffa0 	bl	80002a4 <HAL_GetTick>
 8000364:	1b80      	subs	r0, r0, r6
 8000366:	2802      	cmp	r0, #2
 8000368:	d9f6      	bls.n	8000358 <ADC_Disable+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800036a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800036c:	2210      	movs	r2, #16
 800036e:	4313      	orrs	r3, r2
 8000370:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000372:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000374:	3a0f      	subs	r2, #15
 8000376:	4313      	orrs	r3, r2
 8000378:	63e3      	str	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 800037a:	2001      	movs	r0, #1
 800037c:	e7cb      	b.n	8000316 <ADC_Disable+0x12>
  return HAL_OK;
 800037e:	2000      	movs	r0, #0
 8000380:	e7c9      	b.n	8000316 <ADC_Disable+0x12>
	...

08000384 <ADC_Enable>:
{
 8000384:	b570      	push	{r4, r5, r6, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 800038a:	2300      	movs	r3, #0
 800038c:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800038e:	6803      	ldr	r3, [r0, #0]
 8000390:	6899      	ldr	r1, [r3, #8]
 8000392:	2203      	movs	r2, #3
 8000394:	400a      	ands	r2, r1
 8000396:	2a01      	cmp	r2, #1
 8000398:	d02d      	beq.n	80003f6 <ADC_Enable+0x72>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800039a:	6899      	ldr	r1, [r3, #8]
 800039c:	4a20      	ldr	r2, [pc, #128]	; (8000420 <ADC_Enable+0x9c>)
 800039e:	4211      	tst	r1, r2
 80003a0:	d131      	bne.n	8000406 <ADC_Enable+0x82>
    __HAL_ADC_ENABLE(hadc);
 80003a2:	689a      	ldr	r2, [r3, #8]
 80003a4:	2101      	movs	r1, #1
 80003a6:	430a      	orrs	r2, r1
 80003a8:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80003aa:	4b1e      	ldr	r3, [pc, #120]	; (8000424 <ADC_Enable+0xa0>)
 80003ac:	6818      	ldr	r0, [r3, #0]
 80003ae:	491e      	ldr	r1, [pc, #120]	; (8000428 <ADC_Enable+0xa4>)
 80003b0:	f7ff feaa 	bl	8000108 <__udivsi3>
 80003b4:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 80003b6:	9b01      	ldr	r3, [sp, #4]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d005      	beq.n	80003c8 <ADC_Enable+0x44>
      wait_loop_index--;
 80003bc:	9b01      	ldr	r3, [sp, #4]
 80003be:	3b01      	subs	r3, #1
 80003c0:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80003c2:	9b01      	ldr	r3, [sp, #4]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d1f9      	bne.n	80003bc <ADC_Enable+0x38>
    tickstart = HAL_GetTick();
 80003c8:	f7ff ff6c 	bl	80002a4 <HAL_GetTick>
 80003cc:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80003ce:	2501      	movs	r5, #1
 80003d0:	6823      	ldr	r3, [r4, #0]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	421d      	tst	r5, r3
 80003d6:	d121      	bne.n	800041c <ADC_Enable+0x98>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80003d8:	f7ff ff64 	bl	80002a4 <HAL_GetTick>
 80003dc:	1b80      	subs	r0, r0, r6
 80003de:	2802      	cmp	r0, #2
 80003e0:	d9f6      	bls.n	80003d0 <ADC_Enable+0x4c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80003e4:	2210      	movs	r2, #16
 80003e6:	4313      	orrs	r3, r2
 80003e8:	63a3      	str	r3, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80003ec:	3a0f      	subs	r2, #15
 80003ee:	4313      	orrs	r3, r2
 80003f0:	63e3      	str	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 80003f2:	2001      	movs	r0, #1
 80003f4:	e010      	b.n	8000418 <ADC_Enable+0x94>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80003f6:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 80003f8:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80003fa:	07d2      	lsls	r2, r2, #31
 80003fc:	d40c      	bmi.n	8000418 <ADC_Enable+0x94>
 80003fe:	68da      	ldr	r2, [r3, #12]
 8000400:	0412      	lsls	r2, r2, #16
 8000402:	d5ca      	bpl.n	800039a <ADC_Enable+0x16>
 8000404:	e008      	b.n	8000418 <ADC_Enable+0x94>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000406:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000408:	2210      	movs	r2, #16
 800040a:	4313      	orrs	r3, r2
 800040c:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800040e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000410:	3a0f      	subs	r2, #15
 8000412:	4313      	orrs	r3, r2
 8000414:	63e3      	str	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 8000416:	2001      	movs	r0, #1
}
 8000418:	b002      	add	sp, #8
 800041a:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800041c:	2000      	movs	r0, #0
 800041e:	e7fb      	b.n	8000418 <ADC_Enable+0x94>
 8000420:	80000017 	.word	0x80000017
 8000424:	2000000c 	.word	0x2000000c
 8000428:	000f4240 	.word	0x000f4240

0800042c <HAL_ADC_Init>:
{
 800042c:	b570      	push	{r4, r5, r6, lr}
 800042e:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8000430:	d100      	bne.n	8000434 <HAL_ADC_Init+0x8>
 8000432:	e0a5      	b.n	8000580 <HAL_ADC_Init+0x154>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000434:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8000436:	2b00      	cmp	r3, #0
 8000438:	d074      	beq.n	8000524 <HAL_ADC_Init+0xf8>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800043a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800043c:	06db      	lsls	r3, r3, #27
 800043e:	d500      	bpl.n	8000442 <HAL_ADC_Init+0x16>
 8000440:	e098      	b.n	8000574 <HAL_ADC_Init+0x148>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000442:	6822      	ldr	r2, [r4, #0]
 8000444:	6893      	ldr	r3, [r2, #8]
 8000446:	2104      	movs	r1, #4
 8000448:	4019      	ands	r1, r3
      (tmp_hal_status == HAL_OK)                                &&
 800044a:	d000      	beq.n	800044e <HAL_ADC_Init+0x22>
 800044c:	e092      	b.n	8000574 <HAL_ADC_Init+0x148>
    ADC_STATE_CLR_SET(hadc->State,
 800044e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000450:	484c      	ldr	r0, [pc, #304]	; (8000584 <HAL_ADC_Init+0x158>)
 8000452:	4003      	ands	r3, r0
 8000454:	3006      	adds	r0, #6
 8000456:	30ff      	adds	r0, #255	; 0xff
 8000458:	4303      	orrs	r3, r0
 800045a:	63a3      	str	r3, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 800045c:	6890      	ldr	r0, [r2, #8]
 800045e:	2303      	movs	r3, #3
 8000460:	4003      	ands	r3, r0
 8000462:	2b01      	cmp	r3, #1
 8000464:	d064      	beq.n	8000530 <HAL_ADC_Init+0x104>
      MODIFY_REG(hadc->Instance->CFGR1,
 8000466:	68d3      	ldr	r3, [r2, #12]
 8000468:	2018      	movs	r0, #24
 800046a:	4383      	bics	r3, r0
 800046c:	68a0      	ldr	r0, [r4, #8]
 800046e:	4303      	orrs	r3, r0
 8000470:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000472:	6822      	ldr	r2, [r4, #0]
 8000474:	6913      	ldr	r3, [r2, #16]
 8000476:	009b      	lsls	r3, r3, #2
 8000478:	089b      	lsrs	r3, r3, #2
 800047a:	6860      	ldr	r0, [r4, #4]
 800047c:	4303      	orrs	r3, r0
 800047e:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000480:	6822      	ldr	r2, [r4, #0]
 8000482:	68d3      	ldr	r3, [r2, #12]
 8000484:	4840      	ldr	r0, [pc, #256]	; (8000588 <HAL_ADC_Init+0x15c>)
 8000486:	4003      	ands	r3, r0
 8000488:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800048a:	7e22      	ldrb	r2, [r4, #24]
 800048c:	0392      	lsls	r2, r2, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800048e:	7e63      	ldrb	r3, [r4, #25]
 8000490:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000492:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000494:	7ea0      	ldrb	r0, [r4, #26]
 8000496:	0345      	lsls	r5, r0, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000498:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800049a:	000e      	movs	r6, r1
 800049c:	2b01      	cmp	r3, #1
 800049e:	d001      	beq.n	80004a4 <HAL_ADC_Init+0x78>
 80004a0:	2680      	movs	r6, #128	; 0x80
 80004a2:	0176      	lsls	r6, r6, #5
 80004a4:	68e3      	ldr	r3, [r4, #12]
 80004a6:	431a      	orrs	r2, r3
 80004a8:	432a      	orrs	r2, r5
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80004aa:	6923      	ldr	r3, [r4, #16]
 80004ac:	2b02      	cmp	r3, #2
 80004ae:	d046      	beq.n	800053e <HAL_ADC_Init+0x112>
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80004b0:	2524      	movs	r5, #36	; 0x24
 80004b2:	5d63      	ldrb	r3, [r4, r5]
 80004b4:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80004b6:	4313      	orrs	r3, r2
 80004b8:	4333      	orrs	r3, r6
 80004ba:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80004bc:	7ee2      	ldrb	r2, [r4, #27]
 80004be:	2a01      	cmp	r2, #1
 80004c0:	d03f      	beq.n	8000542 <HAL_ADC_Init+0x116>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80004c2:	69e2      	ldr	r2, [r4, #28]
 80004c4:	21c2      	movs	r1, #194	; 0xc2
 80004c6:	31ff      	adds	r1, #255	; 0xff
 80004c8:	428a      	cmp	r2, r1
 80004ca:	d002      	beq.n	80004d2 <HAL_ADC_Init+0xa6>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80004cc:	6a21      	ldr	r1, [r4, #32]
 80004ce:	430a      	orrs	r2, r1
 80004d0:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80004d2:	6821      	ldr	r1, [r4, #0]
 80004d4:	68ca      	ldr	r2, [r1, #12]
 80004d6:	431a      	orrs	r2, r3
 80004d8:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80004da:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80004dc:	2180      	movs	r1, #128	; 0x80
 80004de:	0549      	lsls	r1, r1, #21
 80004e0:	428a      	cmp	r2, r1
 80004e2:	d002      	beq.n	80004ea <HAL_ADC_Init+0xbe>
 80004e4:	3a01      	subs	r2, #1
 80004e6:	2a06      	cmp	r2, #6
 80004e8:	d80a      	bhi.n	8000500 <HAL_ADC_Init+0xd4>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80004ea:	6820      	ldr	r0, [r4, #0]
 80004ec:	6941      	ldr	r1, [r0, #20]
 80004ee:	2207      	movs	r2, #7
 80004f0:	4391      	bics	r1, r2
 80004f2:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80004f4:	6821      	ldr	r1, [r4, #0]
 80004f6:	6948      	ldr	r0, [r1, #20]
 80004f8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80004fa:	402a      	ands	r2, r5
 80004fc:	4302      	orrs	r2, r0
 80004fe:	614a      	str	r2, [r1, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000500:	6822      	ldr	r2, [r4, #0]
 8000502:	68d2      	ldr	r2, [r2, #12]
 8000504:	4921      	ldr	r1, [pc, #132]	; (800058c <HAL_ADC_Init+0x160>)
 8000506:	400a      	ands	r2, r1
 8000508:	429a      	cmp	r2, r3
 800050a:	d029      	beq.n	8000560 <HAL_ADC_Init+0x134>
      ADC_STATE_CLR_SET(hadc->State,
 800050c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800050e:	2212      	movs	r2, #18
 8000510:	4393      	bics	r3, r2
 8000512:	3a02      	subs	r2, #2
 8000514:	4313      	orrs	r3, r2
 8000516:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000518:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800051a:	3a0f      	subs	r2, #15
 800051c:	4313      	orrs	r3, r2
 800051e:	63e3      	str	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 8000520:	2001      	movs	r0, #1
 8000522:	e02c      	b.n	800057e <HAL_ADC_Init+0x152>
    ADC_CLEAR_ERRORCODE(hadc);
 8000524:	63c3      	str	r3, [r0, #60]	; 0x3c
    hadc->Lock = HAL_UNLOCKED;
 8000526:	2234      	movs	r2, #52	; 0x34
 8000528:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 800052a:	f001 feb5 	bl	8002298 <HAL_ADC_MspInit>
 800052e:	e784      	b.n	800043a <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000530:	6813      	ldr	r3, [r2, #0]
 8000532:	07db      	lsls	r3, r3, #31
 8000534:	d4a4      	bmi.n	8000480 <HAL_ADC_Init+0x54>
 8000536:	68d3      	ldr	r3, [r2, #12]
 8000538:	041b      	lsls	r3, r3, #16
 800053a:	d4a1      	bmi.n	8000480 <HAL_ADC_Init+0x54>
 800053c:	e793      	b.n	8000466 <HAL_ADC_Init+0x3a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800053e:	2104      	movs	r1, #4
 8000540:	e7b6      	b.n	80004b0 <HAL_ADC_Init+0x84>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000542:	2800      	cmp	r0, #0
 8000544:	d103      	bne.n	800054e <HAL_ADC_Init+0x122>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000546:	2280      	movs	r2, #128	; 0x80
 8000548:	0252      	lsls	r2, r2, #9
 800054a:	4313      	orrs	r3, r2
 800054c:	e7b9      	b.n	80004c2 <HAL_ADC_Init+0x96>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800054e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000550:	2120      	movs	r1, #32
 8000552:	430a      	orrs	r2, r1
 8000554:	63a2      	str	r2, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000556:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000558:	391f      	subs	r1, #31
 800055a:	430a      	orrs	r2, r1
 800055c:	63e2      	str	r2, [r4, #60]	; 0x3c
 800055e:	e7b0      	b.n	80004c2 <HAL_ADC_Init+0x96>
      ADC_CLEAR_ERRORCODE(hadc);
 8000560:	2300      	movs	r3, #0
 8000562:	63e3      	str	r3, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8000564:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000566:	2203      	movs	r2, #3
 8000568:	4393      	bics	r3, r2
 800056a:	3a02      	subs	r2, #2
 800056c:	4313      	orrs	r3, r2
 800056e:	63a3      	str	r3, [r4, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000570:	2000      	movs	r0, #0
 8000572:	e004      	b.n	800057e <HAL_ADC_Init+0x152>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000574:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000576:	2210      	movs	r2, #16
 8000578:	4313      	orrs	r3, r2
 800057a:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 800057c:	2001      	movs	r0, #1
}
 800057e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000580:	2001      	movs	r0, #1
 8000582:	e7fc      	b.n	800057e <HAL_ADC_Init+0x152>
 8000584:	fffffefd 	.word	0xfffffefd
 8000588:	fffe0219 	.word	0xfffe0219
 800058c:	833fffe7 	.word	0x833fffe7

08000590 <HAL_ADC_Start>:
{
 8000590:	b510      	push	{r4, lr}
 8000592:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000594:	6803      	ldr	r3, [r0, #0]
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	075b      	lsls	r3, r3, #29
 800059a:	d423      	bmi.n	80005e4 <HAL_ADC_Start+0x54>
    __HAL_LOCK(hadc);
 800059c:	2334      	movs	r3, #52	; 0x34
 800059e:	5cc3      	ldrb	r3, [r0, r3]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d021      	beq.n	80005e8 <HAL_ADC_Start+0x58>
 80005a4:	2334      	movs	r3, #52	; 0x34
 80005a6:	2201      	movs	r2, #1
 80005a8:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80005aa:	7e43      	ldrb	r3, [r0, #25]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d114      	bne.n	80005da <HAL_ADC_Start+0x4a>
      ADC_STATE_CLR_SET(hadc->State,
 80005b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80005b2:	4a0e      	ldr	r2, [pc, #56]	; (80005ec <HAL_ADC_Start+0x5c>)
 80005b4:	401a      	ands	r2, r3
 80005b6:	2380      	movs	r3, #128	; 0x80
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	4313      	orrs	r3, r2
 80005bc:	63a3      	str	r3, [r4, #56]	; 0x38
      ADC_CLEAR_ERRORCODE(hadc);
 80005be:	2300      	movs	r3, #0
 80005c0:	63e3      	str	r3, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hadc);
 80005c2:	2234      	movs	r2, #52	; 0x34
 80005c4:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80005c6:	6823      	ldr	r3, [r4, #0]
 80005c8:	3a18      	subs	r2, #24
 80005ca:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80005cc:	6822      	ldr	r2, [r4, #0]
 80005ce:	6893      	ldr	r3, [r2, #8]
 80005d0:	2104      	movs	r1, #4
 80005d2:	430b      	orrs	r3, r1
 80005d4:	6093      	str	r3, [r2, #8]
 80005d6:	2000      	movs	r0, #0
}
 80005d8:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80005da:	f7ff fed3 	bl	8000384 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80005de:	2800      	cmp	r0, #0
 80005e0:	d0e6      	beq.n	80005b0 <HAL_ADC_Start+0x20>
 80005e2:	e7f9      	b.n	80005d8 <HAL_ADC_Start+0x48>
    tmp_hal_status = HAL_BUSY;
 80005e4:	2002      	movs	r0, #2
 80005e6:	e7f7      	b.n	80005d8 <HAL_ADC_Start+0x48>
    __HAL_LOCK(hadc);
 80005e8:	2002      	movs	r0, #2
 80005ea:	e7f5      	b.n	80005d8 <HAL_ADC_Start+0x48>
 80005ec:	fffff0fe 	.word	0xfffff0fe

080005f0 <HAL_ADC_Stop>:
{ 
 80005f0:	b510      	push	{r4, lr}
 80005f2:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80005f4:	2334      	movs	r3, #52	; 0x34
 80005f6:	5cc3      	ldrb	r3, [r0, r3]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d017      	beq.n	800062c <HAL_ADC_Stop+0x3c>
 80005fc:	2334      	movs	r3, #52	; 0x34
 80005fe:	2201      	movs	r2, #1
 8000600:	54c2      	strb	r2, [r0, r3]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000602:	f7ff fe55 	bl	80002b0 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8000606:	2800      	cmp	r0, #0
 8000608:	d003      	beq.n	8000612 <HAL_ADC_Stop+0x22>
  __HAL_UNLOCK(hadc);
 800060a:	2334      	movs	r3, #52	; 0x34
 800060c:	2200      	movs	r2, #0
 800060e:	54e2      	strb	r2, [r4, r3]
}
 8000610:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8000612:	0020      	movs	r0, r4
 8000614:	f7ff fe76 	bl	8000304 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8000618:	2800      	cmp	r0, #0
 800061a:	d1f6      	bne.n	800060a <HAL_ADC_Stop+0x1a>
      ADC_STATE_CLR_SET(hadc->State,
 800061c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800061e:	4a04      	ldr	r2, [pc, #16]	; (8000630 <HAL_ADC_Stop+0x40>)
 8000620:	4013      	ands	r3, r2
 8000622:	3204      	adds	r2, #4
 8000624:	32ff      	adds	r2, #255	; 0xff
 8000626:	4313      	orrs	r3, r2
 8000628:	63a3      	str	r3, [r4, #56]	; 0x38
 800062a:	e7ee      	b.n	800060a <HAL_ADC_Stop+0x1a>
  __HAL_LOCK(hadc);
 800062c:	2002      	movs	r0, #2
 800062e:	e7ef      	b.n	8000610 <HAL_ADC_Stop+0x20>
 8000630:	fffffefe 	.word	0xfffffefe

08000634 <HAL_ADC_PollForConversion>:
{
 8000634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000636:	0006      	movs	r6, r0
 8000638:	000c      	movs	r4, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800063a:	6943      	ldr	r3, [r0, #20]
 800063c:	2b08      	cmp	r3, #8
 800063e:	d026      	beq.n	800068e <HAL_ADC_PollForConversion+0x5a>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000640:	6803      	ldr	r3, [r0, #0]
 8000642:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8000644:	250c      	movs	r5, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000646:	07db      	lsls	r3, r3, #31
 8000648:	d418      	bmi.n	800067c <HAL_ADC_PollForConversion+0x48>
  tickstart = HAL_GetTick();
 800064a:	f7ff fe2b 	bl	80002a4 <HAL_GetTick>
 800064e:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000650:	6832      	ldr	r2, [r6, #0]
 8000652:	6813      	ldr	r3, [r2, #0]
 8000654:	421d      	tst	r5, r3
 8000656:	d11c      	bne.n	8000692 <HAL_ADC_PollForConversion+0x5e>
    if(Timeout != HAL_MAX_DELAY)
 8000658:	1c63      	adds	r3, r4, #1
 800065a:	d0fa      	beq.n	8000652 <HAL_ADC_PollForConversion+0x1e>
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800065c:	2c00      	cmp	r4, #0
 800065e:	d004      	beq.n	800066a <HAL_ADC_PollForConversion+0x36>
 8000660:	f7ff fe20 	bl	80002a4 <HAL_GetTick>
 8000664:	1bc0      	subs	r0, r0, r7
 8000666:	42a0      	cmp	r0, r4
 8000668:	d9f2      	bls.n	8000650 <HAL_ADC_PollForConversion+0x1c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800066a:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800066c:	2204      	movs	r2, #4
 800066e:	4313      	orrs	r3, r2
 8000670:	63b3      	str	r3, [r6, #56]	; 0x38
        __HAL_UNLOCK(hadc);
 8000672:	2334      	movs	r3, #52	; 0x34
 8000674:	2200      	movs	r2, #0
 8000676:	54f2      	strb	r2, [r6, r3]
        return HAL_TIMEOUT;
 8000678:	2003      	movs	r0, #3
 800067a:	e007      	b.n	800068c <HAL_ADC_PollForConversion+0x58>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800067c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800067e:	2220      	movs	r2, #32
 8000680:	4313      	orrs	r3, r2
 8000682:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hadc);
 8000684:	2334      	movs	r3, #52	; 0x34
 8000686:	2200      	movs	r2, #0
 8000688:	54c2      	strb	r2, [r0, r3]
      return HAL_ERROR;
 800068a:	2001      	movs	r0, #1
}
 800068c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800068e:	2508      	movs	r5, #8
 8000690:	e7db      	b.n	800064a <HAL_ADC_PollForConversion+0x16>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000692:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8000694:	2380      	movs	r3, #128	; 0x80
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	430b      	orrs	r3, r1
 800069a:	63b3      	str	r3, [r6, #56]	; 0x38
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800069c:	68d1      	ldr	r1, [r2, #12]
 800069e:	23c0      	movs	r3, #192	; 0xc0
 80006a0:	011b      	lsls	r3, r3, #4
 80006a2:	4219      	tst	r1, r3
 80006a4:	d113      	bne.n	80006ce <HAL_ADC_PollForConversion+0x9a>
 80006a6:	7eb3      	ldrb	r3, [r6, #26]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d110      	bne.n	80006ce <HAL_ADC_PollForConversion+0x9a>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80006ac:	6813      	ldr	r3, [r2, #0]
 80006ae:	071b      	lsls	r3, r3, #28
 80006b0:	d50d      	bpl.n	80006ce <HAL_ADC_PollForConversion+0x9a>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006b2:	6893      	ldr	r3, [r2, #8]
 80006b4:	075b      	lsls	r3, r3, #29
 80006b6:	d412      	bmi.n	80006de <HAL_ADC_PollForConversion+0xaa>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80006b8:	6853      	ldr	r3, [r2, #4]
 80006ba:	210c      	movs	r1, #12
 80006bc:	438b      	bics	r3, r1
 80006be:	6053      	str	r3, [r2, #4]
        ADC_STATE_CLR_SET(hadc->State,
 80006c0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80006c2:	4a0b      	ldr	r2, [pc, #44]	; (80006f0 <HAL_ADC_PollForConversion+0xbc>)
 80006c4:	4013      	ands	r3, r2
 80006c6:	3204      	adds	r2, #4
 80006c8:	32ff      	adds	r2, #255	; 0xff
 80006ca:	4313      	orrs	r3, r2
 80006cc:	63b3      	str	r3, [r6, #56]	; 0x38
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80006ce:	7e33      	ldrb	r3, [r6, #24]
  return HAL_OK;
 80006d0:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d1da      	bne.n	800068c <HAL_ADC_PollForConversion+0x58>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80006d6:	6833      	ldr	r3, [r6, #0]
 80006d8:	220c      	movs	r2, #12
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	e7d6      	b.n	800068c <HAL_ADC_PollForConversion+0x58>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006de:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80006e0:	2220      	movs	r2, #32
 80006e2:	4313      	orrs	r3, r2
 80006e4:	63b3      	str	r3, [r6, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006e6:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
 80006e8:	3a1f      	subs	r2, #31
 80006ea:	4313      	orrs	r3, r2
 80006ec:	63f3      	str	r3, [r6, #60]	; 0x3c
 80006ee:	e7ee      	b.n	80006ce <HAL_ADC_PollForConversion+0x9a>
 80006f0:	fffffefe 	.word	0xfffffefe

080006f4 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80006f4:	6803      	ldr	r3, [r0, #0]
 80006f6:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 80006f8:	4770      	bx	lr

080006fa <HAL_ADC_ConvCpltCallback>:
}
 80006fa:	4770      	bx	lr

080006fc <HAL_ADC_LevelOutOfWindowCallback>:
}
 80006fc:	4770      	bx	lr

080006fe <HAL_ADC_ErrorCallback>:
}
 80006fe:	4770      	bx	lr

08000700 <HAL_ADC_IRQHandler>:
{
 8000700:	b510      	push	{r4, lr}
 8000702:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000704:	6803      	ldr	r3, [r0, #0]
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	0752      	lsls	r2, r2, #29
 800070a:	d502      	bpl.n	8000712 <HAL_ADC_IRQHandler+0x12>
 800070c:	685a      	ldr	r2, [r3, #4]
 800070e:	0752      	lsls	r2, r2, #29
 8000710:	d405      	bmi.n	800071e <HAL_ADC_IRQHandler+0x1e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000712:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000714:	0712      	lsls	r2, r2, #28
 8000716:	d529      	bpl.n	800076c <HAL_ADC_IRQHandler+0x6c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000718:	685a      	ldr	r2, [r3, #4]
 800071a:	0712      	lsls	r2, r2, #28
 800071c:	d526      	bpl.n	800076c <HAL_ADC_IRQHandler+0x6c>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800071e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000720:	06d2      	lsls	r2, r2, #27
 8000722:	d404      	bmi.n	800072e <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000724:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000726:	2280      	movs	r2, #128	; 0x80
 8000728:	0092      	lsls	r2, r2, #2
 800072a:	430a      	orrs	r2, r1
 800072c:	63a2      	str	r2, [r4, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800072e:	68d9      	ldr	r1, [r3, #12]
 8000730:	22c0      	movs	r2, #192	; 0xc0
 8000732:	0112      	lsls	r2, r2, #4
 8000734:	4211      	tst	r1, r2
 8000736:	d113      	bne.n	8000760 <HAL_ADC_IRQHandler+0x60>
 8000738:	7ea2      	ldrb	r2, [r4, #26]
 800073a:	2a00      	cmp	r2, #0
 800073c:	d110      	bne.n	8000760 <HAL_ADC_IRQHandler+0x60>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	0712      	lsls	r2, r2, #28
 8000742:	d50d      	bpl.n	8000760 <HAL_ADC_IRQHandler+0x60>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000744:	689a      	ldr	r2, [r3, #8]
 8000746:	0752      	lsls	r2, r2, #29
 8000748:	d431      	bmi.n	80007ae <HAL_ADC_IRQHandler+0xae>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800074a:	685a      	ldr	r2, [r3, #4]
 800074c:	210c      	movs	r1, #12
 800074e:	438a      	bics	r2, r1
 8000750:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8000752:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000754:	4a20      	ldr	r2, [pc, #128]	; (80007d8 <HAL_ADC_IRQHandler+0xd8>)
 8000756:	4013      	ands	r3, r2
 8000758:	3204      	adds	r2, #4
 800075a:	32ff      	adds	r2, #255	; 0xff
 800075c:	4313      	orrs	r3, r2
 800075e:	63a3      	str	r3, [r4, #56]	; 0x38
    HAL_ADC_ConvCpltCallback(hadc);
 8000760:	0020      	movs	r0, r4
 8000762:	f7ff ffca 	bl	80006fa <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000766:	6823      	ldr	r3, [r4, #0]
 8000768:	220c      	movs	r2, #12
 800076a:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800076c:	6823      	ldr	r3, [r4, #0]
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	0612      	lsls	r2, r2, #24
 8000772:	d502      	bpl.n	800077a <HAL_ADC_IRQHandler+0x7a>
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	061b      	lsls	r3, r3, #24
 8000778:	d422      	bmi.n	80007c0 <HAL_ADC_IRQHandler+0xc0>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800077a:	6823      	ldr	r3, [r4, #0]
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	06d2      	lsls	r2, r2, #27
 8000780:	d514      	bpl.n	80007ac <HAL_ADC_IRQHandler+0xac>
 8000782:	685a      	ldr	r2, [r3, #4]
 8000784:	06d2      	lsls	r2, r2, #27
 8000786:	d511      	bpl.n	80007ac <HAL_ADC_IRQHandler+0xac>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000788:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800078a:	2a01      	cmp	r2, #1
 800078c:	d002      	beq.n	8000794 <HAL_ADC_IRQHandler+0x94>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 800078e:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8000790:	07d2      	lsls	r2, r2, #31
 8000792:	d508      	bpl.n	80007a6 <HAL_ADC_IRQHandler+0xa6>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000794:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000796:	2102      	movs	r1, #2
 8000798:	430a      	orrs	r2, r1
 800079a:	63e2      	str	r2, [r4, #60]	; 0x3c
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800079c:	2210      	movs	r2, #16
 800079e:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80007a0:	0020      	movs	r0, r4
 80007a2:	f7ff ffac 	bl	80006fe <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80007a6:	6823      	ldr	r3, [r4, #0]
 80007a8:	2210      	movs	r2, #16
 80007aa:	601a      	str	r2, [r3, #0]
}
 80007ac:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80007b0:	2220      	movs	r2, #32
 80007b2:	4313      	orrs	r3, r2
 80007b4:	63a3      	str	r3, [r4, #56]	; 0x38
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80007b8:	3a1f      	subs	r2, #31
 80007ba:	4313      	orrs	r3, r2
 80007bc:	63e3      	str	r3, [r4, #60]	; 0x3c
 80007be:	e7cf      	b.n	8000760 <HAL_ADC_IRQHandler+0x60>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80007c0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80007c2:	2380      	movs	r3, #128	; 0x80
 80007c4:	025b      	lsls	r3, r3, #9
 80007c6:	4313      	orrs	r3, r2
 80007c8:	63a3      	str	r3, [r4, #56]	; 0x38
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80007ca:	0020      	movs	r0, r4
 80007cc:	f7ff ff96 	bl	80006fc <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80007d0:	6823      	ldr	r3, [r4, #0]
 80007d2:	2280      	movs	r2, #128	; 0x80
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	e7d0      	b.n	800077a <HAL_ADC_IRQHandler+0x7a>
 80007d8:	fffffefe 	.word	0xfffffefe

080007dc <HAL_ADC_ConfigChannel>:
{
 80007dc:	b530      	push	{r4, r5, lr}
 80007de:	b083      	sub	sp, #12
 80007e0:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 80007e2:	2300      	movs	r3, #0
 80007e4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80007e6:	3334      	adds	r3, #52	; 0x34
 80007e8:	5cc3      	ldrb	r3, [r0, r3]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d100      	bne.n	80007f0 <HAL_ADC_ConfigChannel+0x14>
 80007ee:	e07b      	b.n	80008e8 <HAL_ADC_ConfigChannel+0x10c>
 80007f0:	2334      	movs	r3, #52	; 0x34
 80007f2:	2201      	movs	r2, #1
 80007f4:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80007f6:	6803      	ldr	r3, [r0, #0]
 80007f8:	689a      	ldr	r2, [r3, #8]
 80007fa:	0752      	lsls	r2, r2, #29
 80007fc:	d468      	bmi.n	80008d0 <HAL_ADC_ConfigChannel+0xf4>
    if (sConfig->Rank != ADC_RANK_NONE)
 80007fe:	4a3b      	ldr	r2, [pc, #236]	; (80008ec <HAL_ADC_ConfigChannel+0x110>)
 8000800:	6848      	ldr	r0, [r1, #4]
 8000802:	4290      	cmp	r0, r2
 8000804:	d04a      	beq.n	800089c <HAL_ADC_ConfigChannel+0xc0>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000806:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000808:	2201      	movs	r2, #1
 800080a:	680d      	ldr	r5, [r1, #0]
 800080c:	40aa      	lsls	r2, r5
 800080e:	4302      	orrs	r2, r0
 8000810:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000812:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000814:	2280      	movs	r2, #128	; 0x80
 8000816:	0552      	lsls	r2, r2, #21
 8000818:	4293      	cmp	r3, r2
 800081a:	d013      	beq.n	8000844 <HAL_ADC_ConfigChannel+0x68>
 800081c:	3b01      	subs	r3, #1
 800081e:	2b06      	cmp	r3, #6
 8000820:	d910      	bls.n	8000844 <HAL_ADC_ConfigChannel+0x68>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000822:	6822      	ldr	r2, [r4, #0]
 8000824:	6950      	ldr	r0, [r2, #20]
 8000826:	2307      	movs	r3, #7
 8000828:	4003      	ands	r3, r0
 800082a:	6888      	ldr	r0, [r1, #8]
 800082c:	4298      	cmp	r0, r3
 800082e:	d009      	beq.n	8000844 <HAL_ADC_ConfigChannel+0x68>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000830:	6950      	ldr	r0, [r2, #20]
 8000832:	2307      	movs	r3, #7
 8000834:	4398      	bics	r0, r3
 8000836:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000838:	6822      	ldr	r2, [r4, #0]
 800083a:	6950      	ldr	r0, [r2, #20]
 800083c:	688d      	ldr	r5, [r1, #8]
 800083e:	402b      	ands	r3, r5
 8000840:	4303      	orrs	r3, r0
 8000842:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000844:	680b      	ldr	r3, [r1, #0]
 8000846:	001a      	movs	r2, r3
 8000848:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800084a:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800084c:	2a01      	cmp	r2, #1
 800084e:	d844      	bhi.n	80008da <HAL_ADC_ConfigChannel+0xfe>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000850:	4a27      	ldr	r2, [pc, #156]	; (80008f0 <HAL_ADC_ConfigChannel+0x114>)
 8000852:	6812      	ldr	r2, [r2, #0]
 8000854:	3b10      	subs	r3, #16
 8000856:	4258      	negs	r0, r3
 8000858:	4143      	adcs	r3, r0
 800085a:	425b      	negs	r3, r3
 800085c:	2080      	movs	r0, #128	; 0x80
 800085e:	03c0      	lsls	r0, r0, #15
 8000860:	4003      	ands	r3, r0
 8000862:	4684      	mov	ip, r0
 8000864:	4463      	add	r3, ip
 8000866:	4313      	orrs	r3, r2
 8000868:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <HAL_ADC_ConfigChannel+0x114>)
 800086a:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800086c:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800086e:	2000      	movs	r0, #0
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000870:	2b10      	cmp	r3, #16
 8000872:	d132      	bne.n	80008da <HAL_ADC_ConfigChannel+0xfe>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <HAL_ADC_ConfigChannel+0x118>)
 8000876:	6818      	ldr	r0, [r3, #0]
 8000878:	491f      	ldr	r1, [pc, #124]	; (80008f8 <HAL_ADC_ConfigChannel+0x11c>)
 800087a:	f7ff fc45 	bl	8000108 <__udivsi3>
 800087e:	0083      	lsls	r3, r0, #2
 8000880:	1818      	adds	r0, r3, r0
 8000882:	0040      	lsls	r0, r0, #1
 8000884:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 8000886:	9b01      	ldr	r3, [sp, #4]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d02b      	beq.n	80008e4 <HAL_ADC_ConfigChannel+0x108>
            wait_loop_index--;
 800088c:	9b01      	ldr	r3, [sp, #4]
 800088e:	3b01      	subs	r3, #1
 8000890:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000892:	9b01      	ldr	r3, [sp, #4]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d1f9      	bne.n	800088c <HAL_ADC_ConfigChannel+0xb0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000898:	2000      	movs	r0, #0
 800089a:	e01e      	b.n	80008da <HAL_ADC_ConfigChannel+0xfe>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800089c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800089e:	2001      	movs	r0, #1
 80008a0:	680d      	ldr	r5, [r1, #0]
 80008a2:	40a8      	lsls	r0, r5
 80008a4:	4382      	bics	r2, r0
 80008a6:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80008a8:	680b      	ldr	r3, [r1, #0]
 80008aa:	001a      	movs	r2, r3
 80008ac:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008ae:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80008b0:	2a01      	cmp	r2, #1
 80008b2:	d812      	bhi.n	80008da <HAL_ADC_ConfigChannel+0xfe>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80008b4:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <HAL_ADC_ConfigChannel+0x114>)
 80008b6:	6811      	ldr	r1, [r2, #0]
 80008b8:	3b10      	subs	r3, #16
 80008ba:	425a      	negs	r2, r3
 80008bc:	415a      	adcs	r2, r3
 80008be:	4253      	negs	r3, r2
 80008c0:	059b      	lsls	r3, r3, #22
 80008c2:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <HAL_ADC_ConfigChannel+0x120>)
 80008c4:	4694      	mov	ip, r2
 80008c6:	4463      	add	r3, ip
 80008c8:	400b      	ands	r3, r1
 80008ca:	4a09      	ldr	r2, [pc, #36]	; (80008f0 <HAL_ADC_ConfigChannel+0x114>)
 80008cc:	6013      	str	r3, [r2, #0]
 80008ce:	e004      	b.n	80008da <HAL_ADC_ConfigChannel+0xfe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008d0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80008d2:	2220      	movs	r2, #32
 80008d4:	4313      	orrs	r3, r2
 80008d6:	6383      	str	r3, [r0, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 80008d8:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80008da:	2334      	movs	r3, #52	; 0x34
 80008dc:	2200      	movs	r2, #0
 80008de:	54e2      	strb	r2, [r4, r3]
}
 80008e0:	b003      	add	sp, #12
 80008e2:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008e4:	2000      	movs	r0, #0
 80008e6:	e7f8      	b.n	80008da <HAL_ADC_ConfigChannel+0xfe>
  __HAL_LOCK(hadc);
 80008e8:	2002      	movs	r0, #2
 80008ea:	e7f9      	b.n	80008e0 <HAL_ADC_ConfigChannel+0x104>
 80008ec:	00001001 	.word	0x00001001
 80008f0:	40012708 	.word	0x40012708
 80008f4:	2000000c 	.word	0x2000000c
 80008f8:	000f4240 	.word	0x000f4240
 80008fc:	ffbfffff 	.word	0xffbfffff

08000900 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000900:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000902:	2800      	cmp	r0, #0
 8000904:	db14      	blt.n	8000930 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000906:	0884      	lsrs	r4, r0, #2
 8000908:	00a4      	lsls	r4, r4, #2
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <HAL_NVIC_SetPriority+0x5c>)
 800090c:	469c      	mov	ip, r3
 800090e:	4464      	add	r4, ip
 8000910:	26c0      	movs	r6, #192	; 0xc0
 8000912:	00b6      	lsls	r6, r6, #2
 8000914:	59a5      	ldr	r5, [r4, r6]
 8000916:	2203      	movs	r2, #3
 8000918:	4010      	ands	r0, r2
 800091a:	00c0      	lsls	r0, r0, #3
 800091c:	23ff      	movs	r3, #255	; 0xff
 800091e:	001a      	movs	r2, r3
 8000920:	4082      	lsls	r2, r0
 8000922:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000924:	0189      	lsls	r1, r1, #6
 8000926:	400b      	ands	r3, r1
 8000928:	4083      	lsls	r3, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800092a:	432b      	orrs	r3, r5
 800092c:	51a3      	str	r3, [r4, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800092e:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000930:	b2c0      	uxtb	r0, r0
 8000932:	220f      	movs	r2, #15
 8000934:	4002      	ands	r2, r0
 8000936:	3a08      	subs	r2, #8
 8000938:	0892      	lsrs	r2, r2, #2
 800093a:	0092      	lsls	r2, r2, #2
 800093c:	4b08      	ldr	r3, [pc, #32]	; (8000960 <HAL_NVIC_SetPriority+0x60>)
 800093e:	18d3      	adds	r3, r2, r3
 8000940:	69dd      	ldr	r5, [r3, #28]
 8000942:	2403      	movs	r4, #3
 8000944:	4020      	ands	r0, r4
 8000946:	00c0      	lsls	r0, r0, #3
 8000948:	22ff      	movs	r2, #255	; 0xff
 800094a:	0014      	movs	r4, r2
 800094c:	4084      	lsls	r4, r0
 800094e:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000950:	0189      	lsls	r1, r1, #6
 8000952:	4011      	ands	r1, r2
 8000954:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000956:	4329      	orrs	r1, r5
 8000958:	61d9      	str	r1, [r3, #28]
 800095a:	e7e8      	b.n	800092e <HAL_NVIC_SetPriority+0x2e>
 800095c:	e000e100 	.word	0xe000e100
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000964:	2800      	cmp	r0, #0
 8000966:	db05      	blt.n	8000974 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000968:	231f      	movs	r3, #31
 800096a:	4018      	ands	r0, r3
 800096c:	3b1e      	subs	r3, #30
 800096e:	4083      	lsls	r3, r0
 8000970:	4a01      	ldr	r2, [pc, #4]	; (8000978 <HAL_NVIC_EnableIRQ+0x14>)
 8000972:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000974:	4770      	bx	lr
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	e000e100 	.word	0xe000e100

0800097c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800097c:	1e43      	subs	r3, r0, #1
 800097e:	4a0a      	ldr	r2, [pc, #40]	; (80009a8 <HAL_SYSTICK_Config+0x2c>)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000980:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000982:	4293      	cmp	r3, r2
 8000984:	d80e      	bhi.n	80009a4 <HAL_SYSTICK_Config+0x28>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000986:	4a09      	ldr	r2, [pc, #36]	; (80009ac <HAL_SYSTICK_Config+0x30>)
 8000988:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800098a:	4809      	ldr	r0, [pc, #36]	; (80009b0 <HAL_SYSTICK_Config+0x34>)
 800098c:	6a03      	ldr	r3, [r0, #32]
 800098e:	021b      	lsls	r3, r3, #8
 8000990:	0a1b      	lsrs	r3, r3, #8
 8000992:	21c0      	movs	r1, #192	; 0xc0
 8000994:	0609      	lsls	r1, r1, #24
 8000996:	430b      	orrs	r3, r1
 8000998:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800099a:	2300      	movs	r3, #0
 800099c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800099e:	3307      	adds	r3, #7
 80009a0:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a2:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80009a4:	4770      	bx	lr
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	00ffffff 	.word	0x00ffffff
 80009ac:	e000e010 	.word	0xe000e010
 80009b0:	e000ed00 	.word	0xe000ed00

080009b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009b4:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009b6:	2321      	movs	r3, #33	; 0x21
 80009b8:	5cc3      	ldrb	r3, [r0, r3]
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d003      	beq.n	80009c6 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009be:	2304      	movs	r3, #4
 80009c0:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80009c2:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80009c4:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009c6:	6802      	ldr	r2, [r0, #0]
 80009c8:	6813      	ldr	r3, [r2, #0]
 80009ca:	210e      	movs	r1, #14
 80009cc:	438b      	bics	r3, r1
 80009ce:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009d0:	6801      	ldr	r1, [r0, #0]
 80009d2:	680a      	ldr	r2, [r1, #0]
 80009d4:	2301      	movs	r3, #1
 80009d6:	439a      	bics	r2, r3
 80009d8:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80009da:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80009dc:	0019      	movs	r1, r3
 80009de:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80009e0:	40a1      	lsls	r1, r4
 80009e2:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80009e4:	2221      	movs	r2, #33	; 0x21
 80009e6:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 80009e8:	331f      	adds	r3, #31
 80009ea:	2200      	movs	r2, #0
 80009ec:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 80009ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d002      	beq.n	80009fa <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 80009f4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80009f6:	2000      	movs	r0, #0
 80009f8:	e7e4      	b.n	80009c4 <HAL_DMA_Abort_IT+0x10>
 80009fa:	2000      	movs	r0, #0
 80009fc:	e7e2      	b.n	80009c4 <HAL_DMA_Abort_IT+0x10>
	...

08000a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a02:	46de      	mov	lr, fp
 8000a04:	4657      	mov	r7, sl
 8000a06:	464e      	mov	r6, r9
 8000a08:	4645      	mov	r5, r8
 8000a0a:	b5e0      	push	{r5, r6, r7, lr}
 8000a0c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a0e:	680a      	ldr	r2, [r1, #0]
 8000a10:	2a00      	cmp	r2, #0
 8000a12:	d100      	bne.n	8000a16 <HAL_GPIO_Init+0x16>
 8000a14:	e0ba      	b.n	8000b8c <HAL_GPIO_Init+0x18c>
  uint32_t position = 0x00u;
 8000a16:	2400      	movs	r4, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a18:	2301      	movs	r3, #1
 8000a1a:	4698      	mov	r8, r3

    if (iocurrent != 0x00u)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a1c:	330f      	adds	r3, #15
 8000a1e:	469a      	mov	sl, r3
        GPIOx->AFR[position >> 3u] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a20:	3b0d      	subs	r3, #13
 8000a22:	4699      	mov	r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2u));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a24:	2380      	movs	r3, #128	; 0x80
 8000a26:	055b      	lsls	r3, r3, #21
 8000a28:	469b      	mov	fp, r3
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a2a:	4b5c      	ldr	r3, [pc, #368]	; (8000b9c <HAL_GPIO_Init+0x19c>)
 8000a2c:	18c3      	adds	r3, r0, r3
 8000a2e:	425d      	negs	r5, r3
 8000a30:	416b      	adcs	r3, r5
 8000a32:	425b      	negs	r3, r3
 8000a34:	9301      	str	r3, [sp, #4]
 8000a36:	e039      	b.n	8000aac <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3u];
 8000a38:	08e3      	lsrs	r3, r4, #3
 8000a3a:	009b      	lsls	r3, r3, #2
 8000a3c:	18c3      	adds	r3, r0, r3
 8000a3e:	6a1f      	ldr	r7, [r3, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a40:	2507      	movs	r5, #7
 8000a42:	4025      	ands	r5, r4
 8000a44:	00ad      	lsls	r5, r5, #2
 8000a46:	220f      	movs	r2, #15
 8000a48:	40aa      	lsls	r2, r5
 8000a4a:	4397      	bics	r7, r2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a4c:	690a      	ldr	r2, [r1, #16]
 8000a4e:	40aa      	lsls	r2, r5
 8000a50:	0015      	movs	r5, r2
 8000a52:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3u] = temp;
 8000a54:	621d      	str	r5, [r3, #32]
 8000a56:	e033      	b.n	8000ac0 <HAL_GPIO_Init+0xc0>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a58:	2500      	movs	r5, #0
 8000a5a:	40b5      	lsls	r5, r6
 8000a5c:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a5e:	609d      	str	r5, [r3, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a60:	4b4f      	ldr	r3, [pc, #316]	; (8000ba0 <HAL_GPIO_Init+0x1a0>)
 8000a62:	681b      	ldr	r3, [r3, #0]
        temp &= ~(iocurrent);
 8000a64:	9a00      	ldr	r2, [sp, #0]
 8000a66:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a68:	684a      	ldr	r2, [r1, #4]
 8000a6a:	03d2      	lsls	r2, r2, #15
 8000a6c:	d500      	bpl.n	8000a70 <HAL_GPIO_Init+0x70>
 8000a6e:	e081      	b.n	8000b74 <HAL_GPIO_Init+0x174>
        temp &= ~(iocurrent);
 8000a70:	402b      	ands	r3, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000a72:	4e4b      	ldr	r6, [pc, #300]	; (8000ba0 <HAL_GPIO_Init+0x1a0>)
 8000a74:	6033      	str	r3, [r6, #0]

        temp = EXTI->EMR;
 8000a76:	6873      	ldr	r3, [r6, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a78:	684a      	ldr	r2, [r1, #4]
 8000a7a:	0392      	lsls	r2, r2, #14
 8000a7c:	d47d      	bmi.n	8000b7a <HAL_GPIO_Init+0x17a>
        temp &= ~(iocurrent);
 8000a7e:	402b      	ands	r3, r5
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000a80:	4e47      	ldr	r6, [pc, #284]	; (8000ba0 <HAL_GPIO_Init+0x1a0>)
 8000a82:	6073      	str	r3, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a84:	68b3      	ldr	r3, [r6, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a86:	684a      	ldr	r2, [r1, #4]
 8000a88:	02d2      	lsls	r2, r2, #11
 8000a8a:	d479      	bmi.n	8000b80 <HAL_GPIO_Init+0x180>
        temp &= ~(iocurrent);
 8000a8c:	402b      	ands	r3, r5
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000a8e:	4e44      	ldr	r6, [pc, #272]	; (8000ba0 <HAL_GPIO_Init+0x1a0>)
 8000a90:	60b3      	str	r3, [r6, #8]

        temp = EXTI->FTSR;
 8000a92:	68f3      	ldr	r3, [r6, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a94:	684a      	ldr	r2, [r1, #4]
 8000a96:	0292      	lsls	r2, r2, #10
 8000a98:	d475      	bmi.n	8000b86 <HAL_GPIO_Init+0x186>
        temp &= ~(iocurrent);
 8000a9a:	402b      	ands	r3, r5
 8000a9c:	001a      	movs	r2, r3
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8000a9e:	4b40      	ldr	r3, [pc, #256]	; (8000ba0 <HAL_GPIO_Init+0x1a0>)
 8000aa0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000aa2:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa4:	680a      	ldr	r2, [r1, #0]
 8000aa6:	0013      	movs	r3, r2
 8000aa8:	40e3      	lsrs	r3, r4
 8000aaa:	d06f      	beq.n	8000b8c <HAL_GPIO_Init+0x18c>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000aac:	4646      	mov	r6, r8
 8000aae:	40a6      	lsls	r6, r4
 8000ab0:	4032      	ands	r2, r6
 8000ab2:	9200      	str	r2, [sp, #0]
    if (iocurrent != 0x00u)
 8000ab4:	d0f5      	beq.n	8000aa2 <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ab6:	684b      	ldr	r3, [r1, #4]
 8000ab8:	4655      	mov	r5, sl
 8000aba:	43ab      	bics	r3, r5
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	d0bb      	beq.n	8000a38 <HAL_GPIO_Init+0x38>
      temp = GPIOx->MODER;
 8000ac0:	6803      	ldr	r3, [r0, #0]
 8000ac2:	0067      	lsls	r7, r4, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ac4:	464d      	mov	r5, r9
 8000ac6:	40bd      	lsls	r5, r7
 8000ac8:	43ed      	mvns	r5, r5
 8000aca:	402b      	ands	r3, r5
 8000acc:	469c      	mov	ip, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ace:	684b      	ldr	r3, [r1, #4]
 8000ad0:	464a      	mov	r2, r9
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	40bb      	lsls	r3, r7
 8000ad6:	4662      	mov	r2, ip
 8000ad8:	4313      	orrs	r3, r2
      GPIOx->MODER = temp;
 8000ada:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000adc:	684b      	ldr	r3, [r1, #4]
 8000ade:	4652      	mov	r2, sl
 8000ae0:	4393      	bics	r3, r2
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d811      	bhi.n	8000b0c <HAL_GPIO_Init+0x10c>
        temp = GPIOx->OSPEEDR;
 8000ae8:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000aea:	402b      	ands	r3, r5
 8000aec:	469c      	mov	ip, r3
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000aee:	68cb      	ldr	r3, [r1, #12]
 8000af0:	40bb      	lsls	r3, r7
 8000af2:	4662      	mov	r2, ip
 8000af4:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 8000af6:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 8000af8:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000afa:	43b3      	bics	r3, r6
 8000afc:	001e      	movs	r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000afe:	684b      	ldr	r3, [r1, #4]
 8000b00:	091b      	lsrs	r3, r3, #4
 8000b02:	4642      	mov	r2, r8
 8000b04:	4013      	ands	r3, r2
 8000b06:	40a3      	lsls	r3, r4
 8000b08:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8000b0a:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b0c:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b0e:	402b      	ands	r3, r5
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b10:	688d      	ldr	r5, [r1, #8]
 8000b12:	40bd      	lsls	r5, r7
 8000b14:	431d      	orrs	r5, r3
      GPIOx->PUPDR = temp;
 8000b16:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b18:	684b      	ldr	r3, [r1, #4]
 8000b1a:	465a      	mov	r2, fp
 8000b1c:	4213      	tst	r3, r2
 8000b1e:	d0c0      	beq.n	8000aa2 <HAL_GPIO_Init+0xa2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b20:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <HAL_GPIO_Init+0x1a4>)
 8000b22:	699d      	ldr	r5, [r3, #24]
 8000b24:	4642      	mov	r2, r8
 8000b26:	4315      	orrs	r5, r2
 8000b28:	619d      	str	r5, [r3, #24]
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	9303      	str	r3, [sp, #12]
 8000b30:	9b03      	ldr	r3, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000b32:	08a3      	lsrs	r3, r4, #2
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	4a1c      	ldr	r2, [pc, #112]	; (8000ba8 <HAL_GPIO_Init+0x1a8>)
 8000b38:	4694      	mov	ip, r2
 8000b3a:	4463      	add	r3, ip
 8000b3c:	689d      	ldr	r5, [r3, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b3e:	464e      	mov	r6, r9
 8000b40:	4026      	ands	r6, r4
 8000b42:	00b6      	lsls	r6, r6, #2
 8000b44:	270f      	movs	r7, #15
 8000b46:	40b7      	lsls	r7, r6
 8000b48:	43bd      	bics	r5, r7
 8000b4a:	002f      	movs	r7, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b4c:	2590      	movs	r5, #144	; 0x90
 8000b4e:	05ed      	lsls	r5, r5, #23
 8000b50:	42a8      	cmp	r0, r5
 8000b52:	d100      	bne.n	8000b56 <HAL_GPIO_Init+0x156>
 8000b54:	e780      	b.n	8000a58 <HAL_GPIO_Init+0x58>
 8000b56:	4d15      	ldr	r5, [pc, #84]	; (8000bac <HAL_GPIO_Init+0x1ac>)
 8000b58:	42a8      	cmp	r0, r5
 8000b5a:	d007      	beq.n	8000b6c <HAL_GPIO_Init+0x16c>
 8000b5c:	4d14      	ldr	r5, [pc, #80]	; (8000bb0 <HAL_GPIO_Init+0x1b0>)
 8000b5e:	42a8      	cmp	r0, r5
 8000b60:	d006      	beq.n	8000b70 <HAL_GPIO_Init+0x170>
 8000b62:	9d01      	ldr	r5, [sp, #4]
 8000b64:	4642      	mov	r2, r8
 8000b66:	4395      	bics	r5, r2
 8000b68:	3505      	adds	r5, #5
 8000b6a:	e776      	b.n	8000a5a <HAL_GPIO_Init+0x5a>
 8000b6c:	2501      	movs	r5, #1
 8000b6e:	e774      	b.n	8000a5a <HAL_GPIO_Init+0x5a>
 8000b70:	2502      	movs	r5, #2
 8000b72:	e772      	b.n	8000a5a <HAL_GPIO_Init+0x5a>
          temp |= iocurrent;
 8000b74:	9a00      	ldr	r2, [sp, #0]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	e77b      	b.n	8000a72 <HAL_GPIO_Init+0x72>
          temp |= iocurrent;
 8000b7a:	9a00      	ldr	r2, [sp, #0]
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	e77f      	b.n	8000a80 <HAL_GPIO_Init+0x80>
          temp |= iocurrent;
 8000b80:	9a00      	ldr	r2, [sp, #0]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	e783      	b.n	8000a8e <HAL_GPIO_Init+0x8e>
          temp |= iocurrent;
 8000b86:	9a00      	ldr	r2, [sp, #0]
 8000b88:	431a      	orrs	r2, r3
 8000b8a:	e788      	b.n	8000a9e <HAL_GPIO_Init+0x9e>
  } 
}
 8000b8c:	b005      	add	sp, #20
 8000b8e:	bc3c      	pop	{r2, r3, r4, r5}
 8000b90:	4690      	mov	r8, r2
 8000b92:	4699      	mov	r9, r3
 8000b94:	46a2      	mov	sl, r4
 8000b96:	46ab      	mov	fp, r5
 8000b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	b7fff400 	.word	0xb7fff400
 8000ba0:	40010400 	.word	0x40010400
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40010000 	.word	0x40010000
 8000bac:	48000400 	.word	0x48000400
 8000bb0:	48000800 	.word	0x48000800

08000bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bb6:	46ce      	mov	lr, r9
 8000bb8:	4647      	mov	r7, r8
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b083      	sub	sp, #12
 8000bbe:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bc0:	d100      	bne.n	8000bc4 <HAL_RCC_OscConfig+0x10>
 8000bc2:	e24c      	b.n	800105e <HAL_RCC_OscConfig+0x4aa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bc4:	6803      	ldr	r3, [r0, #0]
 8000bc6:	07db      	lsls	r3, r3, #31
 8000bc8:	d527      	bpl.n	8000c1a <HAL_RCC_OscConfig+0x66>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bca:	4bb7      	ldr	r3, [pc, #732]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000bcc:	685a      	ldr	r2, [r3, #4]
 8000bce:	230c      	movs	r3, #12
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	d018      	beq.n	8000c08 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bd6:	4bb4      	ldr	r3, [pc, #720]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000bd8:	685a      	ldr	r2, [r3, #4]
 8000bda:	230c      	movs	r3, #12
 8000bdc:	4013      	ands	r3, r2
 8000bde:	2b08      	cmp	r3, #8
 8000be0:	d00e      	beq.n	8000c00 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000be2:	6863      	ldr	r3, [r4, #4]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d03e      	beq.n	8000c66 <HAL_RCC_OscConfig+0xb2>
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d155      	bne.n	8000c98 <HAL_RCC_OscConfig+0xe4>
 8000bec:	4bae      	ldr	r3, [pc, #696]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	49ae      	ldr	r1, [pc, #696]	; (8000eac <HAL_RCC_OscConfig+0x2f8>)
 8000bf2:	400a      	ands	r2, r1
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	49ad      	ldr	r1, [pc, #692]	; (8000eb0 <HAL_RCC_OscConfig+0x2fc>)
 8000bfa:	400a      	ands	r2, r1
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	e038      	b.n	8000c72 <HAL_RCC_OscConfig+0xbe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c00:	4ba9      	ldr	r3, [pc, #676]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	03db      	lsls	r3, r3, #15
 8000c06:	d5ec      	bpl.n	8000be2 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c08:	4ba7      	ldr	r3, [pc, #668]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	039b      	lsls	r3, r3, #14
 8000c0e:	d504      	bpl.n	8000c1a <HAL_RCC_OscConfig+0x66>
        return HAL_ERROR;
 8000c10:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c12:	6863      	ldr	r3, [r4, #4]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d100      	bne.n	8000c1a <HAL_RCC_OscConfig+0x66>
 8000c18:	e222      	b.n	8001060 <HAL_RCC_OscConfig+0x4ac>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c1a:	6823      	ldr	r3, [r4, #0]
 8000c1c:	079b      	lsls	r3, r3, #30
 8000c1e:	d578      	bpl.n	8000d12 <HAL_RCC_OscConfig+0x15e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c20:	4ba1      	ldr	r3, [pc, #644]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	220c      	movs	r2, #12
 8000c26:	421a      	tst	r2, r3
 8000c28:	d062      	beq.n	8000cf0 <HAL_RCC_OscConfig+0x13c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c2a:	4b9f      	ldr	r3, [pc, #636]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	230c      	movs	r3, #12
 8000c30:	4013      	ands	r3, r2
 8000c32:	2b08      	cmp	r3, #8
 8000c34:	d058      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x134>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c36:	68e3      	ldr	r3, [r4, #12]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d100      	bne.n	8000c3e <HAL_RCC_OscConfig+0x8a>
 8000c3c:	e08c      	b.n	8000d58 <HAL_RCC_OscConfig+0x1a4>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c3e:	4a9a      	ldr	r2, [pc, #616]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000c40:	6813      	ldr	r3, [r2, #0]
 8000c42:	2101      	movs	r1, #1
 8000c44:	430b      	orrs	r3, r1
 8000c46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c48:	f7ff fb2c 	bl	80002a4 <HAL_GetTick>
 8000c4c:	0007      	movs	r7, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c4e:	4e96      	ldr	r6, [pc, #600]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000c50:	2502      	movs	r5, #2
 8000c52:	6833      	ldr	r3, [r6, #0]
 8000c54:	421d      	tst	r5, r3
 8000c56:	d176      	bne.n	8000d46 <HAL_RCC_OscConfig+0x192>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c58:	f7ff fb24 	bl	80002a4 <HAL_GetTick>
 8000c5c:	1bc0      	subs	r0, r0, r7
 8000c5e:	2802      	cmp	r0, #2
 8000c60:	d9f7      	bls.n	8000c52 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 8000c62:	2003      	movs	r0, #3
 8000c64:	e1fc      	b.n	8001060 <HAL_RCC_OscConfig+0x4ac>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c66:	4a90      	ldr	r2, [pc, #576]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000c68:	6811      	ldr	r1, [r2, #0]
 8000c6a:	2380      	movs	r3, #128	; 0x80
 8000c6c:	025b      	lsls	r3, r3, #9
 8000c6e:	430b      	orrs	r3, r1
 8000c70:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c72:	6863      	ldr	r3, [r4, #4]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d027      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x114>
        tickstart = HAL_GetTick();
 8000c78:	f7ff fb14 	bl	80002a4 <HAL_GetTick>
 8000c7c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c7e:	4e8a      	ldr	r6, [pc, #552]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000c80:	2580      	movs	r5, #128	; 0x80
 8000c82:	02ad      	lsls	r5, r5, #10
 8000c84:	6833      	ldr	r3, [r6, #0]
 8000c86:	422b      	tst	r3, r5
 8000c88:	d1c7      	bne.n	8000c1a <HAL_RCC_OscConfig+0x66>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c8a:	f7ff fb0b 	bl	80002a4 <HAL_GetTick>
 8000c8e:	1bc0      	subs	r0, r0, r7
 8000c90:	2864      	cmp	r0, #100	; 0x64
 8000c92:	d9f7      	bls.n	8000c84 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8000c94:	2003      	movs	r0, #3
 8000c96:	e1e3      	b.n	8001060 <HAL_RCC_OscConfig+0x4ac>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c98:	2b05      	cmp	r3, #5
 8000c9a:	d009      	beq.n	8000cb0 <HAL_RCC_OscConfig+0xfc>
 8000c9c:	4b82      	ldr	r3, [pc, #520]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4982      	ldr	r1, [pc, #520]	; (8000eac <HAL_RCC_OscConfig+0x2f8>)
 8000ca2:	400a      	ands	r2, r1
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4981      	ldr	r1, [pc, #516]	; (8000eb0 <HAL_RCC_OscConfig+0x2fc>)
 8000caa:	400a      	ands	r2, r1
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	e7e0      	b.n	8000c72 <HAL_RCC_OscConfig+0xbe>
 8000cb0:	4b7d      	ldr	r3, [pc, #500]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000cb2:	6819      	ldr	r1, [r3, #0]
 8000cb4:	2280      	movs	r2, #128	; 0x80
 8000cb6:	02d2      	lsls	r2, r2, #11
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	6819      	ldr	r1, [r3, #0]
 8000cbe:	2280      	movs	r2, #128	; 0x80
 8000cc0:	0252      	lsls	r2, r2, #9
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	e7d4      	b.n	8000c72 <HAL_RCC_OscConfig+0xbe>
        tickstart = HAL_GetTick();
 8000cc8:	f7ff faec 	bl	80002a4 <HAL_GetTick>
 8000ccc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cce:	4e76      	ldr	r6, [pc, #472]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000cd0:	2580      	movs	r5, #128	; 0x80
 8000cd2:	02ad      	lsls	r5, r5, #10
 8000cd4:	6833      	ldr	r3, [r6, #0]
 8000cd6:	422b      	tst	r3, r5
 8000cd8:	d09f      	beq.n	8000c1a <HAL_RCC_OscConfig+0x66>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cda:	f7ff fae3 	bl	80002a4 <HAL_GetTick>
 8000cde:	1bc0      	subs	r0, r0, r7
 8000ce0:	2864      	cmp	r0, #100	; 0x64
 8000ce2:	d9f7      	bls.n	8000cd4 <HAL_RCC_OscConfig+0x120>
            return HAL_TIMEOUT;
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	e1bb      	b.n	8001060 <HAL_RCC_OscConfig+0x4ac>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ce8:	4b6f      	ldr	r3, [pc, #444]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	03db      	lsls	r3, r3, #15
 8000cee:	d4a2      	bmi.n	8000c36 <HAL_RCC_OscConfig+0x82>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cf0:	4b6d      	ldr	r3, [pc, #436]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	079b      	lsls	r3, r3, #30
 8000cf6:	d504      	bpl.n	8000d02 <HAL_RCC_OscConfig+0x14e>
        return HAL_ERROR;
 8000cf8:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cfa:	68e3      	ldr	r3, [r4, #12]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d000      	beq.n	8000d02 <HAL_RCC_OscConfig+0x14e>
 8000d00:	e1ae      	b.n	8001060 <HAL_RCC_OscConfig+0x4ac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d02:	4969      	ldr	r1, [pc, #420]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000d04:	680a      	ldr	r2, [r1, #0]
 8000d06:	6923      	ldr	r3, [r4, #16]
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	20f8      	movs	r0, #248	; 0xf8
 8000d0c:	4382      	bics	r2, r0
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d12:	6823      	ldr	r3, [r4, #0]
 8000d14:	071b      	lsls	r3, r3, #28
 8000d16:	d547      	bpl.n	8000da8 <HAL_RCC_OscConfig+0x1f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d18:	69e3      	ldr	r3, [r4, #28]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d030      	beq.n	8000d80 <HAL_RCC_OscConfig+0x1cc>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d1e:	4a62      	ldr	r2, [pc, #392]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000d20:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000d22:	2101      	movs	r1, #1
 8000d24:	430b      	orrs	r3, r1
 8000d26:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d28:	f7ff fabc 	bl	80002a4 <HAL_GetTick>
 8000d2c:	0007      	movs	r7, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d2e:	4e5e      	ldr	r6, [pc, #376]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000d30:	2502      	movs	r5, #2
 8000d32:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000d34:	421d      	tst	r5, r3
 8000d36:	d137      	bne.n	8000da8 <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d38:	f7ff fab4 	bl	80002a4 <HAL_GetTick>
 8000d3c:	1bc0      	subs	r0, r0, r7
 8000d3e:	2802      	cmp	r0, #2
 8000d40:	d9f7      	bls.n	8000d32 <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 8000d42:	2003      	movs	r0, #3
 8000d44:	e18c      	b.n	8001060 <HAL_RCC_OscConfig+0x4ac>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d46:	4958      	ldr	r1, [pc, #352]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000d48:	680a      	ldr	r2, [r1, #0]
 8000d4a:	6923      	ldr	r3, [r4, #16]
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	20f8      	movs	r0, #248	; 0xf8
 8000d50:	4382      	bics	r2, r0
 8000d52:	4313      	orrs	r3, r2
 8000d54:	600b      	str	r3, [r1, #0]
 8000d56:	e7dc      	b.n	8000d12 <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_DISABLE();
 8000d58:	4a53      	ldr	r2, [pc, #332]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000d5a:	6813      	ldr	r3, [r2, #0]
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	438b      	bics	r3, r1
 8000d60:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000d62:	f7ff fa9f 	bl	80002a4 <HAL_GetTick>
 8000d66:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d68:	4e4f      	ldr	r6, [pc, #316]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000d6a:	2502      	movs	r5, #2
 8000d6c:	6833      	ldr	r3, [r6, #0]
 8000d6e:	421d      	tst	r5, r3
 8000d70:	d0cf      	beq.n	8000d12 <HAL_RCC_OscConfig+0x15e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d72:	f7ff fa97 	bl	80002a4 <HAL_GetTick>
 8000d76:	1bc0      	subs	r0, r0, r7
 8000d78:	2802      	cmp	r0, #2
 8000d7a:	d9f7      	bls.n	8000d6c <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8000d7c:	2003      	movs	r0, #3
 8000d7e:	e16f      	b.n	8001060 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d80:	4a49      	ldr	r2, [pc, #292]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000d82:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000d84:	2101      	movs	r1, #1
 8000d86:	438b      	bics	r3, r1
 8000d88:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d8a:	f7ff fa8b 	bl	80002a4 <HAL_GetTick>
 8000d8e:	0007      	movs	r7, r0
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d90:	4e45      	ldr	r6, [pc, #276]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000d92:	2502      	movs	r5, #2
 8000d94:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000d96:	421d      	tst	r5, r3
 8000d98:	d006      	beq.n	8000da8 <HAL_RCC_OscConfig+0x1f4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d9a:	f7ff fa83 	bl	80002a4 <HAL_GetTick>
 8000d9e:	1bc0      	subs	r0, r0, r7
 8000da0:	2802      	cmp	r0, #2
 8000da2:	d9f7      	bls.n	8000d94 <HAL_RCC_OscConfig+0x1e0>
        {
          return HAL_TIMEOUT;
 8000da4:	2003      	movs	r0, #3
 8000da6:	e15b      	b.n	8001060 <HAL_RCC_OscConfig+0x4ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000da8:	6823      	ldr	r3, [r4, #0]
 8000daa:	075b      	lsls	r3, r3, #29
 8000dac:	d400      	bmi.n	8000db0 <HAL_RCC_OscConfig+0x1fc>
 8000dae:	e088      	b.n	8000ec2 <HAL_RCC_OscConfig+0x30e>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000db0:	4b3d      	ldr	r3, [pc, #244]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000db2:	69db      	ldr	r3, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000db4:	2200      	movs	r2, #0
 8000db6:	4690      	mov	r8, r2
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000db8:	00db      	lsls	r3, r3, #3
 8000dba:	d40b      	bmi.n	8000dd4 <HAL_RCC_OscConfig+0x220>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dbc:	4a3a      	ldr	r2, [pc, #232]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000dbe:	69d1      	ldr	r1, [r2, #28]
 8000dc0:	2080      	movs	r0, #128	; 0x80
 8000dc2:	0540      	lsls	r0, r0, #21
 8000dc4:	4301      	orrs	r1, r0
 8000dc6:	61d1      	str	r1, [r2, #28]
 8000dc8:	69d3      	ldr	r3, [r2, #28]
 8000dca:	4003      	ands	r3, r0
 8000dcc:	9301      	str	r3, [sp, #4]
 8000dce:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	4698      	mov	r8, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dd4:	4b37      	ldr	r3, [pc, #220]	; (8000eb4 <HAL_RCC_OscConfig+0x300>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	05db      	lsls	r3, r3, #23
 8000dda:	d50e      	bpl.n	8000dfa <HAL_RCC_OscConfig+0x246>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ddc:	68a3      	ldr	r3, [r4, #8]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d021      	beq.n	8000e26 <HAL_RCC_OscConfig+0x272>
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d138      	bne.n	8000e58 <HAL_RCC_OscConfig+0x2a4>
 8000de6:	4b30      	ldr	r3, [pc, #192]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000de8:	6a1a      	ldr	r2, [r3, #32]
 8000dea:	2101      	movs	r1, #1
 8000dec:	438a      	bics	r2, r1
 8000dee:	621a      	str	r2, [r3, #32]
 8000df0:	6a1a      	ldr	r2, [r3, #32]
 8000df2:	3103      	adds	r1, #3
 8000df4:	438a      	bics	r2, r1
 8000df6:	621a      	str	r2, [r3, #32]
 8000df8:	e01a      	b.n	8000e30 <HAL_RCC_OscConfig+0x27c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000dfa:	4a2e      	ldr	r2, [pc, #184]	; (8000eb4 <HAL_RCC_OscConfig+0x300>)
 8000dfc:	6811      	ldr	r1, [r2, #0]
 8000dfe:	2380      	movs	r3, #128	; 0x80
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	430b      	orrs	r3, r1
 8000e04:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000e06:	f7ff fa4d 	bl	80002a4 <HAL_GetTick>
 8000e0a:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e0c:	4f29      	ldr	r7, [pc, #164]	; (8000eb4 <HAL_RCC_OscConfig+0x300>)
 8000e0e:	2680      	movs	r6, #128	; 0x80
 8000e10:	0076      	lsls	r6, r6, #1
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	4233      	tst	r3, r6
 8000e16:	d1e1      	bne.n	8000ddc <HAL_RCC_OscConfig+0x228>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e18:	f7ff fa44 	bl	80002a4 <HAL_GetTick>
 8000e1c:	1b40      	subs	r0, r0, r5
 8000e1e:	2864      	cmp	r0, #100	; 0x64
 8000e20:	d9f7      	bls.n	8000e12 <HAL_RCC_OscConfig+0x25e>
          return HAL_TIMEOUT;
 8000e22:	2003      	movs	r0, #3
 8000e24:	e11c      	b.n	8001060 <HAL_RCC_OscConfig+0x4ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e26:	4a20      	ldr	r2, [pc, #128]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000e28:	6a13      	ldr	r3, [r2, #32]
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	430b      	orrs	r3, r1
 8000e2e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e30:	68a3      	ldr	r3, [r4, #8]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d026      	beq.n	8000e84 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e36:	f7ff fa35 	bl	80002a4 <HAL_GetTick>
 8000e3a:	4681      	mov	r9, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e3c:	4f1a      	ldr	r7, [pc, #104]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000e3e:	2602      	movs	r6, #2
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e40:	4d1d      	ldr	r5, [pc, #116]	; (8000eb8 <HAL_RCC_OscConfig+0x304>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e42:	6a3b      	ldr	r3, [r7, #32]
 8000e44:	421e      	tst	r6, r3
 8000e46:	d139      	bne.n	8000ebc <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e48:	f7ff fa2c 	bl	80002a4 <HAL_GetTick>
 8000e4c:	464b      	mov	r3, r9
 8000e4e:	1ac0      	subs	r0, r0, r3
 8000e50:	42a8      	cmp	r0, r5
 8000e52:	d9f6      	bls.n	8000e42 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8000e54:	2003      	movs	r0, #3
 8000e56:	e103      	b.n	8001060 <HAL_RCC_OscConfig+0x4ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e58:	2b05      	cmp	r3, #5
 8000e5a:	d009      	beq.n	8000e70 <HAL_RCC_OscConfig+0x2bc>
 8000e5c:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000e5e:	6a1a      	ldr	r2, [r3, #32]
 8000e60:	2101      	movs	r1, #1
 8000e62:	438a      	bics	r2, r1
 8000e64:	621a      	str	r2, [r3, #32]
 8000e66:	6a1a      	ldr	r2, [r3, #32]
 8000e68:	3103      	adds	r1, #3
 8000e6a:	438a      	bics	r2, r1
 8000e6c:	621a      	str	r2, [r3, #32]
 8000e6e:	e7df      	b.n	8000e30 <HAL_RCC_OscConfig+0x27c>
 8000e70:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000e72:	6a1a      	ldr	r2, [r3, #32]
 8000e74:	2104      	movs	r1, #4
 8000e76:	430a      	orrs	r2, r1
 8000e78:	621a      	str	r2, [r3, #32]
 8000e7a:	6a1a      	ldr	r2, [r3, #32]
 8000e7c:	3903      	subs	r1, #3
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	621a      	str	r2, [r3, #32]
 8000e82:	e7d5      	b.n	8000e30 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e84:	f7ff fa0e 	bl	80002a4 <HAL_GetTick>
 8000e88:	4681      	mov	r9, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e8a:	4f07      	ldr	r7, [pc, #28]	; (8000ea8 <HAL_RCC_OscConfig+0x2f4>)
 8000e8c:	2602      	movs	r6, #2
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e8e:	4d0a      	ldr	r5, [pc, #40]	; (8000eb8 <HAL_RCC_OscConfig+0x304>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e90:	6a3b      	ldr	r3, [r7, #32]
 8000e92:	421e      	tst	r6, r3
 8000e94:	d012      	beq.n	8000ebc <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e96:	f7ff fa05 	bl	80002a4 <HAL_GetTick>
 8000e9a:	464b      	mov	r3, r9
 8000e9c:	1ac0      	subs	r0, r0, r3
 8000e9e:	42a8      	cmp	r0, r5
 8000ea0:	d9f6      	bls.n	8000e90 <HAL_RCC_OscConfig+0x2dc>
        {
          return HAL_TIMEOUT;
 8000ea2:	2003      	movs	r0, #3
 8000ea4:	e0dc      	b.n	8001060 <HAL_RCC_OscConfig+0x4ac>
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	fffeffff 	.word	0xfffeffff
 8000eb0:	fffbffff 	.word	0xfffbffff
 8000eb4:	40007000 	.word	0x40007000
 8000eb8:	00001388 	.word	0x00001388
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000ebc:	4643      	mov	r3, r8
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d037      	beq.n	8000f32 <HAL_RCC_OscConfig+0x37e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000ec2:	6823      	ldr	r3, [r4, #0]
 8000ec4:	06db      	lsls	r3, r3, #27
 8000ec6:	d510      	bpl.n	8000eea <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000ec8:	6963      	ldr	r3, [r4, #20]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d037      	beq.n	8000f3e <HAL_RCC_OscConfig+0x38a>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000ece:	3305      	adds	r3, #5
 8000ed0:	d156      	bne.n	8000f80 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000ed2:	4a67      	ldr	r2, [pc, #412]	; (8001070 <HAL_RCC_OscConfig+0x4bc>)
 8000ed4:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000ed6:	2104      	movs	r1, #4
 8000ed8:	438b      	bics	r3, r1
 8000eda:	6353      	str	r3, [r2, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000edc:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000ede:	69a3      	ldr	r3, [r4, #24]
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	20f8      	movs	r0, #248	; 0xf8
 8000ee4:	4381      	bics	r1, r0
 8000ee6:	430b      	orrs	r3, r1
 8000ee8:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000eea:	6a23      	ldr	r3, [r4, #32]
        }
      }
    }
  }

  return HAL_OK;
 8000eec:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d100      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x340>
 8000ef2:	e0b5      	b.n	8001060 <HAL_RCC_OscConfig+0x4ac>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ef4:	4a5e      	ldr	r2, [pc, #376]	; (8001070 <HAL_RCC_OscConfig+0x4bc>)
 8000ef6:	6851      	ldr	r1, [r2, #4]
 8000ef8:	220c      	movs	r2, #12
 8000efa:	400a      	ands	r2, r1
 8000efc:	2a08      	cmp	r2, #8
 8000efe:	d100      	bne.n	8000f02 <HAL_RCC_OscConfig+0x34e>
 8000f00:	e093      	b.n	800102a <HAL_RCC_OscConfig+0x476>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d054      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x3fc>
        __HAL_RCC_PLL_DISABLE();
 8000f06:	4a5a      	ldr	r2, [pc, #360]	; (8001070 <HAL_RCC_OscConfig+0x4bc>)
 8000f08:	6813      	ldr	r3, [r2, #0]
 8000f0a:	495a      	ldr	r1, [pc, #360]	; (8001074 <HAL_RCC_OscConfig+0x4c0>)
 8000f0c:	400b      	ands	r3, r1
 8000f0e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000f10:	f7ff f9c8 	bl	80002a4 <HAL_GetTick>
 8000f14:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f16:	4d56      	ldr	r5, [pc, #344]	; (8001070 <HAL_RCC_OscConfig+0x4bc>)
 8000f18:	2480      	movs	r4, #128	; 0x80
 8000f1a:	04a4      	lsls	r4, r4, #18
 8000f1c:	682b      	ldr	r3, [r5, #0]
 8000f1e:	4223      	tst	r3, r4
 8000f20:	d100      	bne.n	8000f24 <HAL_RCC_OscConfig+0x370>
 8000f22:	e080      	b.n	8001026 <HAL_RCC_OscConfig+0x472>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f24:	f7ff f9be 	bl	80002a4 <HAL_GetTick>
 8000f28:	1b80      	subs	r0, r0, r6
 8000f2a:	2802      	cmp	r0, #2
 8000f2c:	d9f6      	bls.n	8000f1c <HAL_RCC_OscConfig+0x368>
            return HAL_TIMEOUT;
 8000f2e:	2003      	movs	r0, #3
 8000f30:	e096      	b.n	8001060 <HAL_RCC_OscConfig+0x4ac>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f32:	4a4f      	ldr	r2, [pc, #316]	; (8001070 <HAL_RCC_OscConfig+0x4bc>)
 8000f34:	69d3      	ldr	r3, [r2, #28]
 8000f36:	4950      	ldr	r1, [pc, #320]	; (8001078 <HAL_RCC_OscConfig+0x4c4>)
 8000f38:	400b      	ands	r3, r1
 8000f3a:	61d3      	str	r3, [r2, #28]
 8000f3c:	e7c1      	b.n	8000ec2 <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f3e:	4b4c      	ldr	r3, [pc, #304]	; (8001070 <HAL_RCC_OscConfig+0x4bc>)
 8000f40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f42:	2104      	movs	r1, #4
 8000f44:	430a      	orrs	r2, r1
 8000f46:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f4a:	3903      	subs	r1, #3
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000f50:	f7ff f9a8 	bl	80002a4 <HAL_GetTick>
 8000f54:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f56:	4e46      	ldr	r6, [pc, #280]	; (8001070 <HAL_RCC_OscConfig+0x4bc>)
 8000f58:	2502      	movs	r5, #2
 8000f5a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8000f5c:	421d      	tst	r5, r3
 8000f5e:	d106      	bne.n	8000f6e <HAL_RCC_OscConfig+0x3ba>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f60:	f7ff f9a0 	bl	80002a4 <HAL_GetTick>
 8000f64:	1bc0      	subs	r0, r0, r7
 8000f66:	2802      	cmp	r0, #2
 8000f68:	d9f7      	bls.n	8000f5a <HAL_RCC_OscConfig+0x3a6>
          return HAL_TIMEOUT;
 8000f6a:	2003      	movs	r0, #3
 8000f6c:	e078      	b.n	8001060 <HAL_RCC_OscConfig+0x4ac>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f6e:	4940      	ldr	r1, [pc, #256]	; (8001070 <HAL_RCC_OscConfig+0x4bc>)
 8000f70:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8000f72:	69a3      	ldr	r3, [r4, #24]
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	20f8      	movs	r0, #248	; 0xf8
 8000f78:	4382      	bics	r2, r0
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	634b      	str	r3, [r1, #52]	; 0x34
 8000f7e:	e7b4      	b.n	8000eea <HAL_RCC_OscConfig+0x336>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f80:	4b3b      	ldr	r3, [pc, #236]	; (8001070 <HAL_RCC_OscConfig+0x4bc>)
 8000f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f84:	2104      	movs	r1, #4
 8000f86:	430a      	orrs	r2, r1
 8000f88:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000f8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f8c:	3903      	subs	r1, #3
 8000f8e:	438a      	bics	r2, r1
 8000f90:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000f92:	f7ff f987 	bl	80002a4 <HAL_GetTick>
 8000f96:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f98:	4e35      	ldr	r6, [pc, #212]	; (8001070 <HAL_RCC_OscConfig+0x4bc>)
 8000f9a:	2502      	movs	r5, #2
 8000f9c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8000f9e:	421d      	tst	r5, r3
 8000fa0:	d0a3      	beq.n	8000eea <HAL_RCC_OscConfig+0x336>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000fa2:	f7ff f97f 	bl	80002a4 <HAL_GetTick>
 8000fa6:	1bc0      	subs	r0, r0, r7
 8000fa8:	2802      	cmp	r0, #2
 8000faa:	d9f7      	bls.n	8000f9c <HAL_RCC_OscConfig+0x3e8>
          return HAL_TIMEOUT;
 8000fac:	2003      	movs	r0, #3
 8000fae:	e057      	b.n	8001060 <HAL_RCC_OscConfig+0x4ac>
        __HAL_RCC_PLL_DISABLE();
 8000fb0:	4a2f      	ldr	r2, [pc, #188]	; (8001070 <HAL_RCC_OscConfig+0x4bc>)
 8000fb2:	6813      	ldr	r3, [r2, #0]
 8000fb4:	492f      	ldr	r1, [pc, #188]	; (8001074 <HAL_RCC_OscConfig+0x4c0>)
 8000fb6:	400b      	ands	r3, r1
 8000fb8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000fba:	f7ff f973 	bl	80002a4 <HAL_GetTick>
 8000fbe:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc0:	4e2b      	ldr	r6, [pc, #172]	; (8001070 <HAL_RCC_OscConfig+0x4bc>)
 8000fc2:	2580      	movs	r5, #128	; 0x80
 8000fc4:	04ad      	lsls	r5, r5, #18
 8000fc6:	6833      	ldr	r3, [r6, #0]
 8000fc8:	422b      	tst	r3, r5
 8000fca:	d006      	beq.n	8000fda <HAL_RCC_OscConfig+0x426>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fcc:	f7ff f96a 	bl	80002a4 <HAL_GetTick>
 8000fd0:	1bc0      	subs	r0, r0, r7
 8000fd2:	2802      	cmp	r0, #2
 8000fd4:	d9f7      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x412>
            return HAL_TIMEOUT;
 8000fd6:	2003      	movs	r0, #3
 8000fd8:	e042      	b.n	8001060 <HAL_RCC_OscConfig+0x4ac>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fda:	4b25      	ldr	r3, [pc, #148]	; (8001070 <HAL_RCC_OscConfig+0x4bc>)
 8000fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fde:	210f      	movs	r1, #15
 8000fe0:	438a      	bics	r2, r1
 8000fe2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fe8:	6859      	ldr	r1, [r3, #4]
 8000fea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000fec:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000fee:	4302      	orrs	r2, r0
 8000ff0:	4822      	ldr	r0, [pc, #136]	; (800107c <HAL_RCC_OscConfig+0x4c8>)
 8000ff2:	4001      	ands	r1, r0
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ff8:	6819      	ldr	r1, [r3, #0]
 8000ffa:	2280      	movs	r2, #128	; 0x80
 8000ffc:	0452      	lsls	r2, r2, #17
 8000ffe:	430a      	orrs	r2, r1
 8001000:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001002:	f7ff f94f 	bl	80002a4 <HAL_GetTick>
 8001006:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001008:	4d19      	ldr	r5, [pc, #100]	; (8001070 <HAL_RCC_OscConfig+0x4bc>)
 800100a:	2480      	movs	r4, #128	; 0x80
 800100c:	04a4      	lsls	r4, r4, #18
 800100e:	682b      	ldr	r3, [r5, #0]
 8001010:	4223      	tst	r3, r4
 8001012:	d106      	bne.n	8001022 <HAL_RCC_OscConfig+0x46e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001014:	f7ff f946 	bl	80002a4 <HAL_GetTick>
 8001018:	1b80      	subs	r0, r0, r6
 800101a:	2802      	cmp	r0, #2
 800101c:	d9f7      	bls.n	800100e <HAL_RCC_OscConfig+0x45a>
            return HAL_TIMEOUT;
 800101e:	2003      	movs	r0, #3
 8001020:	e01e      	b.n	8001060 <HAL_RCC_OscConfig+0x4ac>
  return HAL_OK;
 8001022:	2000      	movs	r0, #0
 8001024:	e01c      	b.n	8001060 <HAL_RCC_OscConfig+0x4ac>
 8001026:	2000      	movs	r0, #0
 8001028:	e01a      	b.n	8001060 <HAL_RCC_OscConfig+0x4ac>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800102a:	2b01      	cmp	r3, #1
 800102c:	d01d      	beq.n	800106a <HAL_RCC_OscConfig+0x4b6>
        pll_config  = RCC->CFGR;
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <HAL_RCC_OscConfig+0x4bc>)
 8001030:	685a      	ldr	r2, [r3, #4]
        pll_config2 = RCC->CFGR2;
 8001032:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	025b      	lsls	r3, r3, #9
 8001038:	4013      	ands	r3, r2
          return HAL_ERROR;
 800103a:	2001      	movs	r0, #1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800103c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800103e:	42ab      	cmp	r3, r5
 8001040:	d10e      	bne.n	8001060 <HAL_RCC_OscConfig+0x4ac>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001042:	230f      	movs	r3, #15
 8001044:	400b      	ands	r3, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001046:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001048:	428b      	cmp	r3, r1
 800104a:	d109      	bne.n	8001060 <HAL_RCC_OscConfig+0x4ac>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800104c:	20f0      	movs	r0, #240	; 0xf0
 800104e:	0380      	lsls	r0, r0, #14
 8001050:	4002      	ands	r2, r0
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001052:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001054:	1a10      	subs	r0, r2, r0
 8001056:	1e42      	subs	r2, r0, #1
 8001058:	4190      	sbcs	r0, r2
    return HAL_ERROR;
 800105a:	b2c0      	uxtb	r0, r0
 800105c:	e000      	b.n	8001060 <HAL_RCC_OscConfig+0x4ac>
 800105e:	2001      	movs	r0, #1
}
 8001060:	b003      	add	sp, #12
 8001062:	bc0c      	pop	{r2, r3}
 8001064:	4690      	mov	r8, r2
 8001066:	4699      	mov	r9, r3
 8001068:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 800106a:	2001      	movs	r0, #1
 800106c:	e7f8      	b.n	8001060 <HAL_RCC_OscConfig+0x4ac>
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	40021000 	.word	0x40021000
 8001074:	feffffff 	.word	0xfeffffff
 8001078:	efffffff 	.word	0xefffffff
 800107c:	ffc2ffff 	.word	0xffc2ffff

08001080 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001080:	b530      	push	{r4, r5, lr}
 8001082:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001084:	aa04      	add	r2, sp, #16
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <HAL_RCC_GetSysClockFreq+0x6c>)
 8001088:	0018      	movs	r0, r3
 800108a:	c832      	ldmia	r0!, {r1, r4, r5}
 800108c:	c232      	stmia	r2!, {r1, r4, r5}
 800108e:	0011      	movs	r1, r2
 8001090:	6802      	ldr	r2, [r0, #0]
 8001092:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001094:	466a      	mov	r2, sp
 8001096:	3310      	adds	r3, #16
 8001098:	cb13      	ldmia	r3!, {r0, r1, r4}
 800109a:	c213      	stmia	r2!, {r0, r1, r4}
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80010a0:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <HAL_RCC_GetSysClockFreq+0x70>)
 80010a2:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80010a4:	230c      	movs	r3, #12
 80010a6:	4013      	ands	r3, r2
 80010a8:	2b04      	cmp	r3, #4
 80010aa:	d01d      	beq.n	80010e8 <HAL_RCC_GetSysClockFreq+0x68>
 80010ac:	2b08      	cmp	r3, #8
 80010ae:	d002      	beq.n	80010b6 <HAL_RCC_GetSysClockFreq+0x36>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80010b0:	4810      	ldr	r0, [pc, #64]	; (80010f4 <HAL_RCC_GetSysClockFreq+0x74>)
      break;
    }
  }
  return sysclockfreq;
}
 80010b2:	b009      	add	sp, #36	; 0x24
 80010b4:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80010b6:	0c91      	lsrs	r1, r2, #18
 80010b8:	230f      	movs	r3, #15
 80010ba:	4019      	ands	r1, r3
 80010bc:	a804      	add	r0, sp, #16
 80010be:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80010c0:	490b      	ldr	r1, [pc, #44]	; (80010f0 <HAL_RCC_GetSysClockFreq+0x70>)
 80010c2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80010c4:	400b      	ands	r3, r1
 80010c6:	4669      	mov	r1, sp
 80010c8:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80010ca:	03d3      	lsls	r3, r2, #15
 80010cc:	d504      	bpl.n	80010d8 <HAL_RCC_GetSysClockFreq+0x58>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80010ce:	480a      	ldr	r0, [pc, #40]	; (80010f8 <HAL_RCC_GetSysClockFreq+0x78>)
 80010d0:	f7ff f81a 	bl	8000108 <__udivsi3>
 80010d4:	4360      	muls	r0, r4
 80010d6:	e7ec      	b.n	80010b2 <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80010d8:	0163      	lsls	r3, r4, #5
 80010da:	1b1b      	subs	r3, r3, r4
 80010dc:	0198      	lsls	r0, r3, #6
 80010de:	1ac0      	subs	r0, r0, r3
 80010e0:	00c0      	lsls	r0, r0, #3
 80010e2:	1900      	adds	r0, r0, r4
 80010e4:	0200      	lsls	r0, r0, #8
 80010e6:	e7e4      	b.n	80010b2 <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSE_VALUE;
 80010e8:	4803      	ldr	r0, [pc, #12]	; (80010f8 <HAL_RCC_GetSysClockFreq+0x78>)
  return sysclockfreq;
 80010ea:	e7e2      	b.n	80010b2 <HAL_RCC_GetSysClockFreq+0x32>
 80010ec:	080025a4 	.word	0x080025a4
 80010f0:	40021000 	.word	0x40021000
 80010f4:	007a1200 	.word	0x007a1200
 80010f8:	017d7840 	.word	0x017d7840

080010fc <HAL_RCC_ClockConfig>:
{
 80010fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010fe:	46ce      	mov	lr, r9
 8001100:	4647      	mov	r7, r8
 8001102:	b580      	push	{r7, lr}
 8001104:	0004      	movs	r4, r0
 8001106:	000d      	movs	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001108:	2800      	cmp	r0, #0
 800110a:	d100      	bne.n	800110e <HAL_RCC_ClockConfig+0x12>
 800110c:	e081      	b.n	8001212 <HAL_RCC_ClockConfig+0x116>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800110e:	4b43      	ldr	r3, [pc, #268]	; (800121c <HAL_RCC_ClockConfig+0x120>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	2301      	movs	r3, #1
 8001114:	4013      	ands	r3, r2
 8001116:	428b      	cmp	r3, r1
 8001118:	d20a      	bcs.n	8001130 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800111a:	4940      	ldr	r1, [pc, #256]	; (800121c <HAL_RCC_ClockConfig+0x120>)
 800111c:	680b      	ldr	r3, [r1, #0]
 800111e:	2201      	movs	r2, #1
 8001120:	4393      	bics	r3, r2
 8001122:	432b      	orrs	r3, r5
 8001124:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001126:	680b      	ldr	r3, [r1, #0]
 8001128:	401a      	ands	r2, r3
      return HAL_ERROR;
 800112a:	2001      	movs	r0, #1
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800112c:	42aa      	cmp	r2, r5
 800112e:	d171      	bne.n	8001214 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001130:	6823      	ldr	r3, [r4, #0]
 8001132:	079a      	lsls	r2, r3, #30
 8001134:	d50e      	bpl.n	8001154 <HAL_RCC_ClockConfig+0x58>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001136:	075b      	lsls	r3, r3, #29
 8001138:	d505      	bpl.n	8001146 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800113a:	4a39      	ldr	r2, [pc, #228]	; (8001220 <HAL_RCC_ClockConfig+0x124>)
 800113c:	6851      	ldr	r1, [r2, #4]
 800113e:	23e0      	movs	r3, #224	; 0xe0
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	430b      	orrs	r3, r1
 8001144:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001146:	4a36      	ldr	r2, [pc, #216]	; (8001220 <HAL_RCC_ClockConfig+0x124>)
 8001148:	6853      	ldr	r3, [r2, #4]
 800114a:	21f0      	movs	r1, #240	; 0xf0
 800114c:	438b      	bics	r3, r1
 800114e:	68a1      	ldr	r1, [r4, #8]
 8001150:	430b      	orrs	r3, r1
 8001152:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001154:	6823      	ldr	r3, [r4, #0]
 8001156:	07db      	lsls	r3, r3, #31
 8001158:	d530      	bpl.n	80011bc <HAL_RCC_ClockConfig+0xc0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800115a:	6862      	ldr	r2, [r4, #4]
 800115c:	2a01      	cmp	r2, #1
 800115e:	d021      	beq.n	80011a4 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001160:	2a02      	cmp	r2, #2
 8001162:	d025      	beq.n	80011b0 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001164:	4b2e      	ldr	r3, [pc, #184]	; (8001220 <HAL_RCC_ClockConfig+0x124>)
 8001166:	681b      	ldr	r3, [r3, #0]
        return HAL_ERROR;
 8001168:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800116a:	079b      	lsls	r3, r3, #30
 800116c:	d552      	bpl.n	8001214 <HAL_RCC_ClockConfig+0x118>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800116e:	492c      	ldr	r1, [pc, #176]	; (8001220 <HAL_RCC_ClockConfig+0x124>)
 8001170:	684b      	ldr	r3, [r1, #4]
 8001172:	2003      	movs	r0, #3
 8001174:	4383      	bics	r3, r0
 8001176:	4313      	orrs	r3, r2
 8001178:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800117a:	f7ff f893 	bl	80002a4 <HAL_GetTick>
 800117e:	4681      	mov	r9, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001180:	4f27      	ldr	r7, [pc, #156]	; (8001220 <HAL_RCC_ClockConfig+0x124>)
 8001182:	260c      	movs	r6, #12
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001184:	4b27      	ldr	r3, [pc, #156]	; (8001224 <HAL_RCC_ClockConfig+0x128>)
 8001186:	4698      	mov	r8, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	4032      	ands	r2, r6
 800118c:	6863      	ldr	r3, [r4, #4]
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	429a      	cmp	r2, r3
 8001192:	d013      	beq.n	80011bc <HAL_RCC_ClockConfig+0xc0>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001194:	f7ff f886 	bl	80002a4 <HAL_GetTick>
 8001198:	464b      	mov	r3, r9
 800119a:	1ac0      	subs	r0, r0, r3
 800119c:	4540      	cmp	r0, r8
 800119e:	d9f3      	bls.n	8001188 <HAL_RCC_ClockConfig+0x8c>
        return HAL_TIMEOUT;
 80011a0:	2003      	movs	r0, #3
 80011a2:	e037      	b.n	8001214 <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a4:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <HAL_RCC_ClockConfig+0x124>)
 80011a6:	681b      	ldr	r3, [r3, #0]
        return HAL_ERROR;
 80011a8:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011aa:	039b      	lsls	r3, r3, #14
 80011ac:	d4df      	bmi.n	800116e <HAL_RCC_ClockConfig+0x72>
 80011ae:	e031      	b.n	8001214 <HAL_RCC_ClockConfig+0x118>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011b0:	4b1b      	ldr	r3, [pc, #108]	; (8001220 <HAL_RCC_ClockConfig+0x124>)
 80011b2:	681b      	ldr	r3, [r3, #0]
        return HAL_ERROR;
 80011b4:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011b6:	019b      	lsls	r3, r3, #6
 80011b8:	d4d9      	bmi.n	800116e <HAL_RCC_ClockConfig+0x72>
 80011ba:	e02b      	b.n	8001214 <HAL_RCC_ClockConfig+0x118>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <HAL_RCC_ClockConfig+0x120>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	2301      	movs	r3, #1
 80011c2:	4013      	ands	r3, r2
 80011c4:	42ab      	cmp	r3, r5
 80011c6:	d90a      	bls.n	80011de <HAL_RCC_ClockConfig+0xe2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011c8:	4914      	ldr	r1, [pc, #80]	; (800121c <HAL_RCC_ClockConfig+0x120>)
 80011ca:	680b      	ldr	r3, [r1, #0]
 80011cc:	2201      	movs	r2, #1
 80011ce:	4393      	bics	r3, r2
 80011d0:	432b      	orrs	r3, r5
 80011d2:	600b      	str	r3, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011d4:	680b      	ldr	r3, [r1, #0]
 80011d6:	401a      	ands	r2, r3
      return HAL_ERROR;
 80011d8:	2001      	movs	r0, #1
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011da:	42aa      	cmp	r2, r5
 80011dc:	d11a      	bne.n	8001214 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011de:	6823      	ldr	r3, [r4, #0]
 80011e0:	075b      	lsls	r3, r3, #29
 80011e2:	d506      	bpl.n	80011f2 <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80011e4:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <HAL_RCC_ClockConfig+0x124>)
 80011e6:	6853      	ldr	r3, [r2, #4]
 80011e8:	490f      	ldr	r1, [pc, #60]	; (8001228 <HAL_RCC_ClockConfig+0x12c>)
 80011ea:	400b      	ands	r3, r1
 80011ec:	68e1      	ldr	r1, [r4, #12]
 80011ee:	430b      	orrs	r3, r1
 80011f0:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80011f2:	f7ff ff45 	bl	8001080 <HAL_RCC_GetSysClockFreq>
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <HAL_RCC_ClockConfig+0x124>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	061b      	lsls	r3, r3, #24
 80011fc:	0f1b      	lsrs	r3, r3, #28
 80011fe:	4a0b      	ldr	r2, [pc, #44]	; (800122c <HAL_RCC_ClockConfig+0x130>)
 8001200:	5cd3      	ldrb	r3, [r2, r3]
 8001202:	40d8      	lsrs	r0, r3
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <HAL_RCC_ClockConfig+0x134>)
 8001206:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001208:	2001      	movs	r0, #1
 800120a:	f7ff f809 	bl	8000220 <HAL_InitTick>
  return HAL_OK;
 800120e:	2000      	movs	r0, #0
 8001210:	e000      	b.n	8001214 <HAL_RCC_ClockConfig+0x118>
    return HAL_ERROR;
 8001212:	2001      	movs	r0, #1
}
 8001214:	bc0c      	pop	{r2, r3}
 8001216:	4690      	mov	r8, r2
 8001218:	4699      	mov	r9, r3
 800121a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800121c:	40022000 	.word	0x40022000
 8001220:	40021000 	.word	0x40021000
 8001224:	00001388 	.word	0x00001388
 8001228:	fffff8ff 	.word	0xfffff8ff
 800122c:	080025c4 	.word	0x080025c4
 8001230:	2000000c 	.word	0x2000000c

08001234 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	055b      	lsls	r3, r3, #21
 800123a:	0f5b      	lsrs	r3, r3, #29
 800123c:	4a03      	ldr	r2, [pc, #12]	; (800124c <HAL_RCC_GetPCLK1Freq+0x18>)
 800123e:	5cd3      	ldrb	r3, [r2, r3]
 8001240:	4a03      	ldr	r2, [pc, #12]	; (8001250 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001242:	6810      	ldr	r0, [r2, #0]
 8001244:	40d8      	lsrs	r0, r3
}    
 8001246:	4770      	bx	lr
 8001248:	40021000 	.word	0x40021000
 800124c:	080025d4 	.word	0x080025d4
 8001250:	2000000c 	.word	0x2000000c

08001254 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001256:	46ce      	mov	lr, r9
 8001258:	4647      	mov	r7, r8
 800125a:	b580      	push	{r7, lr}
 800125c:	b083      	sub	sp, #12
 800125e:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001260:	6803      	ldr	r3, [r0, #0]
 8001262:	03db      	lsls	r3, r3, #15
 8001264:	d536      	bpl.n	80012d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001266:	4b3f      	ldr	r3, [pc, #252]	; (8001364 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001268:	69db      	ldr	r3, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 800126a:	2500      	movs	r5, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	d40a      	bmi.n	8001286 <HAL_RCCEx_PeriphCLKConfig+0x32>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001270:	4a3c      	ldr	r2, [pc, #240]	; (8001364 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001272:	69d1      	ldr	r1, [r2, #28]
 8001274:	2080      	movs	r0, #128	; 0x80
 8001276:	0540      	lsls	r0, r0, #21
 8001278:	4301      	orrs	r1, r0
 800127a:	61d1      	str	r1, [r2, #28]
 800127c:	69d3      	ldr	r3, [r2, #28]
 800127e:	4003      	ands	r3, r0
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001284:	3501      	adds	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001286:	4b38      	ldr	r3, [pc, #224]	; (8001368 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	05db      	lsls	r3, r3, #23
 800128c:	d53c      	bpl.n	8001308 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800128e:	4b35      	ldr	r3, [pc, #212]	; (8001364 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001290:	6a1b      	ldr	r3, [r3, #32]
 8001292:	22c0      	movs	r2, #192	; 0xc0
 8001294:	0092      	lsls	r2, r2, #2
 8001296:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001298:	d013      	beq.n	80012c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800129a:	6861      	ldr	r1, [r4, #4]
 800129c:	400a      	ands	r2, r1
 800129e:	429a      	cmp	r2, r3
 80012a0:	d00f      	beq.n	80012c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80012a2:	4b30      	ldr	r3, [pc, #192]	; (8001364 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80012a4:	6a18      	ldr	r0, [r3, #32]
 80012a6:	4a31      	ldr	r2, [pc, #196]	; (800136c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80012a8:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80012aa:	6a1e      	ldr	r6, [r3, #32]
 80012ac:	2180      	movs	r1, #128	; 0x80
 80012ae:	0249      	lsls	r1, r1, #9
 80012b0:	4331      	orrs	r1, r6
 80012b2:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80012b4:	6a19      	ldr	r1, [r3, #32]
 80012b6:	4e2e      	ldr	r6, [pc, #184]	; (8001370 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 80012b8:	4031      	ands	r1, r6
 80012ba:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80012bc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80012be:	07c3      	lsls	r3, r0, #31
 80012c0:	d439      	bmi.n	8001336 <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80012c2:	4a28      	ldr	r2, [pc, #160]	; (8001364 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80012c4:	6a13      	ldr	r3, [r2, #32]
 80012c6:	4929      	ldr	r1, [pc, #164]	; (800136c <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80012c8:	400b      	ands	r3, r1
 80012ca:	6861      	ldr	r1, [r4, #4]
 80012cc:	430b      	orrs	r3, r1
 80012ce:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012d0:	2d01      	cmp	r5, #1
 80012d2:	d042      	beq.n	800135a <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80012d4:	6823      	ldr	r3, [r4, #0]
 80012d6:	07db      	lsls	r3, r3, #31
 80012d8:	d506      	bpl.n	80012e8 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80012da:	4a22      	ldr	r2, [pc, #136]	; (8001364 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80012dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012de:	2103      	movs	r1, #3
 80012e0:	438b      	bics	r3, r1
 80012e2:	68a1      	ldr	r1, [r4, #8]
 80012e4:	430b      	orrs	r3, r1
 80012e6:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80012e8:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80012ea:	6823      	ldr	r3, [r4, #0]
 80012ec:	069b      	lsls	r3, r3, #26
 80012ee:	d506      	bpl.n	80012fe <HAL_RCCEx_PeriphCLKConfig+0xaa>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80012f0:	4a1c      	ldr	r2, [pc, #112]	; (8001364 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80012f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80012f4:	2110      	movs	r1, #16
 80012f6:	438b      	bics	r3, r1
 80012f8:	68e1      	ldr	r1, [r4, #12]
 80012fa:	430b      	orrs	r3, r1
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80012fe:	b003      	add	sp, #12
 8001300:	bc0c      	pop	{r2, r3}
 8001302:	4690      	mov	r8, r2
 8001304:	4699      	mov	r9, r3
 8001306:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001308:	4a17      	ldr	r2, [pc, #92]	; (8001368 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800130a:	6811      	ldr	r1, [r2, #0]
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	005b      	lsls	r3, r3, #1
 8001310:	430b      	orrs	r3, r1
 8001312:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001314:	f7fe ffc6 	bl	80002a4 <HAL_GetTick>
 8001318:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131a:	4f13      	ldr	r7, [pc, #76]	; (8001368 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 800131c:	2680      	movs	r6, #128	; 0x80
 800131e:	0076      	lsls	r6, r6, #1
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	4233      	tst	r3, r6
 8001324:	d1b3      	bne.n	800128e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001326:	f7fe ffbd 	bl	80002a4 <HAL_GetTick>
 800132a:	4643      	mov	r3, r8
 800132c:	1ac0      	subs	r0, r0, r3
 800132e:	2864      	cmp	r0, #100	; 0x64
 8001330:	d9f6      	bls.n	8001320 <HAL_RCCEx_PeriphCLKConfig+0xcc>
          return HAL_TIMEOUT;
 8001332:	2003      	movs	r0, #3
 8001334:	e7e3      	b.n	80012fe <HAL_RCCEx_PeriphCLKConfig+0xaa>
        tickstart = HAL_GetTick();
 8001336:	f7fe ffb5 	bl	80002a4 <HAL_GetTick>
 800133a:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800133c:	4f09      	ldr	r7, [pc, #36]	; (8001364 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800133e:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8001342:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001344:	6a3b      	ldr	r3, [r7, #32]
 8001346:	421e      	tst	r6, r3
 8001348:	d1bb      	bne.n	80012c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800134a:	f7fe ffab 	bl	80002a4 <HAL_GetTick>
 800134e:	464b      	mov	r3, r9
 8001350:	1ac0      	subs	r0, r0, r3
 8001352:	4540      	cmp	r0, r8
 8001354:	d9f6      	bls.n	8001344 <HAL_RCCEx_PeriphCLKConfig+0xf0>
            return HAL_TIMEOUT;
 8001356:	2003      	movs	r0, #3
 8001358:	e7d1      	b.n	80012fe <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_PWR_CLK_DISABLE();
 800135a:	69d3      	ldr	r3, [r2, #28]
 800135c:	4906      	ldr	r1, [pc, #24]	; (8001378 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800135e:	400b      	ands	r3, r1
 8001360:	61d3      	str	r3, [r2, #28]
 8001362:	e7b7      	b.n	80012d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
 8001364:	40021000 	.word	0x40021000
 8001368:	40007000 	.word	0x40007000
 800136c:	fffffcff 	.word	0xfffffcff
 8001370:	fffeffff 	.word	0xfffeffff
 8001374:	00001388 	.word	0x00001388
 8001378:	efffffff 	.word	0xefffffff

0800137c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800137c:	6802      	ldr	r2, [r0, #0]
 800137e:	6813      	ldr	r3, [r2, #0]
 8001380:	4906      	ldr	r1, [pc, #24]	; (800139c <UART_EndRxTransfer+0x20>)
 8001382:	400b      	ands	r3, r1
 8001384:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001386:	6802      	ldr	r2, [r0, #0]
 8001388:	6893      	ldr	r3, [r2, #8]
 800138a:	3123      	adds	r1, #35	; 0x23
 800138c:	31ff      	adds	r1, #255	; 0xff
 800138e:	438b      	bics	r3, r1
 8001390:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001392:	2320      	movs	r3, #32
 8001394:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001396:	2300      	movs	r3, #0
 8001398:	6603      	str	r3, [r0, #96]	; 0x60
}
 800139a:	4770      	bx	lr
 800139c:	fffffedf 	.word	0xfffffedf

080013a0 <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80013a0:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80013a2:	2b21      	cmp	r3, #33	; 0x21
 80013a4:	d000      	beq.n	80013a8 <UART_TxISR_8BIT+0x8>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80013a6:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 80013a8:	3331      	adds	r3, #49	; 0x31
 80013aa:	5ac3      	ldrh	r3, [r0, r3]
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00c      	beq.n	80013cc <UART_TxISR_8BIT+0x2c>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80013b2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	6802      	ldr	r2, [r0, #0]
 80013b8:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr++;
 80013ba:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80013bc:	3301      	adds	r3, #1
 80013be:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 80013c0:	2252      	movs	r2, #82	; 0x52
 80013c2:	5a83      	ldrh	r3, [r0, r2]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	5283      	strh	r3, [r0, r2]
}
 80013ca:	e7ec      	b.n	80013a6 <UART_TxISR_8BIT+0x6>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80013cc:	6802      	ldr	r2, [r0, #0]
 80013ce:	6813      	ldr	r3, [r2, #0]
 80013d0:	2180      	movs	r1, #128	; 0x80
 80013d2:	438b      	bics	r3, r1
 80013d4:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80013d6:	6802      	ldr	r2, [r0, #0]
 80013d8:	6813      	ldr	r3, [r2, #0]
 80013da:	3940      	subs	r1, #64	; 0x40
 80013dc:	430b      	orrs	r3, r1
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	e7e1      	b.n	80013a6 <UART_TxISR_8BIT+0x6>

080013e2 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80013e2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80013e4:	2b21      	cmp	r3, #33	; 0x21
 80013e6:	d000      	beq.n	80013ea <UART_TxISR_16BIT+0x8>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80013e8:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 80013ea:	3331      	adds	r3, #49	; 0x31
 80013ec:	5ac3      	ldrh	r3, [r0, r3]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d00e      	beq.n	8001412 <UART_TxISR_16BIT+0x30>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80013f4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	05db      	lsls	r3, r3, #23
 80013fa:	0ddb      	lsrs	r3, r3, #23
 80013fc:	6802      	ldr	r2, [r0, #0]
 80013fe:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8001400:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001402:	3302      	adds	r3, #2
 8001404:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8001406:	2252      	movs	r2, #82	; 0x52
 8001408:	5a83      	ldrh	r3, [r0, r2]
 800140a:	3b01      	subs	r3, #1
 800140c:	b29b      	uxth	r3, r3
 800140e:	5283      	strh	r3, [r0, r2]
}
 8001410:	e7ea      	b.n	80013e8 <UART_TxISR_16BIT+0x6>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001412:	6802      	ldr	r2, [r0, #0]
 8001414:	6813      	ldr	r3, [r2, #0]
 8001416:	2180      	movs	r1, #128	; 0x80
 8001418:	438b      	bics	r3, r1
 800141a:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800141c:	6802      	ldr	r2, [r0, #0]
 800141e:	6813      	ldr	r3, [r2, #0]
 8001420:	3940      	subs	r1, #64	; 0x40
 8001422:	430b      	orrs	r3, r1
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	e7df      	b.n	80013e8 <UART_TxISR_16BIT+0x6>

08001428 <HAL_UART_Transmit_IT>:
{
 8001428:	b510      	push	{r4, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800142a:	6f44      	ldr	r4, [r0, #116]	; 0x74
    return HAL_BUSY;
 800142c:	2302      	movs	r3, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800142e:	2c20      	cmp	r4, #32
 8001430:	d121      	bne.n	8001476 <HAL_UART_Transmit_IT+0x4e>
    if ((pData == NULL) || (Size == 0U))
 8001432:	2900      	cmp	r1, #0
 8001434:	d038      	beq.n	80014a8 <HAL_UART_Transmit_IT+0x80>
      return HAL_ERROR;
 8001436:	3b01      	subs	r3, #1
    if ((pData == NULL) || (Size == 0U))
 8001438:	2a00      	cmp	r2, #0
 800143a:	d01c      	beq.n	8001476 <HAL_UART_Transmit_IT+0x4e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800143c:	2380      	movs	r3, #128	; 0x80
 800143e:	015b      	lsls	r3, r3, #5
 8001440:	6884      	ldr	r4, [r0, #8]
 8001442:	429c      	cmp	r4, r3
 8001444:	d019      	beq.n	800147a <HAL_UART_Transmit_IT+0x52>
    __HAL_LOCK(huart);
 8001446:	2370      	movs	r3, #112	; 0x70
 8001448:	5cc3      	ldrb	r3, [r0, r3]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d02e      	beq.n	80014ac <HAL_UART_Transmit_IT+0x84>
    huart->pTxBuffPtr  = pData;
 800144e:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001450:	2350      	movs	r3, #80	; 0x50
 8001452:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8001454:	3302      	adds	r3, #2
 8001456:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001458:	2300      	movs	r3, #0
 800145a:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800145c:	3321      	adds	r3, #33	; 0x21
 800145e:	6743      	str	r3, [r0, #116]	; 0x74
      huart->TxISR = UART_TxISR_8BIT;
 8001460:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <HAL_UART_Transmit_IT+0xa8>)
 8001462:	6643      	str	r3, [r0, #100]	; 0x64
    __HAL_UNLOCK(huart);
 8001464:	2370      	movs	r3, #112	; 0x70
 8001466:	2200      	movs	r2, #0
 8001468:	54c2      	strb	r2, [r0, r3]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800146a:	6802      	ldr	r2, [r0, #0]
 800146c:	6813      	ldr	r3, [r2, #0]
 800146e:	2180      	movs	r1, #128	; 0x80
 8001470:	430b      	orrs	r3, r1
 8001472:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	0018      	movs	r0, r3
 8001478:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800147a:	6903      	ldr	r3, [r0, #16]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d119      	bne.n	80014b4 <HAL_UART_Transmit_IT+0x8c>
        return  HAL_ERROR;
 8001480:	3301      	adds	r3, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 8001482:	07cc      	lsls	r4, r1, #31
 8001484:	d4f7      	bmi.n	8001476 <HAL_UART_Transmit_IT+0x4e>
    __HAL_LOCK(huart);
 8001486:	2370      	movs	r3, #112	; 0x70
 8001488:	5cc4      	ldrb	r4, [r0, r3]
 800148a:	3b6e      	subs	r3, #110	; 0x6e
 800148c:	2c01      	cmp	r4, #1
 800148e:	d0f2      	beq.n	8001476 <HAL_UART_Transmit_IT+0x4e>
    huart->pTxBuffPtr  = pData;
 8001490:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8001492:	2350      	movs	r3, #80	; 0x50
 8001494:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8001496:	3302      	adds	r3, #2
 8001498:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800149a:	2300      	movs	r3, #0
 800149c:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800149e:	3321      	adds	r3, #33	; 0x21
 80014a0:	6743      	str	r3, [r0, #116]	; 0x74
      huart->TxISR = UART_TxISR_16BIT;
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <HAL_UART_Transmit_IT+0xac>)
 80014a4:	6643      	str	r3, [r0, #100]	; 0x64
 80014a6:	e7dd      	b.n	8001464 <HAL_UART_Transmit_IT+0x3c>
      return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e7e4      	b.n	8001476 <HAL_UART_Transmit_IT+0x4e>
    __HAL_LOCK(huart);
 80014ac:	2302      	movs	r3, #2
 80014ae:	e7e2      	b.n	8001476 <HAL_UART_Transmit_IT+0x4e>
 80014b0:	2302      	movs	r3, #2
 80014b2:	e7e0      	b.n	8001476 <HAL_UART_Transmit_IT+0x4e>
 80014b4:	2370      	movs	r3, #112	; 0x70
 80014b6:	5cc3      	ldrb	r3, [r0, r3]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d0f9      	beq.n	80014b0 <HAL_UART_Transmit_IT+0x88>
    huart->pTxBuffPtr  = pData;
 80014bc:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80014be:	2350      	movs	r3, #80	; 0x50
 80014c0:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 80014c2:	3302      	adds	r3, #2
 80014c4:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80014ca:	3321      	adds	r3, #33	; 0x21
 80014cc:	6743      	str	r3, [r0, #116]	; 0x74
 80014ce:	e7c7      	b.n	8001460 <HAL_UART_Transmit_IT+0x38>
 80014d0:	080013a1 	.word	0x080013a1
 80014d4:	080013e3 	.word	0x080013e3

080014d8 <HAL_UART_Receive_IT>:
{
 80014d8:	b530      	push	{r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80014da:	6f84      	ldr	r4, [r0, #120]	; 0x78
    return HAL_BUSY;
 80014dc:	2302      	movs	r3, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 80014de:	2c20      	cmp	r4, #32
 80014e0:	d135      	bne.n	800154e <HAL_UART_Receive_IT+0x76>
    if ((pData == NULL) || (Size == 0U))
 80014e2:	2900      	cmp	r1, #0
 80014e4:	d05f      	beq.n	80015a6 <HAL_UART_Receive_IT+0xce>
      return HAL_ERROR;
 80014e6:	3b01      	subs	r3, #1
    if ((pData == NULL) || (Size == 0U))
 80014e8:	2a00      	cmp	r2, #0
 80014ea:	d030      	beq.n	800154e <HAL_UART_Receive_IT+0x76>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80014ec:	6883      	ldr	r3, [r0, #8]
 80014ee:	2480      	movs	r4, #128	; 0x80
 80014f0:	0164      	lsls	r4, r4, #5
 80014f2:	42a3      	cmp	r3, r4
 80014f4:	d02d      	beq.n	8001552 <HAL_UART_Receive_IT+0x7a>
    __HAL_LOCK(huart);
 80014f6:	2470      	movs	r4, #112	; 0x70
 80014f8:	5d04      	ldrb	r4, [r0, r4]
 80014fa:	2c01      	cmp	r4, #1
 80014fc:	d055      	beq.n	80015aa <HAL_UART_Receive_IT+0xd2>
 80014fe:	2470      	movs	r4, #112	; 0x70
 8001500:	2501      	movs	r5, #1
 8001502:	5505      	strb	r5, [r0, r4]
    huart->pRxBuffPtr  = pData;
 8001504:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize  = Size;
 8001506:	2158      	movs	r1, #88	; 0x58
 8001508:	5242      	strh	r2, [r0, r1]
    huart->RxXferCount = Size;
 800150a:	3102      	adds	r1, #2
 800150c:	5242      	strh	r2, [r0, r1]
    huart->RxISR       = NULL;
 800150e:	2200      	movs	r2, #0
 8001510:	6602      	str	r2, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8001512:	2b00      	cmp	r3, #0
 8001514:	d036      	beq.n	8001584 <HAL_UART_Receive_IT+0xac>
 8001516:	235c      	movs	r3, #92	; 0x5c
 8001518:	2200      	movs	r2, #0
 800151a:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800151c:	2300      	movs	r3, #0
 800151e:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001520:	3322      	adds	r3, #34	; 0x22
 8001522:	6783      	str	r3, [r0, #120]	; 0x78
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001524:	6802      	ldr	r2, [r0, #0]
 8001526:	6893      	ldr	r3, [r2, #8]
 8001528:	2101      	movs	r1, #1
 800152a:	430b      	orrs	r3, r1
 800152c:	6093      	str	r3, [r2, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800152e:	2380      	movs	r3, #128	; 0x80
 8001530:	015b      	lsls	r3, r3, #5
 8001532:	6882      	ldr	r2, [r0, #8]
 8001534:	429a      	cmp	r2, r3
 8001536:	d030      	beq.n	800159a <HAL_UART_Receive_IT+0xc2>
      huart->RxISR = UART_RxISR_8BIT;
 8001538:	4b27      	ldr	r3, [pc, #156]	; (80015d8 <HAL_UART_Receive_IT+0x100>)
 800153a:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_UNLOCK(huart);
 800153c:	2370      	movs	r3, #112	; 0x70
 800153e:	2200      	movs	r2, #0
 8001540:	54c2      	strb	r2, [r0, r3]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001542:	6802      	ldr	r2, [r0, #0]
 8001544:	6811      	ldr	r1, [r2, #0]
 8001546:	33b0      	adds	r3, #176	; 0xb0
 8001548:	430b      	orrs	r3, r1
 800154a:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	0018      	movs	r0, r3
 8001550:	bd30      	pop	{r4, r5, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001552:	6903      	ldr	r3, [r0, #16]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d12c      	bne.n	80015b2 <HAL_UART_Receive_IT+0xda>
        return  HAL_ERROR;
 8001558:	3301      	adds	r3, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 800155a:	07cc      	lsls	r4, r1, #31
 800155c:	d4f7      	bmi.n	800154e <HAL_UART_Receive_IT+0x76>
    __HAL_LOCK(huart);
 800155e:	2370      	movs	r3, #112	; 0x70
 8001560:	5cc4      	ldrb	r4, [r0, r3]
 8001562:	3b6e      	subs	r3, #110	; 0x6e
 8001564:	2c01      	cmp	r4, #1
 8001566:	d0f2      	beq.n	800154e <HAL_UART_Receive_IT+0x76>
 8001568:	2370      	movs	r3, #112	; 0x70
 800156a:	2401      	movs	r4, #1
 800156c:	54c4      	strb	r4, [r0, r3]
    huart->pRxBuffPtr  = pData;
 800156e:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize  = Size;
 8001570:	3b18      	subs	r3, #24
 8001572:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8001574:	3302      	adds	r3, #2
 8001576:	52c2      	strh	r2, [r0, r3]
    huart->RxISR       = NULL;
 8001578:	2300      	movs	r3, #0
 800157a:	6603      	str	r3, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 800157c:	335c      	adds	r3, #92	; 0x5c
 800157e:	4a17      	ldr	r2, [pc, #92]	; (80015dc <HAL_UART_Receive_IT+0x104>)
 8001580:	52c2      	strh	r2, [r0, r3]
 8001582:	e7cb      	b.n	800151c <HAL_UART_Receive_IT+0x44>
 8001584:	6903      	ldr	r3, [r0, #16]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d103      	bne.n	8001592 <HAL_UART_Receive_IT+0xba>
 800158a:	335c      	adds	r3, #92	; 0x5c
 800158c:	22ff      	movs	r2, #255	; 0xff
 800158e:	52c2      	strh	r2, [r0, r3]
 8001590:	e7c4      	b.n	800151c <HAL_UART_Receive_IT+0x44>
 8001592:	235c      	movs	r3, #92	; 0x5c
 8001594:	227f      	movs	r2, #127	; 0x7f
 8001596:	52c2      	strh	r2, [r0, r3]
 8001598:	e7c0      	b.n	800151c <HAL_UART_Receive_IT+0x44>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800159a:	6903      	ldr	r3, [r0, #16]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1cb      	bne.n	8001538 <HAL_UART_Receive_IT+0x60>
      huart->RxISR = UART_RxISR_16BIT;
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <HAL_UART_Receive_IT+0x108>)
 80015a2:	6603      	str	r3, [r0, #96]	; 0x60
 80015a4:	e7ca      	b.n	800153c <HAL_UART_Receive_IT+0x64>
      return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e7d1      	b.n	800154e <HAL_UART_Receive_IT+0x76>
    __HAL_LOCK(huart);
 80015aa:	2302      	movs	r3, #2
 80015ac:	e7cf      	b.n	800154e <HAL_UART_Receive_IT+0x76>
 80015ae:	2302      	movs	r3, #2
 80015b0:	e7cd      	b.n	800154e <HAL_UART_Receive_IT+0x76>
 80015b2:	2370      	movs	r3, #112	; 0x70
 80015b4:	5cc3      	ldrb	r3, [r0, r3]
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d0f9      	beq.n	80015ae <HAL_UART_Receive_IT+0xd6>
 80015ba:	2370      	movs	r3, #112	; 0x70
 80015bc:	2401      	movs	r4, #1
 80015be:	54c4      	strb	r4, [r0, r3]
    huart->pRxBuffPtr  = pData;
 80015c0:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize  = Size;
 80015c2:	3b18      	subs	r3, #24
 80015c4:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 80015c6:	3302      	adds	r3, #2
 80015c8:	52c2      	strh	r2, [r0, r3]
    huart->RxISR       = NULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	6603      	str	r3, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 80015ce:	335c      	adds	r3, #92	; 0x5c
 80015d0:	22ff      	movs	r2, #255	; 0xff
 80015d2:	52c2      	strh	r2, [r0, r3]
 80015d4:	e7a2      	b.n	800151c <HAL_UART_Receive_IT+0x44>
 80015d6:	46c0      	nop			; (mov r8, r8)
 80015d8:	080015e5 	.word	0x080015e5
 80015dc:	000001ff 	.word	0x000001ff
 80015e0:	08001649 	.word	0x08001649

080015e4 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80015e4:	b510      	push	{r4, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80015e6:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80015e8:	2b22      	cmp	r3, #34	; 0x22
 80015ea:	d005      	beq.n	80015f8 <UART_RxISR_8BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80015ec:	6802      	ldr	r2, [r0, #0]
 80015ee:	6993      	ldr	r3, [r2, #24]
 80015f0:	2108      	movs	r1, #8
 80015f2:	430b      	orrs	r3, r1
 80015f4:	6193      	str	r3, [r2, #24]
  }
}
 80015f6:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80015f8:	6803      	ldr	r3, [r0, #0]
 80015fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  uint16_t uhMask = huart->Mask;
 80015fc:	225c      	movs	r2, #92	; 0x5c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80015fe:	5a82      	ldrh	r2, [r0, r2]
 8001600:	4013      	ands	r3, r2
 8001602:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001604:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8001606:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001608:	3301      	adds	r3, #1
 800160a:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800160c:	225a      	movs	r2, #90	; 0x5a
 800160e:	5a83      	ldrh	r3, [r0, r2]
 8001610:	3b01      	subs	r3, #1
 8001612:	b29b      	uxth	r3, r3
 8001614:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 8001616:	5a83      	ldrh	r3, [r0, r2]
 8001618:	b29b      	uxth	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1eb      	bne.n	80015f6 <UART_RxISR_8BIT+0x12>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800161e:	6802      	ldr	r2, [r0, #0]
 8001620:	6813      	ldr	r3, [r2, #0]
 8001622:	4908      	ldr	r1, [pc, #32]	; (8001644 <UART_RxISR_8BIT+0x60>)
 8001624:	400b      	ands	r3, r1
 8001626:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001628:	6802      	ldr	r2, [r0, #0]
 800162a:	6893      	ldr	r3, [r2, #8]
 800162c:	3123      	adds	r1, #35	; 0x23
 800162e:	31ff      	adds	r1, #255	; 0xff
 8001630:	438b      	bics	r3, r1
 8001632:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8001634:	2320      	movs	r3, #32
 8001636:	6783      	str	r3, [r0, #120]	; 0x78
      huart->RxISR = NULL;
 8001638:	2300      	movs	r3, #0
 800163a:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 800163c:	f000 ff3d 	bl	80024ba <HAL_UART_RxCpltCallback>
 8001640:	e7d9      	b.n	80015f6 <UART_RxISR_8BIT+0x12>
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	fffffedf 	.word	0xfffffedf

08001648 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8001648:	b510      	push	{r4, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800164a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800164c:	2b22      	cmp	r3, #34	; 0x22
 800164e:	d005      	beq.n	800165c <UART_RxISR_16BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001650:	6802      	ldr	r2, [r0, #0]
 8001652:	6993      	ldr	r3, [r2, #24]
 8001654:	2108      	movs	r1, #8
 8001656:	430b      	orrs	r3, r1
 8001658:	6193      	str	r3, [r2, #24]
  }
}
 800165a:	bd10      	pop	{r4, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800165c:	6803      	ldr	r3, [r0, #0]
 800165e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
  uint16_t uhMask = huart->Mask;
 8001660:	225c      	movs	r2, #92	; 0x5c
    *tmp = (uint16_t)(uhdata & uhMask);
 8001662:	5a82      	ldrh	r2, [r0, r2]
 8001664:	4013      	ands	r3, r2
 8001666:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001668:	8013      	strh	r3, [r2, #0]
    huart->pRxBuffPtr += 2U;
 800166a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800166c:	3302      	adds	r3, #2
 800166e:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8001670:	225a      	movs	r2, #90	; 0x5a
 8001672:	5a83      	ldrh	r3, [r0, r2]
 8001674:	3b01      	subs	r3, #1
 8001676:	b29b      	uxth	r3, r3
 8001678:	5283      	strh	r3, [r0, r2]
    if (huart->RxXferCount == 0U)
 800167a:	5a83      	ldrh	r3, [r0, r2]
 800167c:	b29b      	uxth	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d1eb      	bne.n	800165a <UART_RxISR_16BIT+0x12>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001682:	6802      	ldr	r2, [r0, #0]
 8001684:	6813      	ldr	r3, [r2, #0]
 8001686:	4908      	ldr	r1, [pc, #32]	; (80016a8 <UART_RxISR_16BIT+0x60>)
 8001688:	400b      	ands	r3, r1
 800168a:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800168c:	6802      	ldr	r2, [r0, #0]
 800168e:	6893      	ldr	r3, [r2, #8]
 8001690:	3123      	adds	r1, #35	; 0x23
 8001692:	31ff      	adds	r1, #255	; 0xff
 8001694:	438b      	bics	r3, r1
 8001696:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8001698:	2320      	movs	r3, #32
 800169a:	6783      	str	r3, [r0, #120]	; 0x78
      huart->RxISR = NULL;
 800169c:	2300      	movs	r3, #0
 800169e:	6603      	str	r3, [r0, #96]	; 0x60
      HAL_UART_RxCpltCallback(huart);
 80016a0:	f000 ff0b 	bl	80024ba <HAL_UART_RxCpltCallback>
 80016a4:	e7d9      	b.n	800165a <UART_RxISR_16BIT+0x12>
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	fffffedf 	.word	0xfffffedf

080016ac <HAL_UART_ErrorCallback>:
}
 80016ac:	4770      	bx	lr
	...

080016b0 <HAL_UART_IRQHandler>:
{
 80016b0:	b570      	push	{r4, r5, r6, lr}
 80016b2:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80016b4:	6802      	ldr	r2, [r0, #0]
 80016b6:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80016b8:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80016ba:	6890      	ldr	r0, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80016bc:	4d53      	ldr	r5, [pc, #332]	; (800180c <HAL_UART_IRQHandler+0x15c>)
  if (errorflags == 0U)
 80016be:	422b      	tst	r3, r5
 80016c0:	d10c      	bne.n	80016dc <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80016c2:	0698      	lsls	r0, r3, #26
 80016c4:	d400      	bmi.n	80016c8 <HAL_UART_IRQHandler+0x18>
 80016c6:	e085      	b.n	80017d4 <HAL_UART_IRQHandler+0x124>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80016c8:	0688      	lsls	r0, r1, #26
 80016ca:	d400      	bmi.n	80016ce <HAL_UART_IRQHandler+0x1e>
 80016cc:	e082      	b.n	80017d4 <HAL_UART_IRQHandler+0x124>
      if (huart->RxISR != NULL)
 80016ce:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d100      	bne.n	80016d6 <HAL_UART_IRQHandler+0x26>
 80016d4:	e08c      	b.n	80017f0 <HAL_UART_IRQHandler+0x140>
        huart->RxISR(huart);
 80016d6:	0020      	movs	r0, r4
 80016d8:	4798      	blx	r3
 80016da:	e089      	b.n	80017f0 <HAL_UART_IRQHandler+0x140>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80016dc:	2501      	movs	r5, #1
 80016de:	4028      	ands	r0, r5
 80016e0:	d103      	bne.n	80016ea <HAL_UART_IRQHandler+0x3a>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80016e2:	3520      	adds	r5, #32
 80016e4:	35ff      	adds	r5, #255	; 0xff
 80016e6:	4229      	tst	r1, r5
 80016e8:	d074      	beq.n	80017d4 <HAL_UART_IRQHandler+0x124>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80016ea:	07dd      	lsls	r5, r3, #31
 80016ec:	d506      	bpl.n	80016fc <HAL_UART_IRQHandler+0x4c>
 80016ee:	05cd      	lsls	r5, r1, #23
 80016f0:	d504      	bpl.n	80016fc <HAL_UART_IRQHandler+0x4c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80016f2:	2501      	movs	r5, #1
 80016f4:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80016f6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80016f8:	432a      	orrs	r2, r5
 80016fa:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80016fc:	079a      	lsls	r2, r3, #30
 80016fe:	d556      	bpl.n	80017ae <HAL_UART_IRQHandler+0xfe>
 8001700:	2800      	cmp	r0, #0
 8001702:	d00f      	beq.n	8001724 <HAL_UART_IRQHandler+0x74>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001704:	6822      	ldr	r2, [r4, #0]
 8001706:	2502      	movs	r5, #2
 8001708:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800170a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800170c:	3502      	adds	r5, #2
 800170e:	432a      	orrs	r2, r5
 8001710:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001712:	421d      	tst	r5, r3
 8001714:	d006      	beq.n	8001724 <HAL_UART_IRQHandler+0x74>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001716:	6822      	ldr	r2, [r4, #0]
 8001718:	2504      	movs	r5, #4
 800171a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800171c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800171e:	3d02      	subs	r5, #2
 8001720:	432a      	orrs	r2, r5
 8001722:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001724:	071a      	lsls	r2, r3, #28
 8001726:	d509      	bpl.n	800173c <HAL_UART_IRQHandler+0x8c>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8001728:	068a      	lsls	r2, r1, #26
 800172a:	d401      	bmi.n	8001730 <HAL_UART_IRQHandler+0x80>
 800172c:	2800      	cmp	r0, #0
 800172e:	d005      	beq.n	800173c <HAL_UART_IRQHandler+0x8c>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001730:	6822      	ldr	r2, [r4, #0]
 8001732:	2008      	movs	r0, #8
 8001734:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001736:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8001738:	4302      	orrs	r2, r0
 800173a:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800173c:	051a      	lsls	r2, r3, #20
 800173e:	d509      	bpl.n	8001754 <HAL_UART_IRQHandler+0xa4>
 8001740:	014a      	lsls	r2, r1, #5
 8001742:	d507      	bpl.n	8001754 <HAL_UART_IRQHandler+0xa4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001744:	6822      	ldr	r2, [r4, #0]
 8001746:	2080      	movs	r0, #128	; 0x80
 8001748:	0100      	lsls	r0, r0, #4
 800174a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800174c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800174e:	2020      	movs	r0, #32
 8001750:	4302      	orrs	r2, r0
 8001752:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001754:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8001756:	2a00      	cmp	r2, #0
 8001758:	d04a      	beq.n	80017f0 <HAL_UART_IRQHandler+0x140>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800175a:	069b      	lsls	r3, r3, #26
 800175c:	d506      	bpl.n	800176c <HAL_UART_IRQHandler+0xbc>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800175e:	068b      	lsls	r3, r1, #26
 8001760:	d504      	bpl.n	800176c <HAL_UART_IRQHandler+0xbc>
        if (huart->RxISR != NULL)
 8001762:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <HAL_UART_IRQHandler+0xbc>
          huart->RxISR(huart);
 8001768:	0020      	movs	r0, r4
 800176a:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800176c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800176e:	6823      	ldr	r3, [r4, #0]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	065b      	lsls	r3, r3, #25
 8001774:	d402      	bmi.n	800177c <HAL_UART_IRQHandler+0xcc>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001776:	2328      	movs	r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001778:	4213      	tst	r3, r2
 800177a:	d025      	beq.n	80017c8 <HAL_UART_IRQHandler+0x118>
        UART_EndRxTransfer(huart);
 800177c:	0020      	movs	r0, r4
 800177e:	f7ff fdfd 	bl	800137c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001782:	6823      	ldr	r3, [r4, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	0652      	lsls	r2, r2, #25
 8001788:	d51a      	bpl.n	80017c0 <HAL_UART_IRQHandler+0x110>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	2140      	movs	r1, #64	; 0x40
 800178e:	438a      	bics	r2, r1
 8001790:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8001792:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001794:	2b00      	cmp	r3, #0
 8001796:	d00f      	beq.n	80017b8 <HAL_UART_IRQHandler+0x108>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001798:	4a1d      	ldr	r2, [pc, #116]	; (8001810 <HAL_UART_IRQHandler+0x160>)
 800179a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800179c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800179e:	f7ff f909 	bl	80009b4 <HAL_DMA_Abort_IT>
 80017a2:	2800      	cmp	r0, #0
 80017a4:	d024      	beq.n	80017f0 <HAL_UART_IRQHandler+0x140>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80017a6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80017a8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80017aa:	4798      	blx	r3
 80017ac:	e020      	b.n	80017f0 <HAL_UART_IRQHandler+0x140>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80017ae:	075a      	lsls	r2, r3, #29
 80017b0:	d5b8      	bpl.n	8001724 <HAL_UART_IRQHandler+0x74>
 80017b2:	2800      	cmp	r0, #0
 80017b4:	d1af      	bne.n	8001716 <HAL_UART_IRQHandler+0x66>
 80017b6:	e7b5      	b.n	8001724 <HAL_UART_IRQHandler+0x74>
            HAL_UART_ErrorCallback(huart);
 80017b8:	0020      	movs	r0, r4
 80017ba:	f7ff ff77 	bl	80016ac <HAL_UART_ErrorCallback>
 80017be:	e017      	b.n	80017f0 <HAL_UART_IRQHandler+0x140>
          HAL_UART_ErrorCallback(huart);
 80017c0:	0020      	movs	r0, r4
 80017c2:	f7ff ff73 	bl	80016ac <HAL_UART_ErrorCallback>
 80017c6:	e013      	b.n	80017f0 <HAL_UART_IRQHandler+0x140>
        HAL_UART_ErrorCallback(huart);
 80017c8:	0020      	movs	r0, r4
 80017ca:	f7ff ff6f 	bl	80016ac <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	67e3      	str	r3, [r4, #124]	; 0x7c
 80017d2:	e00d      	b.n	80017f0 <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80017d4:	0618      	lsls	r0, r3, #24
 80017d6:	d507      	bpl.n	80017e8 <HAL_UART_IRQHandler+0x138>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80017d8:	0608      	lsls	r0, r1, #24
 80017da:	d505      	bpl.n	80017e8 <HAL_UART_IRQHandler+0x138>
    if (huart->TxISR != NULL)
 80017dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d006      	beq.n	80017f0 <HAL_UART_IRQHandler+0x140>
      huart->TxISR(huart);
 80017e2:	0020      	movs	r0, r4
 80017e4:	4798      	blx	r3
 80017e6:	e003      	b.n	80017f0 <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80017e8:	065b      	lsls	r3, r3, #25
 80017ea:	d501      	bpl.n	80017f0 <HAL_UART_IRQHandler+0x140>
 80017ec:	064b      	lsls	r3, r1, #25
 80017ee:	d400      	bmi.n	80017f2 <HAL_UART_IRQHandler+0x142>
}
 80017f0:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80017f2:	6813      	ldr	r3, [r2, #0]
 80017f4:	2140      	movs	r1, #64	; 0x40
 80017f6:	438b      	bics	r3, r1
 80017f8:	6013      	str	r3, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 80017fa:	2320      	movs	r3, #32
 80017fc:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 8001802:	0020      	movs	r0, r4
 8001804:	f000 fe58 	bl	80024b8 <HAL_UART_TxCpltCallback>
 8001808:	e7f2      	b.n	80017f0 <HAL_UART_IRQHandler+0x140>
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	0000080f 	.word	0x0000080f
 8001810:	08001815 	.word	0x08001815

08001814 <UART_DMAAbortOnError>:
{
 8001814:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8001816:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001818:	2300      	movs	r3, #0
 800181a:	225a      	movs	r2, #90	; 0x5a
 800181c:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 800181e:	3a08      	subs	r2, #8
 8001820:	5283      	strh	r3, [r0, r2]
  HAL_UART_ErrorCallback(huart);
 8001822:	f7ff ff43 	bl	80016ac <HAL_UART_ErrorCallback>
}
 8001826:	bd10      	pop	{r4, pc}

08001828 <UART_SetConfig>:
{
 8001828:	b510      	push	{r4, lr}
 800182a:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800182c:	6801      	ldr	r1, [r0, #0]
 800182e:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001830:	6883      	ldr	r3, [r0, #8]
 8001832:	6900      	ldr	r0, [r0, #16]
 8001834:	4303      	orrs	r3, r0
 8001836:	6960      	ldr	r0, [r4, #20]
 8001838:	4303      	orrs	r3, r0
 800183a:	69e0      	ldr	r0, [r4, #28]
 800183c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800183e:	485e      	ldr	r0, [pc, #376]	; (80019b8 <UART_SetConfig+0x190>)
 8001840:	4002      	ands	r2, r0
 8001842:	4313      	orrs	r3, r2
 8001844:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001846:	6822      	ldr	r2, [r4, #0]
 8001848:	6853      	ldr	r3, [r2, #4]
 800184a:	495c      	ldr	r1, [pc, #368]	; (80019bc <UART_SetConfig+0x194>)
 800184c:	400b      	ands	r3, r1
 800184e:	68e1      	ldr	r1, [r4, #12]
 8001850:	430b      	orrs	r3, r1
 8001852:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001854:	6821      	ldr	r1, [r4, #0]
 8001856:	688a      	ldr	r2, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8001858:	69a3      	ldr	r3, [r4, #24]
 800185a:	6a20      	ldr	r0, [r4, #32]
 800185c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800185e:	4858      	ldr	r0, [pc, #352]	; (80019c0 <UART_SetConfig+0x198>)
 8001860:	4002      	ands	r2, r0
 8001862:	4313      	orrs	r3, r2
 8001864:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001866:	4b57      	ldr	r3, [pc, #348]	; (80019c4 <UART_SetConfig+0x19c>)
 8001868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800186a:	2303      	movs	r3, #3
 800186c:	4013      	ands	r3, r2
 800186e:	2b01      	cmp	r3, #1
 8001870:	d05c      	beq.n	800192c <UART_SetConfig+0x104>
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00b      	beq.n	800188e <UART_SetConfig+0x66>
 8001876:	2b02      	cmp	r3, #2
 8001878:	d100      	bne.n	800187c <UART_SetConfig+0x54>
 800187a:	e072      	b.n	8001962 <UART_SetConfig+0x13a>
 800187c:	2b03      	cmp	r3, #3
 800187e:	d045      	beq.n	800190c <UART_SetConfig+0xe4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001880:	2380      	movs	r3, #128	; 0x80
 8001882:	021b      	lsls	r3, r3, #8
 8001884:	69e2      	ldr	r2, [r4, #28]
 8001886:	429a      	cmp	r2, r3
 8001888:	d039      	beq.n	80018fe <UART_SetConfig+0xd6>
      ret = HAL_ERROR;
 800188a:	2001      	movs	r0, #1
 800188c:	e065      	b.n	800195a <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	021b      	lsls	r3, r3, #8
 8001892:	69e2      	ldr	r2, [r4, #28]
 8001894:	429a      	cmp	r2, r3
 8001896:	d100      	bne.n	800189a <UART_SetConfig+0x72>
 8001898:	e081      	b.n	800199e <UART_SetConfig+0x176>
        pclk = HAL_RCC_GetPCLK1Freq();
 800189a:	f7ff fccb 	bl	8001234 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800189e:	6863      	ldr	r3, [r4, #4]
 80018a0:	085b      	lsrs	r3, r3, #1
 80018a2:	1818      	adds	r0, r3, r0
 80018a4:	6861      	ldr	r1, [r4, #4]
 80018a6:	f7fe fc2f 	bl	8000108 <__udivsi3>
 80018aa:	0400      	lsls	r0, r0, #16
 80018ac:	0c00      	lsrs	r0, r0, #16
        break;
 80018ae:	e04c      	b.n	800194a <UART_SetConfig+0x122>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80018b0:	6863      	ldr	r3, [r4, #4]
 80018b2:	0858      	lsrs	r0, r3, #1
 80018b4:	4b44      	ldr	r3, [pc, #272]	; (80019c8 <UART_SetConfig+0x1a0>)
 80018b6:	469c      	mov	ip, r3
 80018b8:	4460      	add	r0, ip
 80018ba:	6861      	ldr	r1, [r4, #4]
 80018bc:	f7fe fc24 	bl	8000108 <__udivsi3>
 80018c0:	0403      	lsls	r3, r0, #16
 80018c2:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 80018c4:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80018c6:	4941      	ldr	r1, [pc, #260]	; (80019cc <UART_SetConfig+0x1a4>)
 80018c8:	001a      	movs	r2, r3
 80018ca:	3a10      	subs	r2, #16
 80018cc:	428a      	cmp	r2, r1
 80018ce:	d819      	bhi.n	8001904 <UART_SetConfig+0xdc>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80018d0:	220f      	movs	r2, #15
 80018d2:	0019      	movs	r1, r3
 80018d4:	4391      	bics	r1, r2
 80018d6:	000a      	movs	r2, r1
      huart->Instance->BRR = brrtemp;
 80018d8:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80018da:	071b      	lsls	r3, r3, #28
 80018dc:	0f5b      	lsrs	r3, r3, #29
      huart->Instance->BRR = brrtemp;
 80018de:	4313      	orrs	r3, r2
 80018e0:	60cb      	str	r3, [r1, #12]
 80018e2:	e03a      	b.n	800195a <UART_SetConfig+0x132>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80018e4:	6863      	ldr	r3, [r4, #4]
 80018e6:	0858      	lsrs	r0, r3, #1
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	025b      	lsls	r3, r3, #9
 80018ec:	469c      	mov	ip, r3
 80018ee:	4460      	add	r0, ip
 80018f0:	6861      	ldr	r1, [r4, #4]
 80018f2:	f7fe fc09 	bl	8000108 <__udivsi3>
 80018f6:	0403      	lsls	r3, r0, #16
 80018f8:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 80018fa:	2000      	movs	r0, #0
        break;
 80018fc:	e7e3      	b.n	80018c6 <UART_SetConfig+0x9e>
        ret = HAL_ERROR;
 80018fe:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8001900:	2300      	movs	r3, #0
 8001902:	e7e0      	b.n	80018c6 <UART_SetConfig+0x9e>
      ret = HAL_ERROR;
 8001904:	2001      	movs	r0, #1
 8001906:	e028      	b.n	800195a <UART_SetConfig+0x132>
      ret = HAL_ERROR;
 8001908:	2001      	movs	r0, #1
 800190a:	e026      	b.n	800195a <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	69e2      	ldr	r2, [r4, #28]
 8001912:	429a      	cmp	r2, r3
 8001914:	d0cc      	beq.n	80018b0 <UART_SetConfig+0x88>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001916:	6863      	ldr	r3, [r4, #4]
 8001918:	0858      	lsrs	r0, r3, #1
 800191a:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <UART_SetConfig+0x1a8>)
 800191c:	469c      	mov	ip, r3
 800191e:	4460      	add	r0, ip
 8001920:	6861      	ldr	r1, [r4, #4]
 8001922:	f7fe fbf1 	bl	8000108 <__udivsi3>
 8001926:	0400      	lsls	r0, r0, #16
 8001928:	0c00      	lsrs	r0, r0, #16
        break;
 800192a:	e00e      	b.n	800194a <UART_SetConfig+0x122>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800192c:	2380      	movs	r3, #128	; 0x80
 800192e:	021b      	lsls	r3, r3, #8
 8001930:	69e2      	ldr	r2, [r4, #28]
 8001932:	429a      	cmp	r2, r3
 8001934:	d026      	beq.n	8001984 <UART_SetConfig+0x15c>
        pclk = HAL_RCC_GetSysClockFreq();
 8001936:	f7ff fba3 	bl	8001080 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800193a:	6863      	ldr	r3, [r4, #4]
 800193c:	085b      	lsrs	r3, r3, #1
 800193e:	1818      	adds	r0, r3, r0
 8001940:	6861      	ldr	r1, [r4, #4]
 8001942:	f7fe fbe1 	bl	8000108 <__udivsi3>
 8001946:	0400      	lsls	r0, r0, #16
 8001948:	0c00      	lsrs	r0, r0, #16
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800194a:	4a20      	ldr	r2, [pc, #128]	; (80019cc <UART_SetConfig+0x1a4>)
 800194c:	0003      	movs	r3, r0
 800194e:	3b10      	subs	r3, #16
 8001950:	4293      	cmp	r3, r2
 8001952:	d8d9      	bhi.n	8001908 <UART_SetConfig+0xe0>
      huart->Instance->BRR = usartdiv;
 8001954:	6823      	ldr	r3, [r4, #0]
 8001956:	60d8      	str	r0, [r3, #12]
 8001958:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 800195a:	2300      	movs	r3, #0
 800195c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800195e:	6663      	str	r3, [r4, #100]	; 0x64
}
 8001960:	bd10      	pop	{r4, pc}
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001962:	2380      	movs	r3, #128	; 0x80
 8001964:	021b      	lsls	r3, r3, #8
 8001966:	69e2      	ldr	r2, [r4, #28]
 8001968:	429a      	cmp	r2, r3
 800196a:	d0bb      	beq.n	80018e4 <UART_SetConfig+0xbc>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800196c:	6863      	ldr	r3, [r4, #4]
 800196e:	0858      	lsrs	r0, r3, #1
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	021b      	lsls	r3, r3, #8
 8001974:	469c      	mov	ip, r3
 8001976:	4460      	add	r0, ip
 8001978:	6861      	ldr	r1, [r4, #4]
 800197a:	f7fe fbc5 	bl	8000108 <__udivsi3>
 800197e:	0400      	lsls	r0, r0, #16
 8001980:	0c00      	lsrs	r0, r0, #16
        break;
 8001982:	e7e2      	b.n	800194a <UART_SetConfig+0x122>
        pclk = HAL_RCC_GetSysClockFreq();
 8001984:	f7ff fb7c 	bl	8001080 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001988:	0040      	lsls	r0, r0, #1
 800198a:	6863      	ldr	r3, [r4, #4]
 800198c:	085b      	lsrs	r3, r3, #1
 800198e:	18c0      	adds	r0, r0, r3
 8001990:	6861      	ldr	r1, [r4, #4]
 8001992:	f7fe fbb9 	bl	8000108 <__udivsi3>
 8001996:	0403      	lsls	r3, r0, #16
 8001998:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 800199a:	2000      	movs	r0, #0
        break;
 800199c:	e793      	b.n	80018c6 <UART_SetConfig+0x9e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800199e:	f7ff fc49 	bl	8001234 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80019a2:	0040      	lsls	r0, r0, #1
 80019a4:	6863      	ldr	r3, [r4, #4]
 80019a6:	085b      	lsrs	r3, r3, #1
 80019a8:	18c0      	adds	r0, r0, r3
 80019aa:	6861      	ldr	r1, [r4, #4]
 80019ac:	f7fe fbac 	bl	8000108 <__udivsi3>
 80019b0:	0403      	lsls	r3, r0, #16
 80019b2:	0c1b      	lsrs	r3, r3, #16
  HAL_StatusTypeDef ret               = HAL_OK;
 80019b4:	2000      	movs	r0, #0
        break;
 80019b6:	e786      	b.n	80018c6 <UART_SetConfig+0x9e>
 80019b8:	ffff69f3 	.word	0xffff69f3
 80019bc:	ffffcfff 	.word	0xffffcfff
 80019c0:	fffff4ff 	.word	0xfffff4ff
 80019c4:	40021000 	.word	0x40021000
 80019c8:	00f42400 	.word	0x00f42400
 80019cc:	0000ffef 	.word	0x0000ffef
 80019d0:	007a1200 	.word	0x007a1200

080019d4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80019d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80019d6:	07db      	lsls	r3, r3, #31
 80019d8:	d506      	bpl.n	80019e8 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80019da:	6802      	ldr	r2, [r0, #0]
 80019dc:	6853      	ldr	r3, [r2, #4]
 80019de:	492c      	ldr	r1, [pc, #176]	; (8001a90 <UART_AdvFeatureConfig+0xbc>)
 80019e0:	400b      	ands	r3, r1
 80019e2:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80019e4:	430b      	orrs	r3, r1
 80019e6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80019e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80019ea:	079b      	lsls	r3, r3, #30
 80019ec:	d506      	bpl.n	80019fc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80019ee:	6802      	ldr	r2, [r0, #0]
 80019f0:	6853      	ldr	r3, [r2, #4]
 80019f2:	4928      	ldr	r1, [pc, #160]	; (8001a94 <UART_AdvFeatureConfig+0xc0>)
 80019f4:	400b      	ands	r3, r1
 80019f6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80019f8:	430b      	orrs	r3, r1
 80019fa:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80019fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80019fe:	075b      	lsls	r3, r3, #29
 8001a00:	d506      	bpl.n	8001a10 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001a02:	6802      	ldr	r2, [r0, #0]
 8001a04:	6853      	ldr	r3, [r2, #4]
 8001a06:	4924      	ldr	r1, [pc, #144]	; (8001a98 <UART_AdvFeatureConfig+0xc4>)
 8001a08:	400b      	ands	r3, r1
 8001a0a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001a0c:	430b      	orrs	r3, r1
 8001a0e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001a10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a12:	071b      	lsls	r3, r3, #28
 8001a14:	d506      	bpl.n	8001a24 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001a16:	6802      	ldr	r2, [r0, #0]
 8001a18:	6853      	ldr	r3, [r2, #4]
 8001a1a:	4920      	ldr	r1, [pc, #128]	; (8001a9c <UART_AdvFeatureConfig+0xc8>)
 8001a1c:	400b      	ands	r3, r1
 8001a1e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001a20:	430b      	orrs	r3, r1
 8001a22:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001a24:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a26:	06db      	lsls	r3, r3, #27
 8001a28:	d506      	bpl.n	8001a38 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001a2a:	6802      	ldr	r2, [r0, #0]
 8001a2c:	6893      	ldr	r3, [r2, #8]
 8001a2e:	491c      	ldr	r1, [pc, #112]	; (8001aa0 <UART_AdvFeatureConfig+0xcc>)
 8001a30:	400b      	ands	r3, r1
 8001a32:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001a34:	430b      	orrs	r3, r1
 8001a36:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001a38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a3a:	069b      	lsls	r3, r3, #26
 8001a3c:	d506      	bpl.n	8001a4c <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001a3e:	6802      	ldr	r2, [r0, #0]
 8001a40:	6893      	ldr	r3, [r2, #8]
 8001a42:	4918      	ldr	r1, [pc, #96]	; (8001aa4 <UART_AdvFeatureConfig+0xd0>)
 8001a44:	400b      	ands	r3, r1
 8001a46:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001a48:	430b      	orrs	r3, r1
 8001a4a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001a4c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a4e:	065b      	lsls	r3, r3, #25
 8001a50:	d50b      	bpl.n	8001a6a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001a52:	6802      	ldr	r2, [r0, #0]
 8001a54:	6853      	ldr	r3, [r2, #4]
 8001a56:	4914      	ldr	r1, [pc, #80]	; (8001aa8 <UART_AdvFeatureConfig+0xd4>)
 8001a58:	400b      	ands	r3, r1
 8001a5a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001a5c:	430b      	orrs	r3, r1
 8001a5e:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001a60:	2380      	movs	r3, #128	; 0x80
 8001a62:	035b      	lsls	r3, r3, #13
 8001a64:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d00a      	beq.n	8001a80 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001a6a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a6c:	061b      	lsls	r3, r3, #24
 8001a6e:	d506      	bpl.n	8001a7e <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001a70:	6802      	ldr	r2, [r0, #0]
 8001a72:	6853      	ldr	r3, [r2, #4]
 8001a74:	490d      	ldr	r1, [pc, #52]	; (8001aac <UART_AdvFeatureConfig+0xd8>)
 8001a76:	400b      	ands	r3, r1
 8001a78:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001a7a:	430b      	orrs	r3, r1
 8001a7c:	6053      	str	r3, [r2, #4]
}
 8001a7e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001a80:	6802      	ldr	r2, [r0, #0]
 8001a82:	6853      	ldr	r3, [r2, #4]
 8001a84:	490a      	ldr	r1, [pc, #40]	; (8001ab0 <UART_AdvFeatureConfig+0xdc>)
 8001a86:	400b      	ands	r3, r1
 8001a88:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001a8a:	430b      	orrs	r3, r1
 8001a8c:	6053      	str	r3, [r2, #4]
 8001a8e:	e7ec      	b.n	8001a6a <UART_AdvFeatureConfig+0x96>
 8001a90:	fffdffff 	.word	0xfffdffff
 8001a94:	fffeffff 	.word	0xfffeffff
 8001a98:	fffbffff 	.word	0xfffbffff
 8001a9c:	ffff7fff 	.word	0xffff7fff
 8001aa0:	ffffefff 	.word	0xffffefff
 8001aa4:	ffffdfff 	.word	0xffffdfff
 8001aa8:	ffefffff 	.word	0xffefffff
 8001aac:	fff7ffff 	.word	0xfff7ffff
 8001ab0:	ff9fffff 	.word	0xff9fffff

08001ab4 <UART_WaitOnFlagUntilTimeout>:
{
 8001ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ab6:	46d6      	mov	lr, sl
 8001ab8:	464f      	mov	r7, r9
 8001aba:	4646      	mov	r6, r8
 8001abc:	b5c0      	push	{r6, r7, lr}
 8001abe:	0007      	movs	r7, r0
 8001ac0:	000c      	movs	r4, r1
 8001ac2:	0016      	movs	r6, r2
 8001ac4:	4698      	mov	r8, r3
 8001ac6:	9d08      	ldr	r5, [sp, #32]
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001ac8:	2304      	movs	r3, #4
 8001aca:	4699      	mov	r9, r3
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	011b      	lsls	r3, r3, #4
 8001ad0:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	69d3      	ldr	r3, [r2, #28]
 8001ad6:	4023      	ands	r3, r4
 8001ad8:	1b1b      	subs	r3, r3, r4
 8001ada:	4259      	negs	r1, r3
 8001adc:	414b      	adcs	r3, r1
 8001ade:	42b3      	cmp	r3, r6
 8001ae0:	d13c      	bne.n	8001b5c <UART_WaitOnFlagUntilTimeout+0xa8>
    if (Timeout != HAL_MAX_DELAY)
 8001ae2:	1c6b      	adds	r3, r5, #1
 8001ae4:	d0f6      	beq.n	8001ad4 <UART_WaitOnFlagUntilTimeout+0x20>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ae6:	f7fe fbdd 	bl	80002a4 <HAL_GetTick>
 8001aea:	4643      	mov	r3, r8
 8001aec:	1ac0      	subs	r0, r0, r3
 8001aee:	42a8      	cmp	r0, r5
 8001af0:	d821      	bhi.n	8001b36 <UART_WaitOnFlagUntilTimeout+0x82>
 8001af2:	2d00      	cmp	r5, #0
 8001af4:	d01f      	beq.n	8001b36 <UART_WaitOnFlagUntilTimeout+0x82>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	4649      	mov	r1, r9
 8001afc:	4211      	tst	r1, r2
 8001afe:	d0e8      	beq.n	8001ad2 <UART_WaitOnFlagUntilTimeout+0x1e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001b00:	69da      	ldr	r2, [r3, #28]
 8001b02:	4651      	mov	r1, sl
 8001b04:	420a      	tst	r2, r1
 8001b06:	d0e4      	beq.n	8001ad2 <UART_WaitOnFlagUntilTimeout+0x1e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001b08:	2280      	movs	r2, #128	; 0x80
 8001b0a:	0112      	lsls	r2, r2, #4
 8001b0c:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	6813      	ldr	r3, [r2, #0]
 8001b12:	4915      	ldr	r1, [pc, #84]	; (8001b68 <UART_WaitOnFlagUntilTimeout+0xb4>)
 8001b14:	400b      	ands	r3, r1
 8001b16:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	6893      	ldr	r3, [r2, #8]
 8001b1c:	31a3      	adds	r1, #163	; 0xa3
 8001b1e:	31ff      	adds	r1, #255	; 0xff
 8001b20:	438b      	bics	r3, r1
 8001b22:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 8001b24:	2320      	movs	r3, #32
 8001b26:	677b      	str	r3, [r7, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001b28:	67bb      	str	r3, [r7, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001b2a:	67fb      	str	r3, [r7, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8001b2c:	3350      	adds	r3, #80	; 0x50
 8001b2e:	2200      	movs	r2, #0
 8001b30:	54fa      	strb	r2, [r7, r3]
          return HAL_TIMEOUT;
 8001b32:	2003      	movs	r0, #3
 8001b34:	e013      	b.n	8001b5e <UART_WaitOnFlagUntilTimeout+0xaa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	6813      	ldr	r3, [r2, #0]
 8001b3a:	490b      	ldr	r1, [pc, #44]	; (8001b68 <UART_WaitOnFlagUntilTimeout+0xb4>)
 8001b3c:	400b      	ands	r3, r1
 8001b3e:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	6893      	ldr	r3, [r2, #8]
 8001b44:	31a3      	adds	r1, #163	; 0xa3
 8001b46:	31ff      	adds	r1, #255	; 0xff
 8001b48:	438b      	bics	r3, r1
 8001b4a:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001b4c:	2320      	movs	r3, #32
 8001b4e:	677b      	str	r3, [r7, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001b50:	67bb      	str	r3, [r7, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8001b52:	3350      	adds	r3, #80	; 0x50
 8001b54:	2200      	movs	r2, #0
 8001b56:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8001b58:	2003      	movs	r0, #3
 8001b5a:	e000      	b.n	8001b5e <UART_WaitOnFlagUntilTimeout+0xaa>
  return HAL_OK;
 8001b5c:	2000      	movs	r0, #0
}
 8001b5e:	bc1c      	pop	{r2, r3, r4}
 8001b60:	4690      	mov	r8, r2
 8001b62:	4699      	mov	r9, r3
 8001b64:	46a2      	mov	sl, r4
 8001b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b68:	fffffe5f 	.word	0xfffffe5f

08001b6c <UART_CheckIdleState>:
{
 8001b6c:	b530      	push	{r4, r5, lr}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b72:	2300      	movs	r3, #0
 8001b74:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001b76:	f7fe fb95 	bl	80002a4 <HAL_GetTick>
 8001b7a:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001b7c:	6823      	ldr	r3, [r4, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	071b      	lsls	r3, r3, #28
 8001b82:	d40c      	bmi.n	8001b9e <UART_CheckIdleState+0x32>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001b84:	6823      	ldr	r3, [r4, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	075b      	lsls	r3, r3, #29
 8001b8a:	d415      	bmi.n	8001bb8 <UART_CheckIdleState+0x4c>
  huart->gState = HAL_UART_STATE_READY;
 8001b8c:	2320      	movs	r3, #32
 8001b8e:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001b90:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001b92:	3350      	adds	r3, #80	; 0x50
 8001b94:	2200      	movs	r2, #0
 8001b96:	54e2      	strb	r2, [r4, r3]
  return HAL_OK;
 8001b98:	2000      	movs	r0, #0
}
 8001b9a:	b003      	add	sp, #12
 8001b9c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001b9e:	2180      	movs	r1, #128	; 0x80
 8001ba0:	4b0c      	ldr	r3, [pc, #48]	; (8001bd4 <UART_CheckIdleState+0x68>)
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	0003      	movs	r3, r0
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	0389      	lsls	r1, r1, #14
 8001baa:	0020      	movs	r0, r4
 8001bac:	f7ff ff82 	bl	8001ab4 <UART_WaitOnFlagUntilTimeout>
 8001bb0:	2800      	cmp	r0, #0
 8001bb2:	d0e7      	beq.n	8001b84 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8001bb4:	2003      	movs	r0, #3
 8001bb6:	e7f0      	b.n	8001b9a <UART_CheckIdleState+0x2e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001bb8:	2180      	movs	r1, #128	; 0x80
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <UART_CheckIdleState+0x68>)
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	002b      	movs	r3, r5
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	03c9      	lsls	r1, r1, #15
 8001bc4:	0020      	movs	r0, r4
 8001bc6:	f7ff ff75 	bl	8001ab4 <UART_WaitOnFlagUntilTimeout>
 8001bca:	2800      	cmp	r0, #0
 8001bcc:	d0de      	beq.n	8001b8c <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 8001bce:	2003      	movs	r0, #3
 8001bd0:	e7e3      	b.n	8001b9a <UART_CheckIdleState+0x2e>
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	01ffffff 	.word	0x01ffffff

08001bd8 <HAL_UART_Init>:
{
 8001bd8:	b510      	push	{r4, lr}
 8001bda:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8001bdc:	d02e      	beq.n	8001c3c <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8001bde:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d021      	beq.n	8001c28 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8001be4:	2324      	movs	r3, #36	; 0x24
 8001be6:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001be8:	6822      	ldr	r2, [r4, #0]
 8001bea:	6813      	ldr	r3, [r2, #0]
 8001bec:	2101      	movs	r1, #1
 8001bee:	438b      	bics	r3, r1
 8001bf0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001bf2:	0020      	movs	r0, r4
 8001bf4:	f7ff fe18 	bl	8001828 <UART_SetConfig>
 8001bf8:	2801      	cmp	r0, #1
 8001bfa:	d014      	beq.n	8001c26 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001bfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d118      	bne.n	8001c34 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001c02:	6822      	ldr	r2, [r4, #0]
 8001c04:	6853      	ldr	r3, [r2, #4]
 8001c06:	490e      	ldr	r1, [pc, #56]	; (8001c40 <HAL_UART_Init+0x68>)
 8001c08:	400b      	ands	r3, r1
 8001c0a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001c0c:	6822      	ldr	r2, [r4, #0]
 8001c0e:	6893      	ldr	r3, [r2, #8]
 8001c10:	2108      	movs	r1, #8
 8001c12:	438b      	bics	r3, r1
 8001c14:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001c16:	6822      	ldr	r2, [r4, #0]
 8001c18:	6813      	ldr	r3, [r2, #0]
 8001c1a:	3907      	subs	r1, #7
 8001c1c:	430b      	orrs	r3, r1
 8001c1e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8001c20:	0020      	movs	r0, r4
 8001c22:	f7ff ffa3 	bl	8001b6c <UART_CheckIdleState>
}
 8001c26:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001c28:	3370      	adds	r3, #112	; 0x70
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8001c2e:	f000 fb7f 	bl	8002330 <HAL_UART_MspInit>
 8001c32:	e7d7      	b.n	8001be4 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8001c34:	0020      	movs	r0, r4
 8001c36:	f7ff fecd 	bl	80019d4 <UART_AdvFeatureConfig>
 8001c3a:	e7e2      	b.n	8001c02 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8001c3c:	2001      	movs	r0, #1
 8001c3e:	e7f2      	b.n	8001c26 <HAL_UART_Init+0x4e>
 8001c40:	fffff7ff 	.word	0xfffff7ff

08001c44 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c46:	46c6      	mov	lr, r8
 8001c48:	b500      	push	{lr}
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001c4a:	680b      	ldr	r3, [r1, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d045      	beq.n	8001cdc <LL_GPIO_Init+0x98>
  pinpos = 0;
 8001c50:	2200      	movs	r2, #0
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001c52:	2401      	movs	r4, #1
 8001c54:	46a0      	mov	r8, r4
 8001c56:	e00d      	b.n	8001c74 <LL_GPIO_Init+0x30>
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 8001c58:	68c6      	ldr	r6, [r0, #12]
 8001c5a:	690f      	ldr	r7, [r1, #16]
 8001c5c:	436f      	muls	r7, r5
 8001c5e:	4034      	ands	r4, r6
 8001c60:	433c      	orrs	r4, r7
 8001c62:	60c4      	str	r4, [r0, #12]
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001c64:	684c      	ldr	r4, [r1, #4]
 8001c66:	2c02      	cmp	r4, #2
 8001c68:	d020      	beq.n	8001cac <LL_GPIO_Init+0x68>
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
    }
    pinpos++;
 8001c6a:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001c6c:	680b      	ldr	r3, [r1, #0]
 8001c6e:	001c      	movs	r4, r3
 8001c70:	40d4      	lsrs	r4, r2
 8001c72:	d033      	beq.n	8001cdc <LL_GPIO_Init+0x98>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001c74:	4644      	mov	r4, r8
 8001c76:	4094      	lsls	r4, r2
 8001c78:	4023      	ands	r3, r4
    if (currentpin != 0x00u)
 8001c7a:	d0f6      	beq.n	8001c6a <LL_GPIO_Init+0x26>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8001c7c:	6804      	ldr	r4, [r0, #0]
 8001c7e:	46a4      	mov	ip, r4
 8001c80:	001d      	movs	r5, r3
 8001c82:	435d      	muls	r5, r3
 8001c84:	006c      	lsls	r4, r5, #1
 8001c86:	1964      	adds	r4, r4, r5
 8001c88:	43e4      	mvns	r4, r4
 8001c8a:	684f      	ldr	r7, [r1, #4]
 8001c8c:	436f      	muls	r7, r5
 8001c8e:	4666      	mov	r6, ip
 8001c90:	4026      	ands	r6, r4
 8001c92:	4337      	orrs	r7, r6
 8001c94:	6007      	str	r7, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001c96:	684e      	ldr	r6, [r1, #4]
 8001c98:	1e77      	subs	r7, r6, #1
 8001c9a:	2f01      	cmp	r7, #1
 8001c9c:	d8dc      	bhi.n	8001c58 <LL_GPIO_Init+0x14>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8001c9e:	6886      	ldr	r6, [r0, #8]
 8001ca0:	688f      	ldr	r7, [r1, #8]
 8001ca2:	436f      	muls	r7, r5
 8001ca4:	4026      	ands	r6, r4
 8001ca6:	4337      	orrs	r7, r6
 8001ca8:	6087      	str	r7, [r0, #8]
 8001caa:	e7d5      	b.n	8001c58 <LL_GPIO_Init+0x14>
        if (currentpin < LL_GPIO_PIN_8)
 8001cac:	2bff      	cmp	r3, #255	; 0xff
 8001cae:	d809      	bhi.n	8001cc4 <LL_GPIO_Init+0x80>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001cb0:	6a03      	ldr	r3, [r0, #32]
 8001cb2:	436d      	muls	r5, r5
 8001cb4:	012c      	lsls	r4, r5, #4
 8001cb6:	1b64      	subs	r4, r4, r5
 8001cb8:	43a3      	bics	r3, r4
 8001cba:	694c      	ldr	r4, [r1, #20]
 8001cbc:	4365      	muls	r5, r4
 8001cbe:	431d      	orrs	r5, r3
 8001cc0:	6205      	str	r5, [r0, #32]
 8001cc2:	e7d2      	b.n	8001c6a <LL_GPIO_Init+0x26>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001cc4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8001cc6:	0a1b      	lsrs	r3, r3, #8
 8001cc8:	435b      	muls	r3, r3
 8001cca:	435b      	muls	r3, r3
 8001ccc:	011d      	lsls	r5, r3, #4
 8001cce:	1aed      	subs	r5, r5, r3
 8001cd0:	43ac      	bics	r4, r5
 8001cd2:	694d      	ldr	r5, [r1, #20]
 8001cd4:	436b      	muls	r3, r5
 8001cd6:	4323      	orrs	r3, r4
 8001cd8:	6243      	str	r3, [r0, #36]	; 0x24
 8001cda:	e7c6      	b.n	8001c6a <LL_GPIO_Init+0x26>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001cdc:	684a      	ldr	r2, [r1, #4]
 8001cde:	3a01      	subs	r2, #1
 8001ce0:	2a01      	cmp	r2, #1
 8001ce2:	d903      	bls.n	8001cec <LL_GPIO_Init+0xa8>
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	bc04      	pop	{r2}
 8001ce8:	4690      	mov	r8, r2
 8001cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001cec:	6842      	ldr	r2, [r0, #4]
 8001cee:	439a      	bics	r2, r3
 8001cf0:	68c9      	ldr	r1, [r1, #12]
 8001cf2:	434b      	muls	r3, r1
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	6043      	str	r3, [r0, #4]
 8001cf8:	e7f4      	b.n	8001ce4 <LL_GPIO_Init+0xa0>
	...

08001cfc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8001cfc:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <LL_mDelay+0x30>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001d04:	9b01      	ldr	r3, [sp, #4]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
  {
    Delay++;
 8001d06:	1c43      	adds	r3, r0, #1
 8001d08:	1e5a      	subs	r2, r3, #1
 8001d0a:	4193      	sbcs	r3, r2
 8001d0c:	18c0      	adds	r0, r0, r3
  }

  while (Delay)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001d0e:	4907      	ldr	r1, [pc, #28]	; (8001d2c <LL_mDelay+0x30>)
 8001d10:	2280      	movs	r2, #128	; 0x80
 8001d12:	0252      	lsls	r2, r2, #9
  while (Delay)
 8001d14:	2800      	cmp	r0, #0
 8001d16:	d007      	beq.n	8001d28 <LL_mDelay+0x2c>
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001d18:	680b      	ldr	r3, [r1, #0]
 8001d1a:	4213      	tst	r3, r2
 8001d1c:	d102      	bne.n	8001d24 <LL_mDelay+0x28>
 8001d1e:	680b      	ldr	r3, [r1, #0]
 8001d20:	4213      	tst	r3, r2
 8001d22:	d0fc      	beq.n	8001d1e <LL_mDelay+0x22>
    {
      Delay--;
 8001d24:	3801      	subs	r0, #1
 8001d26:	e7f5      	b.n	8001d14 <LL_mDelay+0x18>
    }
  }
}
 8001d28:	b002      	add	sp, #8
 8001d2a:	4770      	bx	lr
 8001d2c:	e000e010 	.word	0xe000e010

08001d30 <ADC_Check_And_Send>:

extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc;

void ADC_Check_And_Send(void)
{
 8001d30:	b510      	push	{r4, lr}
 8001d32:	b082      	sub	sp, #8
	uint32_t batt_adc = 0;
	uint32_t usb_char_adc = 0;
	uint32_t ResultVoltage = 0;
	uint32_t batt_vol = 0;
	uint8_t tx_data[6] = {0};
 8001d34:	2204      	movs	r2, #4
 8001d36:	2100      	movs	r1, #0
 8001d38:	466b      	mov	r3, sp
 8001d3a:	1c98      	adds	r0, r3, #2
 8001d3c:	f000 fc1e 	bl	800257c <memset>

	tx_data[0] = 0x5a;
 8001d40:	235a      	movs	r3, #90	; 0x5a
 8001d42:	466a      	mov	r2, sp
 8001d44:	7013      	strb	r3, [r2, #0]
	tx_data[1] = 0xa5;
 8001d46:	334b      	adds	r3, #75	; 0x4b
 8001d48:	7053      	strb	r3, [r2, #1]
	tx_data[2] = 2; // msg length
 8001d4a:	3ba3      	subs	r3, #163	; 0xa3
 8001d4c:	7093      	strb	r3, [r2, #2]

	if(Get_CurrentPowState() != OFF)
 8001d4e:	f000 f87b 	bl	8001e48 <Get_CurrentPowState>
 8001d52:	2800      	cmp	r0, #0
 8001d54:	d101      	bne.n	8001d5a <ADC_Check_And_Send+0x2a>
//		batt_adc = HAL_ADC_GetValue(&hadc);
//
//		HAL_ADC_Stop(&hadc);

	}
}
 8001d56:	b002      	add	sp, #8
 8001d58:	bd10      	pop	{r4, pc}
		HAL_ADC_Start(&hadc);
 8001d5a:	4c2f      	ldr	r4, [pc, #188]	; (8001e18 <ADC_Check_And_Send+0xe8>)
 8001d5c:	0020      	movs	r0, r4
 8001d5e:	f7fe fc17 	bl	8000590 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 10);
 8001d62:	210a      	movs	r1, #10
 8001d64:	0020      	movs	r0, r4
 8001d66:	f7fe fc65 	bl	8000634 <HAL_ADC_PollForConversion>
		usb_char_adc = HAL_ADC_GetValue(&hadc);
 8001d6a:	0020      	movs	r0, r4
 8001d6c:	f7fe fcc2 	bl	80006f4 <HAL_ADC_GetValue>
		if(USB_CHARGE_THRESHOLD_VAL <= usb_char_adc)
 8001d70:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <ADC_Check_And_Send+0xec>)
 8001d72:	4298      	cmp	r0, r3
 8001d74:	d93a      	bls.n	8001dec <ADC_Check_And_Send+0xbc>
			tx_data[3] = 0; // data_msb
 8001d76:	2300      	movs	r3, #0
 8001d78:	466a      	mov	r2, sp
 8001d7a:	70d3      	strb	r3, [r2, #3]
			tx_data[4] = IS_CHARGING; // data_lsb
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	7113      	strb	r3, [r2, #4]
			tx_data[5] = crc8_calculate(tx_data, UART_MSG_LENGTH - 1);
 8001d80:	2105      	movs	r1, #5
 8001d82:	4668      	mov	r0, sp
 8001d84:	f000 f852 	bl	8001e2c <crc8_calculate>
 8001d88:	466b      	mov	r3, sp
 8001d8a:	7158      	strb	r0, [r3, #5]
			HAL_UART_Transmit_IT(&huart1, (uint8_t *)tx_data, UART_MSG_LENGTH);
 8001d8c:	2206      	movs	r2, #6
 8001d8e:	4669      	mov	r1, sp
 8001d90:	4823      	ldr	r0, [pc, #140]	; (8001e20 <ADC_Check_And_Send+0xf0>)
 8001d92:	f7ff fb49 	bl	8001428 <HAL_UART_Transmit_IT>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8001d96:	2390      	movs	r3, #144	; 0x90
 8001d98:	05db      	lsls	r3, r3, #23
 8001d9a:	2220      	movs	r2, #32
 8001d9c:	629a      	str	r2, [r3, #40]	; 0x28
		HAL_ADC_PollForConversion(&hadc, 10);
 8001d9e:	4c1e      	ldr	r4, [pc, #120]	; (8001e18 <ADC_Check_And_Send+0xe8>)
 8001da0:	210a      	movs	r1, #10
 8001da2:	0020      	movs	r0, r4
 8001da4:	f7fe fc46 	bl	8000634 <HAL_ADC_PollForConversion>
		batt_adc = HAL_ADC_GetValue(&hadc);
 8001da8:	0020      	movs	r0, r4
 8001daa:	f7fe fca3 	bl	80006f4 <HAL_ADC_GetValue>
		ResultVoltage = (batt_adc * 3300) >> 12;
 8001dae:	4a1d      	ldr	r2, [pc, #116]	; (8001e24 <ADC_Check_And_Send+0xf4>)
 8001db0:	4342      	muls	r2, r0
 8001db2:	0b12      	lsrs	r2, r2, #12
		batt_vol = ResultVoltage *673 / 523; /*15k+52.3=67.3*/
 8001db4:	0050      	lsls	r0, r2, #1
 8001db6:	1880      	adds	r0, r0, r2
 8001db8:	00c3      	lsls	r3, r0, #3
 8001dba:	1a18      	subs	r0, r3, r0
 8001dbc:	0140      	lsls	r0, r0, #5
 8001dbe:	1880      	adds	r0, r0, r2
 8001dc0:	4919      	ldr	r1, [pc, #100]	; (8001e28 <ADC_Check_And_Send+0xf8>)
 8001dc2:	f7fe f9a1 	bl	8000108 <__udivsi3>
		tx_data[3] = (uint8_t)((batt_vol >> 8) &0xFF); // data_msb
 8001dc6:	0a03      	lsrs	r3, r0, #8
 8001dc8:	466a      	mov	r2, sp
 8001dca:	70d3      	strb	r3, [r2, #3]
		tx_data[4] = (uint8_t)(batt_vol & 0xFF); // data_lsb
 8001dcc:	7110      	strb	r0, [r2, #4]
		tx_data[5] = crc8_calculate(tx_data, UART_MSG_LENGTH - 1);
 8001dce:	2105      	movs	r1, #5
 8001dd0:	4668      	mov	r0, sp
 8001dd2:	f000 f82b 	bl	8001e2c <crc8_calculate>
 8001dd6:	466b      	mov	r3, sp
 8001dd8:	7158      	strb	r0, [r3, #5]
		HAL_UART_Transmit_IT(&huart1, (uint8_t *)tx_data, UART_MSG_LENGTH);
 8001dda:	2206      	movs	r2, #6
 8001ddc:	4669      	mov	r1, sp
 8001dde:	4810      	ldr	r0, [pc, #64]	; (8001e20 <ADC_Check_And_Send+0xf0>)
 8001de0:	f7ff fb22 	bl	8001428 <HAL_UART_Transmit_IT>
		HAL_ADC_Stop(&hadc);
 8001de4:	0020      	movs	r0, r4
 8001de6:	f7fe fc03 	bl	80005f0 <HAL_ADC_Stop>
}
 8001dea:	e7b4      	b.n	8001d56 <ADC_Check_And_Send+0x26>
			tx_data[3] = 0; // data_msb
 8001dec:	2300      	movs	r3, #0
 8001dee:	466a      	mov	r2, sp
 8001df0:	70d3      	strb	r3, [r2, #3]
			tx_data[4] = IS_NOT_CHARGING; // data_lsb
 8001df2:	3305      	adds	r3, #5
 8001df4:	7113      	strb	r3, [r2, #4]
			tx_data[5] = crc8_calculate(tx_data, UART_MSG_LENGTH - 1);
 8001df6:	2105      	movs	r1, #5
 8001df8:	4668      	mov	r0, sp
 8001dfa:	f000 f817 	bl	8001e2c <crc8_calculate>
 8001dfe:	466b      	mov	r3, sp
 8001e00:	7158      	strb	r0, [r3, #5]
			HAL_UART_Transmit_IT(&huart1, (uint8_t *)tx_data, UART_MSG_LENGTH);
 8001e02:	2206      	movs	r2, #6
 8001e04:	4669      	mov	r1, sp
 8001e06:	4806      	ldr	r0, [pc, #24]	; (8001e20 <ADC_Check_And_Send+0xf0>)
 8001e08:	f7ff fb0e 	bl	8001428 <HAL_UART_Transmit_IT>
 8001e0c:	2390      	movs	r3, #144	; 0x90
 8001e0e:	05db      	lsls	r3, r3, #23
 8001e10:	2240      	movs	r2, #64	; 0x40
 8001e12:	629a      	str	r2, [r3, #40]	; 0x28
 8001e14:	e7c3      	b.n	8001d9e <ADC_Check_And_Send+0x6e>
 8001e16:	46c0      	nop			; (mov r8, r8)
 8001e18:	200000cc 	.word	0x200000cc
 8001e1c:	00000bb7 	.word	0x00000bb7
 8001e20:	2000004c 	.word	0x2000004c
 8001e24:	00000ce4 	.word	0x00000ce4
 8001e28:	0000020b 	.word	0x0000020b

08001e2c <crc8_calculate>:
uint8_t crc8_calculate(uint8_t *psrc, uint8_t len)
{
  uint8_t crc8_val = 0;
  uint32_t  id;

  for(id = 0; id < len; id++)
 8001e2c:	2900      	cmp	r1, #0
 8001e2e:	d009      	beq.n	8001e44 <crc8_calculate+0x18>
 8001e30:	0003      	movs	r3, r0
 8001e32:	1841      	adds	r1, r0, r1
  uint8_t crc8_val = 0;
 8001e34:	2000      	movs	r0, #0
  {
	  crc8_val += psrc[id];
 8001e36:	781a      	ldrb	r2, [r3, #0]
 8001e38:	1880      	adds	r0, r0, r2
 8001e3a:	b2c0      	uxtb	r0, r0
 8001e3c:	3301      	adds	r3, #1
  for(id = 0; id < len; id++)
 8001e3e:	428b      	cmp	r3, r1
 8001e40:	d1f9      	bne.n	8001e36 <crc8_calculate+0xa>
  }

  return crc8_val;
}
 8001e42:	4770      	bx	lr
  uint8_t crc8_val = 0;
 8001e44:	2000      	movs	r0, #0
 8001e46:	e7fc      	b.n	8001e42 <crc8_calculate+0x16>

08001e48 <Get_CurrentPowState>:
	return (LL_GPIO_IsInputPinSet(GPIOx, key) == TRUE) ? POWKEY_DEACTIVE :POWKEY_ACTIVE;
}

uint8_t Get_CurrentPowState(void)
{
	return current_powerState;
 8001e48:	4b01      	ldr	r3, [pc, #4]	; (8001e50 <Get_CurrentPowState+0x8>)
 8001e4a:	7818      	ldrb	r0, [r3, #0]
}
 8001e4c:	4770      	bx	lr
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	2000003e 	.word	0x2000003e

08001e54 <Set_CurrentPowState>:

void Set_CurrentPowState(uint32_t state)
{
	 current_powerState = state;
 8001e54:	4b01      	ldr	r3, [pc, #4]	; (8001e5c <Set_CurrentPowState+0x8>)
 8001e56:	7018      	strb	r0, [r3, #0]
}
 8001e58:	4770      	bx	lr
 8001e5a:	46c0      	nop			; (mov r8, r8)
 8001e5c:	2000003e 	.word	0x2000003e

08001e60 <scan_key>:



void scan_key(void)
{
 8001e60:	b570      	push	{r4, r5, r6, lr}
	static uint8_t debounce_time = 1; //10ms

	  if((flag_key & KEY_FIRST_ON) == FALSE)
 8001e62:	4b5b      	ldr	r3, [pc, #364]	; (8001fd0 <scan_key+0x170>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	07da      	lsls	r2, r3, #31
 8001e68:	d50a      	bpl.n	8001e80 <scan_key+0x20>
		  {
			  flag_key |= KEY_FIRST_ON;
			  flag_key |= KEY_DEBOUNCE_START;
		  }
	  }
	  else if(flag_key & KEY_DEBOUNCE_START)
 8001e6a:	079a      	lsls	r2, r3, #30
 8001e6c:	d51c      	bpl.n	8001ea8 <scan_key+0x48>
	  {
		  debounce_time--;
 8001e6e:	4a59      	ldr	r2, [pc, #356]	; (8001fd4 <scan_key+0x174>)
 8001e70:	7812      	ldrb	r2, [r2, #0]
 8001e72:	3a01      	subs	r2, #1
 8001e74:	b2d2      	uxtb	r2, r2
		  if(debounce_time == 0)
 8001e76:	2a00      	cmp	r2, #0
 8001e78:	d00c      	beq.n	8001e94 <scan_key+0x34>
		  debounce_time--;
 8001e7a:	4b56      	ldr	r3, [pc, #344]	; (8001fd4 <scan_key+0x174>)
 8001e7c:	701a      	strb	r2, [r3, #0]
 8001e7e:	e015      	b.n	8001eac <scan_key+0x4c>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001e80:	2290      	movs	r2, #144	; 0x90
 8001e82:	05d2      	lsls	r2, r2, #23
 8001e84:	6912      	ldr	r2, [r2, #16]
		  if(POWKEY_ACTIVE == Get_Switch_Key_Val(switch_input_GPIO_Port, switch_input_Pin))
 8001e86:	06d2      	lsls	r2, r2, #27
 8001e88:	d410      	bmi.n	8001eac <scan_key+0x4c>
			  flag_key |= KEY_DEBOUNCE_START;
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	4a50      	ldr	r2, [pc, #320]	; (8001fd0 <scan_key+0x170>)
 8001e90:	7013      	strb	r3, [r2, #0]
 8001e92:	e00b      	b.n	8001eac <scan_key+0x4c>
		  {
			  debounce_time = 1;
 8001e94:	4a4f      	ldr	r2, [pc, #316]	; (8001fd4 <scan_key+0x174>)
 8001e96:	2101      	movs	r1, #1
 8001e98:	7011      	strb	r1, [r2, #0]
			  flag_key &= ~KEY_DEBOUNCE_START;
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	4393      	bics	r3, r2
			  flag_key |= KEY_DEBOUNCE_END;
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	4a4b      	ldr	r2, [pc, #300]	; (8001fd0 <scan_key+0x170>)
 8001ea4:	7013      	strb	r3, [r2, #0]
 8001ea6:	e001      	b.n	8001eac <scan_key+0x4c>
		  }
	  }
	  else if(flag_key & KEY_DEBOUNCE_END)
 8001ea8:	075a      	lsls	r2, r3, #29
 8001eaa:	d418      	bmi.n	8001ede <scan_key+0x7e>
	  else
	  {

	  }

	if((flag_key & KEY_RELEASED) != 0)
 8001eac:	4b48      	ldr	r3, [pc, #288]	; (8001fd0 <scan_key+0x170>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	071b      	lsls	r3, r3, #28
 8001eb2:	d567      	bpl.n	8001f84 <scan_key+0x124>
	{
		  if(0 < u32KeyTimerCnt && u32KeyTimerCnt <= SHORT_PRESS_DURATION
 8001eb4:	4b48      	ldr	r3, [pc, #288]	; (8001fd8 <scan_key+0x178>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	1e5a      	subs	r2, r3, #1
 8001eba:	2a63      	cmp	r2, #99	; 0x63
 8001ebc:	d83b      	bhi.n	8001f36 <scan_key+0xd6>
				  && ON == current_powerState)
 8001ebe:	4a47      	ldr	r2, [pc, #284]	; (8001fdc <scan_key+0x17c>)
 8001ec0:	7812      	ldrb	r2, [r2, #0]
 8001ec2:	2a03      	cmp	r2, #3
 8001ec4:	d01c      	beq.n	8001f00 <scan_key+0xa0>
			  Uart_TxData[4] = SHORT_PRESS; // data_lsb
			  Uart_TxData[5] = crc8_calculate(Uart_TxData, UART_MSG_LENGTH - 1);
			  HAL_UART_Transmit_IT(&huart1, Uart_TxData, UART_MSG_LENGTH);
			  HAL_UART_Receive_IT(&huart1, Uart_RxData, UART_MSG_LENGTH);
		  }
		  else if(SHORT_PRESS_DURATION < u32KeyTimerCnt && u32KeyTimerCnt <= MIDDLE_PRESS_DURATION)
 8001ec6:	3b65      	subs	r3, #101	; 0x65
 8001ec8:	222c      	movs	r2, #44	; 0x2c
 8001eca:	32ff      	adds	r2, #255	; 0xff
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d800      	bhi.n	8001ed2 <scan_key+0x72>
 8001ed0:	e06d      	b.n	8001fae <scan_key+0x14e>
				  Set_CurrentPowState(ON);
			  }
		  }
		  else
		  {
			  u32KeyTimerCnt = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	4a40      	ldr	r2, [pc, #256]	; (8001fd8 <scan_key+0x178>)
 8001ed6:	6013      	str	r3, [r2, #0]
			  flag_key = 0;
 8001ed8:	4a3d      	ldr	r2, [pc, #244]	; (8001fd0 <scan_key+0x170>)
 8001eda:	7013      	strb	r3, [r2, #0]
 8001edc:	e066      	b.n	8001fac <scan_key+0x14c>
 8001ede:	2290      	movs	r2, #144	; 0x90
 8001ee0:	05d2      	lsls	r2, r2, #23
 8001ee2:	6912      	ldr	r2, [r2, #16]
		  if(POWKEY_ACTIVE == Get_Switch_Key_Val(switch_input_GPIO_Port, switch_input_Pin))
 8001ee4:	06d2      	lsls	r2, r2, #27
 8001ee6:	d404      	bmi.n	8001ef2 <scan_key+0x92>
			  u32KeyTimerCnt++;
 8001ee8:	4a3b      	ldr	r2, [pc, #236]	; (8001fd8 <scan_key+0x178>)
 8001eea:	6813      	ldr	r3, [r2, #0]
 8001eec:	3301      	adds	r3, #1
 8001eee:	6013      	str	r3, [r2, #0]
 8001ef0:	e7dc      	b.n	8001eac <scan_key+0x4c>
			  flag_key &= ~KEY_DEBOUNCE_END;
 8001ef2:	2204      	movs	r2, #4
 8001ef4:	4393      	bics	r3, r2
			  flag_key |= KEY_RELEASED;
 8001ef6:	2208      	movs	r2, #8
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	4a35      	ldr	r2, [pc, #212]	; (8001fd0 <scan_key+0x170>)
 8001efc:	7013      	strb	r3, [r2, #0]
 8001efe:	e7d5      	b.n	8001eac <scan_key+0x4c>
			  flag_key = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	4a33      	ldr	r2, [pc, #204]	; (8001fd0 <scan_key+0x170>)
 8001f04:	7013      	strb	r3, [r2, #0]
			  u32KeyTimerCnt = 0;
 8001f06:	4a34      	ldr	r2, [pc, #208]	; (8001fd8 <scan_key+0x178>)
 8001f08:	6013      	str	r3, [r2, #0]
			  Uart_TxData[2] = 1; //key msg
 8001f0a:	4c35      	ldr	r4, [pc, #212]	; (8001fe0 <scan_key+0x180>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	70a2      	strb	r2, [r4, #2]
        Uart_TxData[3] = 0; // data_msb
 8001f10:	70e3      	strb	r3, [r4, #3]
			  Uart_TxData[4] = SHORT_PRESS; // data_lsb
 8001f12:	7122      	strb	r2, [r4, #4]
			  Uart_TxData[5] = crc8_calculate(Uart_TxData, UART_MSG_LENGTH - 1);
 8001f14:	2105      	movs	r1, #5
 8001f16:	0020      	movs	r0, r4
 8001f18:	f7ff ff88 	bl	8001e2c <crc8_calculate>
 8001f1c:	7160      	strb	r0, [r4, #5]
			  HAL_UART_Transmit_IT(&huart1, Uart_TxData, UART_MSG_LENGTH);
 8001f1e:	4d31      	ldr	r5, [pc, #196]	; (8001fe4 <scan_key+0x184>)
 8001f20:	2206      	movs	r2, #6
 8001f22:	0021      	movs	r1, r4
 8001f24:	0028      	movs	r0, r5
 8001f26:	f7ff fa7f 	bl	8001428 <HAL_UART_Transmit_IT>
			  HAL_UART_Receive_IT(&huart1, Uart_RxData, UART_MSG_LENGTH);
 8001f2a:	2206      	movs	r2, #6
 8001f2c:	492e      	ldr	r1, [pc, #184]	; (8001fe8 <scan_key+0x188>)
 8001f2e:	0028      	movs	r0, r5
 8001f30:	f7ff fad2 	bl	80014d8 <HAL_UART_Receive_IT>
 8001f34:	e026      	b.n	8001f84 <scan_key+0x124>
		  else if(SHORT_PRESS_DURATION < u32KeyTimerCnt && u32KeyTimerCnt <= MIDDLE_PRESS_DURATION)
 8001f36:	3b65      	subs	r3, #101	; 0x65
 8001f38:	222c      	movs	r2, #44	; 0x2c
 8001f3a:	32ff      	adds	r2, #255	; 0xff
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d8c8      	bhi.n	8001ed2 <scan_key+0x72>
			  u32KeyTimerCnt = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	4a25      	ldr	r2, [pc, #148]	; (8001fd8 <scan_key+0x178>)
 8001f44:	6013      	str	r3, [r2, #0]
			  flag_key = 0;
 8001f46:	4a22      	ldr	r2, [pc, #136]	; (8001fd0 <scan_key+0x170>)
 8001f48:	7013      	strb	r3, [r2, #0]
			  if(ON == current_powerState)
 8001f4a:	4b24      	ldr	r3, [pc, #144]	; (8001fdc <scan_key+0x17c>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d132      	bne.n	8001fb8 <scan_key+0x158>
				  Uart_TxData[2] = 1; //key msg
 8001f52:	4c23      	ldr	r4, [pc, #140]	; (8001fe0 <scan_key+0x180>)
 8001f54:	2501      	movs	r5, #1
 8001f56:	70a5      	strb	r5, [r4, #2]
				  Uart_TxData[3] = 0; // data_msb
 8001f58:	2300      	movs	r3, #0
 8001f5a:	70e3      	strb	r3, [r4, #3]
				  Uart_TxData[4] = MIDDLE_PRESS; // data_lsb
 8001f5c:	3302      	adds	r3, #2
 8001f5e:	7123      	strb	r3, [r4, #4]
				  Uart_TxData[5] = crc8_calculate(Uart_TxData, UART_MSG_LENGTH - 1);
 8001f60:	2105      	movs	r1, #5
 8001f62:	0020      	movs	r0, r4
 8001f64:	f7ff ff62 	bl	8001e2c <crc8_calculate>
 8001f68:	7160      	strb	r0, [r4, #5]
				  HAL_UART_Transmit_IT(&huart1, Uart_TxData, UART_MSG_LENGTH);
 8001f6a:	4e1e      	ldr	r6, [pc, #120]	; (8001fe4 <scan_key+0x184>)
 8001f6c:	2206      	movs	r2, #6
 8001f6e:	0021      	movs	r1, r4
 8001f70:	0030      	movs	r0, r6
 8001f72:	f7ff fa59 	bl	8001428 <HAL_UART_Transmit_IT>
				  HAL_UART_Receive_IT(&huart1, Uart_RxData, UART_MSG_LENGTH);
 8001f76:	2206      	movs	r2, #6
 8001f78:	491b      	ldr	r1, [pc, #108]	; (8001fe8 <scan_key+0x188>)
 8001f7a:	0030      	movs	r0, r6
 8001f7c:	f7ff faac 	bl	80014d8 <HAL_UART_Receive_IT>
	 current_powerState = state;
 8001f80:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <scan_key+0x17c>)
 8001f82:	701d      	strb	r5, [r3, #0]
		  }
	 }
	  if(u32KeyTimerCnt >= LONG_PRESS_DURATION)
 8001f84:	4b19      	ldr	r3, [pc, #100]	; (8001fec <scan_key+0x18c>)
 8001f86:	4a14      	ldr	r2, [pc, #80]	; (8001fd8 <scan_key+0x178>)
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d90e      	bls.n	8001fac <scan_key+0x14c>
  WRITE_REG(GPIOx->BRR, PinMask);
 8001f8e:	2390      	movs	r3, #144	; 0x90
 8001f90:	05db      	lsls	r3, r3, #23
 8001f92:	2220      	movs	r2, #32
 8001f94:	629a      	str	r2, [r3, #40]	; 0x28
 8001f96:	3220      	adds	r2, #32
 8001f98:	629a      	str	r2, [r3, #40]	; 0x28
 8001f9a:	3240      	adds	r2, #64	; 0x40
 8001f9c:	629a      	str	r2, [r3, #40]	; 0x28
	 current_powerState = state;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	4a0e      	ldr	r2, [pc, #56]	; (8001fdc <scan_key+0x17c>)
 8001fa2:	7013      	strb	r3, [r2, #0]
		  /**/
		  LL_GPIO_ResetOutputPin(IN2SYS_EN_GPIO_Port, IN2SYS_EN_Pin);

		  Set_CurrentPowState(OFF);

		  u32KeyTimerCnt = 0;
 8001fa4:	4a0c      	ldr	r2, [pc, #48]	; (8001fd8 <scan_key+0x178>)
 8001fa6:	6013      	str	r3, [r2, #0]
		  flag_key = 0;
 8001fa8:	4a09      	ldr	r2, [pc, #36]	; (8001fd0 <scan_key+0x170>)
 8001faa:	7013      	strb	r3, [r2, #0]

	  }
}
 8001fac:	bd70      	pop	{r4, r5, r6, pc}
			  u32KeyTimerCnt = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	4a09      	ldr	r2, [pc, #36]	; (8001fd8 <scan_key+0x178>)
 8001fb2:	6013      	str	r3, [r2, #0]
			  flag_key = 0;
 8001fb4:	4a06      	ldr	r2, [pc, #24]	; (8001fd0 <scan_key+0x170>)
 8001fb6:	7013      	strb	r3, [r2, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001fb8:	2390      	movs	r3, #144	; 0x90
 8001fba:	05db      	lsls	r3, r3, #23
 8001fbc:	2220      	movs	r2, #32
 8001fbe:	619a      	str	r2, [r3, #24]
 8001fc0:	3220      	adds	r2, #32
 8001fc2:	619a      	str	r2, [r3, #24]
 8001fc4:	3240      	adds	r2, #64	; 0x40
 8001fc6:	619a      	str	r2, [r3, #24]
	 current_powerState = state;
 8001fc8:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <scan_key+0x17c>)
 8001fca:	3a7d      	subs	r2, #125	; 0x7d
 8001fcc:	701a      	strb	r2, [r3, #0]
 8001fce:	e7ed      	b.n	8001fac <scan_key+0x14c>
 8001fd0:	2000003f 	.word	0x2000003f
 8001fd4:	20000008 	.word	0x20000008
 8001fd8:	20000048 	.word	0x20000048
 8001fdc:	2000003e 	.word	0x2000003e
 8001fe0:	20000038 	.word	0x20000038
 8001fe4:	2000004c 	.word	0x2000004c
 8001fe8:	2000002c 	.word	0x2000002c
 8001fec:	00000257 	.word	0x00000257

08001ff0 <time_10ms_proc>:

void time_10ms_proc(void)
{
 8001ff0:	b510      	push	{r4, lr}
	scan_key();
 8001ff2:	f7ff ff35 	bl	8001e60 <scan_key>
	  /*After pi excute power off sequence, it sends out ready off state to mcu,which will set
	   *  current_powerState to READY_OFF*/
	  if(current_powerState == READY_OFF)
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <time_10ms_proc+0x28>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d000      	beq.n	8002000 <time_10ms_proc+0x10>
		  /**/
		  LL_GPIO_ResetOutputPin(IN2SYS_EN_GPIO_Port, IN2SYS_EN_Pin);

		  Set_CurrentPowState(OFF);
	  }
}
 8001ffe:	bd10      	pop	{r4, pc}
  WRITE_REG(GPIOx->BRR, PinMask);
 8002000:	2390      	movs	r3, #144	; 0x90
 8002002:	05db      	lsls	r3, r3, #23
 8002004:	2220      	movs	r2, #32
 8002006:	629a      	str	r2, [r3, #40]	; 0x28
 8002008:	3220      	adds	r2, #32
 800200a:	629a      	str	r2, [r3, #40]	; 0x28
 800200c:	3240      	adds	r2, #64	; 0x40
 800200e:	629a      	str	r2, [r3, #40]	; 0x28
	 current_powerState = state;
 8002010:	4b01      	ldr	r3, [pc, #4]	; (8002018 <time_10ms_proc+0x28>)
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
}
 8002016:	e7f2      	b.n	8001ffe <time_10ms_proc+0xe>
 8002018:	2000003e 	.word	0x2000003e

0800201c <time_1000ms_proc>:

void time_1000ms_proc(void)
{
 800201c:	b510      	push	{r4, lr}
	ADC_Check_And_Send();
 800201e:	f7ff fe87 	bl	8001d30 <ADC_Check_And_Send>
}
 8002022:	bd10      	pop	{r4, pc}

08002024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002024:	b530      	push	{r4, r5, lr}
 8002026:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002028:	2218      	movs	r2, #24
 800202a:	2100      	movs	r1, #0
 800202c:	a80a      	add	r0, sp, #40	; 0x28
 800202e:	f000 faa5 	bl	800257c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002032:	2210      	movs	r2, #16
 8002034:	2100      	movs	r1, #0
 8002036:	a804      	add	r0, sp, #16
 8002038:	f000 faa0 	bl	800257c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800203c:	2210      	movs	r2, #16
 800203e:	2100      	movs	r1, #0
 8002040:	4668      	mov	r0, sp
 8002042:	f000 fa9b 	bl	800257c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8002046:	2311      	movs	r3, #17
 8002048:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800204a:	2501      	movs	r5, #1
 800204c:	9509      	str	r5, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800204e:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8002050:	3b01      	subs	r3, #1
 8002052:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002054:	2402      	movs	r4, #2
 8002056:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	025b      	lsls	r3, r3, #9
 800205c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800205e:	23e0      	movs	r3, #224	; 0xe0
 8002060:	035b      	lsls	r3, r3, #13
 8002062:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV5;
 8002064:	2304      	movs	r3, #4
 8002066:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002068:	a808      	add	r0, sp, #32
 800206a:	f7fe fda3 	bl	8000bb4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800206e:	2307      	movs	r3, #7
 8002070:	9304      	str	r3, [sp, #16]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002072:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002074:	2400      	movs	r4, #0
 8002076:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002078:	9407      	str	r4, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800207a:	2101      	movs	r1, #1
 800207c:	a804      	add	r0, sp, #16
 800207e:	f7ff f83d 	bl	80010fc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002082:	9500      	str	r5, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002084:	9402      	str	r4, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002086:	4668      	mov	r0, sp
 8002088:	f7ff f8e4 	bl	8001254 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800208c:	b015      	add	sp, #84	; 0x54
 800208e:	bd30      	pop	{r4, r5, pc}

08002090 <main>:
{
 8002090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002092:	46de      	mov	lr, fp
 8002094:	4657      	mov	r7, sl
 8002096:	464e      	mov	r6, r9
 8002098:	4645      	mov	r5, r8
 800209a:	b5e0      	push	{r5, r6, r7, lr}
 800209c:	b08b      	sub	sp, #44	; 0x2c
	Uart_TxData[0] = 0x5a;
 800209e:	4b68      	ldr	r3, [pc, #416]	; (8002240 <main+0x1b0>)
 80020a0:	225a      	movs	r2, #90	; 0x5a
 80020a2:	701a      	strb	r2, [r3, #0]
	Uart_TxData[1] = 0xa5;  //ipc header
 80020a4:	324b      	adds	r2, #75	; 0x4b
 80020a6:	705a      	strb	r2, [r3, #1]
  HAL_Init();
 80020a8:	f7fe f8e0 	bl	800026c <HAL_Init>
  SystemClock_Config();
 80020ac:	f7ff ffba 	bl	8002024 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	2218      	movs	r2, #24
 80020b2:	2100      	movs	r1, #0
 80020b4:	a804      	add	r0, sp, #16
 80020b6:	f000 fa61 	bl	800257c <memset>
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80020ba:	4b62      	ldr	r3, [pc, #392]	; (8002244 <main+0x1b4>)
 80020bc:	6959      	ldr	r1, [r3, #20]
 80020be:	2080      	movs	r0, #128	; 0x80
 80020c0:	03c0      	lsls	r0, r0, #15
 80020c2:	4301      	orrs	r1, r0
 80020c4:	6159      	str	r1, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80020c6:	695a      	ldr	r2, [r3, #20]
 80020c8:	4002      	ands	r2, r0
 80020ca:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80020cc:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80020ce:	6959      	ldr	r1, [r3, #20]
 80020d0:	2080      	movs	r0, #128	; 0x80
 80020d2:	0280      	lsls	r0, r0, #10
 80020d4:	4301      	orrs	r1, r0
 80020d6:	6159      	str	r1, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80020d8:	695a      	ldr	r2, [r3, #20]
 80020da:	4002      	ands	r2, r0
 80020dc:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80020de:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHBENR, Periphs);
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	2180      	movs	r1, #128	; 0x80
 80020e4:	02c9      	lsls	r1, r1, #11
 80020e6:	430a      	orrs	r2, r1
 80020e8:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80020ea:	695b      	ldr	r3, [r3, #20]
 80020ec:	400b      	ands	r3, r1
 80020ee:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80020f0:	9b03      	ldr	r3, [sp, #12]
 80020f2:	2590      	movs	r5, #144	; 0x90
 80020f4:	05ed      	lsls	r5, r5, #23
 80020f6:	2601      	movs	r6, #1
 80020f8:	62ae      	str	r6, [r5, #40]	; 0x28
 80020fa:	2302      	movs	r3, #2
 80020fc:	469b      	mov	fp, r3
 80020fe:	62ab      	str	r3, [r5, #40]	; 0x28
 8002100:	3306      	adds	r3, #6
 8002102:	62ab      	str	r3, [r5, #40]	; 0x28
 8002104:	2220      	movs	r2, #32
 8002106:	4690      	mov	r8, r2
 8002108:	62aa      	str	r2, [r5, #40]	; 0x28
 800210a:	3220      	adds	r2, #32
 800210c:	4692      	mov	sl, r2
 800210e:	62aa      	str	r2, [r5, #40]	; 0x28
 8002110:	3240      	adds	r2, #64	; 0x40
 8002112:	4691      	mov	r9, r2
 8002114:	62aa      	str	r2, [r5, #40]	; 0x28

  /**/
  LL_GPIO_ResetOutputPin(IN2SYS_EN_GPIO_Port, IN2SYS_EN_Pin);

  /**/
  GPIO_InitStruct.Pin = MCU_REV1_Pin;
 8002116:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002118:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800211a:	2703      	movs	r7, #3
 800211c:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(MCU_REV1_GPIO_Port, &GPIO_InitStruct);
 800211e:	a904      	add	r1, sp, #16
 8002120:	0028      	movs	r0, r5
 8002122:	f7ff fd8f 	bl	8001c44 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MCU_REV2_Pin;
 8002126:	465a      	mov	r2, fp
 8002128:	9204      	str	r2, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800212a:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800212c:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800212e:	2400      	movs	r4, #0
 8002130:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002132:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(MCU_REV2_GPIO_Port, &GPIO_InitStruct);
 8002134:	a904      	add	r1, sp, #16
 8002136:	0028      	movs	r0, r5
 8002138:	f7ff fd84 	bl	8001c44 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MCU_IND_Pin;
 800213c:	2308      	movs	r3, #8
 800213e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002140:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002142:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002144:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002146:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(MCU_IND_GPIO_Port, &GPIO_InitStruct);
 8002148:	a904      	add	r1, sp, #16
 800214a:	0028      	movs	r0, r5
 800214c:	f7ff fd7a 	bl	8001c44 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = switch_input_Pin;
 8002150:	2310      	movs	r3, #16
 8002152:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8002154:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002156:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(switch_input_GPIO_Port, &GPIO_InitStruct);
 8002158:	a904      	add	r1, sp, #16
 800215a:	0028      	movs	r0, r5
 800215c:	f7ff fd72 	bl	8001c44 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BOOST_EN_Pin;
 8002160:	4643      	mov	r3, r8
 8002162:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002164:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002166:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002168:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800216a:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(BOOST_EN_GPIO_Port, &GPIO_InitStruct);
 800216c:	a904      	add	r1, sp, #16
 800216e:	0028      	movs	r0, r5
 8002170:	f7ff fd68 	bl	8001c44 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CHARGE_EN_Pin;
 8002174:	4653      	mov	r3, sl
 8002176:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002178:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800217a:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800217c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800217e:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(CHARGE_EN_GPIO_Port, &GPIO_InitStruct);
 8002180:	a904      	add	r1, sp, #16
 8002182:	0028      	movs	r0, r5
 8002184:	f7ff fd5e 	bl	8001c44 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IN2SYS_EN_Pin;
 8002188:	464b      	mov	r3, r9
 800218a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800218c:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800218e:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002190:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002192:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(IN2SYS_EN_GPIO_Port, &GPIO_InitStruct);
 8002194:	a904      	add	r1, sp, #16
 8002196:	0028      	movs	r0, r5
 8002198:	f7ff fd54 	bl	8001c44 <LL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 800219c:	220c      	movs	r2, #12
 800219e:	2100      	movs	r1, #0
 80021a0:	a804      	add	r0, sp, #16
 80021a2:	f000 f9eb 	bl	800257c <memset>
  hadc.Instance = ADC1;
 80021a6:	4f28      	ldr	r7, [pc, #160]	; (8002248 <main+0x1b8>)
 80021a8:	4b28      	ldr	r3, [pc, #160]	; (800224c <main+0x1bc>)
 80021aa:	603b      	str	r3, [r7, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80021ac:	607c      	str	r4, [r7, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80021ae:	60bc      	str	r4, [r7, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021b0:	60fc      	str	r4, [r7, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80021b2:	613e      	str	r6, [r7, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021b4:	2304      	movs	r3, #4
 80021b6:	617b      	str	r3, [r7, #20]
  hadc.Init.LowPowerAutoWait = ENABLE;
 80021b8:	763e      	strb	r6, [r7, #24]
  hadc.Init.LowPowerAutoPowerOff = ENABLE;
 80021ba:	767e      	strb	r6, [r7, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80021bc:	76be      	strb	r6, [r7, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80021be:	76fc      	strb	r4, [r7, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021c0:	23c2      	movs	r3, #194	; 0xc2
 80021c2:	33ff      	adds	r3, #255	; 0xff
 80021c4:	61fb      	str	r3, [r7, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021c6:	623c      	str	r4, [r7, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80021c8:	3b9e      	subs	r3, #158	; 0x9e
 80021ca:	3bff      	subs	r3, #255	; 0xff
 80021cc:	54fc      	strb	r4, [r7, r3]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80021ce:	62bc      	str	r4, [r7, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80021d0:	0038      	movs	r0, r7
 80021d2:	f7fe f92b 	bl	800042c <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_2;
 80021d6:	465b      	mov	r3, fp
 80021d8:	9304      	str	r3, [sp, #16]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	015b      	lsls	r3, r3, #5
 80021de:	9305      	str	r3, [sp, #20]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80021e0:	2307      	movs	r3, #7
 80021e2:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80021e4:	a904      	add	r1, sp, #16
 80021e6:	0038      	movs	r0, r7
 80021e8:	f7fe faf8 	bl	80007dc <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_9;
 80021ec:	2309      	movs	r3, #9
 80021ee:	9304      	str	r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80021f0:	a904      	add	r1, sp, #16
 80021f2:	0038      	movs	r0, r7
 80021f4:	f7fe faf2 	bl	80007dc <HAL_ADC_ConfigChannel>
  huart1.Instance = USART1;
 80021f8:	4815      	ldr	r0, [pc, #84]	; (8002250 <main+0x1c0>)
 80021fa:	4b16      	ldr	r3, [pc, #88]	; (8002254 <main+0x1c4>)
 80021fc:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80021fe:	23e1      	movs	r3, #225	; 0xe1
 8002200:	025b      	lsls	r3, r3, #9
 8002202:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002204:	6084      	str	r4, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002206:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002208:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800220a:	230c      	movs	r3, #12
 800220c:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800220e:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	021b      	lsls	r3, r3, #8
 8002214:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002216:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8002218:	4643      	mov	r3, r8
 800221a:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 800221c:	2380      	movs	r3, #128	; 0x80
 800221e:	019b      	lsls	r3, r3, #6
 8002220:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002222:	f7ff fcd9 	bl	8001bd8 <HAL_UART_Init>
 8002226:	4643      	mov	r3, r8
 8002228:	62ab      	str	r3, [r5, #40]	; 0x28
 800222a:	4653      	mov	r3, sl
 800222c:	62ab      	str	r3, [r5, #40]	; 0x28
 800222e:	464b      	mov	r3, r9
 8002230:	62ab      	str	r3, [r5, #40]	; 0x28
	  time_proc();
 8002232:	f000 f8f7 	bl	8002424 <time_proc>
	  LL_mDelay(1);
 8002236:	2001      	movs	r0, #1
 8002238:	f7ff fd60 	bl	8001cfc <LL_mDelay>
 800223c:	e7f9      	b.n	8002232 <main+0x1a2>
 800223e:	46c0      	nop			; (mov r8, r8)
 8002240:	20000038 	.word	0x20000038
 8002244:	40021000 	.word	0x40021000
 8002248:	200000cc 	.word	0x200000cc
 800224c:	40012400 	.word	0x40012400
 8002250:	2000004c 	.word	0x2000004c
 8002254:	40013800 	.word	0x40013800

08002258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002258:	b500      	push	{lr}
 800225a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225c:	4b0d      	ldr	r3, [pc, #52]	; (8002294 <HAL_MspInit+0x3c>)
 800225e:	6999      	ldr	r1, [r3, #24]
 8002260:	2201      	movs	r2, #1
 8002262:	4311      	orrs	r1, r2
 8002264:	6199      	str	r1, [r3, #24]
 8002266:	6999      	ldr	r1, [r3, #24]
 8002268:	400a      	ands	r2, r1
 800226a:	9200      	str	r2, [sp, #0]
 800226c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800226e:	69da      	ldr	r2, [r3, #28]
 8002270:	2180      	movs	r1, #128	; 0x80
 8002272:	0549      	lsls	r1, r1, #21
 8002274:	430a      	orrs	r2, r1
 8002276:	61da      	str	r2, [r3, #28]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	400b      	ands	r3, r1
 800227c:	9301      	str	r3, [sp, #4]
 800227e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002280:	2200      	movs	r2, #0
 8002282:	2100      	movs	r1, #0
 8002284:	2004      	movs	r0, #4
 8002286:	f7fe fb3b 	bl	8000900 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800228a:	2004      	movs	r0, #4
 800228c:	f7fe fb6a 	bl	8000964 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002290:	b003      	add	sp, #12
 8002292:	bd00      	pop	{pc}
 8002294:	40021000 	.word	0x40021000

08002298 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002298:	b510      	push	{r4, lr}
 800229a:	b088      	sub	sp, #32
 800229c:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229e:	2214      	movs	r2, #20
 80022a0:	2100      	movs	r1, #0
 80022a2:	a803      	add	r0, sp, #12
 80022a4:	f000 f96a 	bl	800257c <memset>
  if(hadc->Instance==ADC1)
 80022a8:	4b1e      	ldr	r3, [pc, #120]	; (8002324 <HAL_ADC_MspInit+0x8c>)
 80022aa:	6822      	ldr	r2, [r4, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d001      	beq.n	80022b4 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022b0:	b008      	add	sp, #32
 80022b2:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022b4:	4b1c      	ldr	r3, [pc, #112]	; (8002328 <HAL_ADC_MspInit+0x90>)
 80022b6:	6999      	ldr	r1, [r3, #24]
 80022b8:	2080      	movs	r0, #128	; 0x80
 80022ba:	0080      	lsls	r0, r0, #2
 80022bc:	4301      	orrs	r1, r0
 80022be:	6199      	str	r1, [r3, #24]
 80022c0:	699a      	ldr	r2, [r3, #24]
 80022c2:	4002      	ands	r2, r0
 80022c4:	9200      	str	r2, [sp, #0]
 80022c6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c8:	6959      	ldr	r1, [r3, #20]
 80022ca:	2080      	movs	r0, #128	; 0x80
 80022cc:	0280      	lsls	r0, r0, #10
 80022ce:	4301      	orrs	r1, r0
 80022d0:	6159      	str	r1, [r3, #20]
 80022d2:	695a      	ldr	r2, [r3, #20]
 80022d4:	4002      	ands	r2, r0
 80022d6:	9201      	str	r2, [sp, #4]
 80022d8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022da:	695a      	ldr	r2, [r3, #20]
 80022dc:	2180      	movs	r1, #128	; 0x80
 80022de:	02c9      	lsls	r1, r1, #11
 80022e0:	430a      	orrs	r2, r1
 80022e2:	615a      	str	r2, [r3, #20]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	400b      	ands	r3, r1
 80022e8:	9302      	str	r3, [sp, #8]
 80022ea:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022ec:	2304      	movs	r3, #4
 80022ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022f0:	2403      	movs	r4, #3
 80022f2:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022f4:	2090      	movs	r0, #144	; 0x90
 80022f6:	a903      	add	r1, sp, #12
 80022f8:	05c0      	lsls	r0, r0, #23
 80022fa:	f7fe fb81 	bl	8000a00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80022fe:	2302      	movs	r3, #2
 8002300:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002302:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002308:	a903      	add	r1, sp, #12
 800230a:	4808      	ldr	r0, [pc, #32]	; (800232c <HAL_ADC_MspInit+0x94>)
 800230c:	f7fe fb78 	bl	8000a00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8002310:	2200      	movs	r2, #0
 8002312:	2100      	movs	r1, #0
 8002314:	200c      	movs	r0, #12
 8002316:	f7fe faf3 	bl	8000900 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800231a:	200c      	movs	r0, #12
 800231c:	f7fe fb22 	bl	8000964 <HAL_NVIC_EnableIRQ>
}
 8002320:	e7c6      	b.n	80022b0 <HAL_ADC_MspInit+0x18>
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	40012400 	.word	0x40012400
 8002328:	40021000 	.word	0x40021000
 800232c:	48000400 	.word	0x48000400

08002330 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002330:	b510      	push	{r4, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002336:	2214      	movs	r2, #20
 8002338:	2100      	movs	r1, #0
 800233a:	a803      	add	r0, sp, #12
 800233c:	f000 f91e 	bl	800257c <memset>
  if(huart->Instance==USART1)
 8002340:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <HAL_UART_MspInit+0x70>)
 8002342:	6822      	ldr	r2, [r4, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d001      	beq.n	800234c <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002348:	b008      	add	sp, #32
 800234a:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 800234c:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <HAL_UART_MspInit+0x74>)
 800234e:	6999      	ldr	r1, [r3, #24]
 8002350:	2080      	movs	r0, #128	; 0x80
 8002352:	01c0      	lsls	r0, r0, #7
 8002354:	4301      	orrs	r1, r0
 8002356:	6199      	str	r1, [r3, #24]
 8002358:	699a      	ldr	r2, [r3, #24]
 800235a:	4002      	ands	r2, r0
 800235c:	9201      	str	r2, [sp, #4]
 800235e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002360:	695a      	ldr	r2, [r3, #20]
 8002362:	2180      	movs	r1, #128	; 0x80
 8002364:	0289      	lsls	r1, r1, #10
 8002366:	430a      	orrs	r2, r1
 8002368:	615a      	str	r2, [r3, #20]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	400b      	ands	r3, r1
 800236e:	9302      	str	r3, [sp, #8]
 8002370:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002372:	23c0      	movs	r3, #192	; 0xc0
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002378:	2302      	movs	r3, #2
 800237a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800237c:	3301      	adds	r3, #1
 800237e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002380:	3b02      	subs	r3, #2
 8002382:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002384:	2090      	movs	r0, #144	; 0x90
 8002386:	a903      	add	r1, sp, #12
 8002388:	05c0      	lsls	r0, r0, #23
 800238a:	f7fe fb39 	bl	8000a00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800238e:	2200      	movs	r2, #0
 8002390:	2100      	movs	r1, #0
 8002392:	201b      	movs	r0, #27
 8002394:	f7fe fab4 	bl	8000900 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002398:	201b      	movs	r0, #27
 800239a:	f7fe fae3 	bl	8000964 <HAL_NVIC_EnableIRQ>
}
 800239e:	e7d3      	b.n	8002348 <HAL_UART_MspInit+0x18>
 80023a0:	40013800 	.word	0x40013800
 80023a4:	40021000 	.word	0x40021000

080023a8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023a8:	4770      	bx	lr

080023aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023aa:	e7fe      	b.n	80023aa <HardFault_Handler>

080023ac <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80023ac:	4770      	bx	lr

080023ae <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023ae:	4770      	bx	lr

080023b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023b0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static uint8_t flag_10ms = 10; //1ms*10
	static uint8_t flag_1000ms = 100;  //100*10ms

	flag_10ms--;
 80023b2:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <SysTick_Handler+0x44>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b2db      	uxtb	r3, r3
	if(flag_10ms == 0)
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d115      	bne.n	80023ea <SysTick_Handler+0x3a>
	{
		flag_10ms = 10;
 80023be:	4b0d      	ldr	r3, [pc, #52]	; (80023f4 <SysTick_Handler+0x44>)
 80023c0:	220a      	movs	r2, #10
 80023c2:	701a      	strb	r2, [r3, #0]
		flag_1000ms--;
 80023c4:	4a0c      	ldr	r2, [pc, #48]	; (80023f8 <SysTick_Handler+0x48>)
 80023c6:	7813      	ldrb	r3, [r2, #0]
 80023c8:	3b01      	subs	r3, #1
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	7013      	strb	r3, [r2, #0]
		flag_time |= FLAG_1OMS;
 80023ce:	480b      	ldr	r0, [pc, #44]	; (80023fc <SysTick_Handler+0x4c>)
 80023d0:	6801      	ldr	r1, [r0, #0]
 80023d2:	2201      	movs	r2, #1
 80023d4:	430a      	orrs	r2, r1
 80023d6:	6002      	str	r2, [r0, #0]
		if(flag_1000ms == 0)
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d108      	bne.n	80023ee <SysTick_Handler+0x3e>
		{
			flag_1000ms = 100;
 80023dc:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <SysTick_Handler+0x48>)
 80023de:	2264      	movs	r2, #100	; 0x64
 80023e0:	701a      	strb	r2, [r3, #0]
			flag_time |= FLAG_1000MS;
 80023e2:	2303      	movs	r3, #3
 80023e4:	4319      	orrs	r1, r3
 80023e6:	6001      	str	r1, [r0, #0]
 80023e8:	e001      	b.n	80023ee <SysTick_Handler+0x3e>
	flag_10ms--;
 80023ea:	4a02      	ldr	r2, [pc, #8]	; (80023f4 <SysTick_Handler+0x44>)
 80023ec:	7013      	strb	r3, [r2, #0]
		}
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023ee:	f7fd ff4d 	bl	800028c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023f2:	bd10      	pop	{r4, pc}
 80023f4:	2000000a 	.word	0x2000000a
 80023f8:	20000009 	.word	0x20000009
 80023fc:	20000040 	.word	0x20000040

08002400 <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002400:	4770      	bx	lr
	...

08002404 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002404:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002406:	4802      	ldr	r0, [pc, #8]	; (8002410 <ADC1_IRQHandler+0xc>)
 8002408:	f7fe f97a 	bl	8000700 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800240c:	bd10      	pop	{r4, pc}
 800240e:	46c0      	nop			; (mov r8, r8)
 8002410:	200000cc 	.word	0x200000cc

08002414 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002414:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002416:	4802      	ldr	r0, [pc, #8]	; (8002420 <USART1_IRQHandler+0xc>)
 8002418:	f7ff f94a 	bl	80016b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800241c:	bd10      	pop	{r4, pc}
 800241e:	46c0      	nop			; (mov r8, r8)
 8002420:	2000004c 	.word	0x2000004c

08002424 <time_proc>:

/* USER CODE BEGIN 1 */
void time_proc(void)
{
 8002424:	b510      	push	{r4, lr}
	if(flag_time & FLAG_1OMS)
 8002426:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <time_proc+0x30>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	07da      	lsls	r2, r3, #31
 800242c:	d404      	bmi.n	8002438 <time_proc+0x14>
	{
		flag_time &= ~FLAG_1OMS;
		time_10ms_proc();
	}

	if(flag_time & FLAG_1000MS)
 800242e:	4b09      	ldr	r3, [pc, #36]	; (8002454 <time_proc+0x30>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	079a      	lsls	r2, r3, #30
 8002434:	d407      	bmi.n	8002446 <time_proc+0x22>
	{
		flag_time &= ~FLAG_1000MS;
		time_1000ms_proc();
	}
}
 8002436:	bd10      	pop	{r4, pc}
		flag_time &= ~FLAG_1OMS;
 8002438:	2201      	movs	r2, #1
 800243a:	4393      	bics	r3, r2
 800243c:	4a05      	ldr	r2, [pc, #20]	; (8002454 <time_proc+0x30>)
 800243e:	6013      	str	r3, [r2, #0]
		time_10ms_proc();
 8002440:	f7ff fdd6 	bl	8001ff0 <time_10ms_proc>
 8002444:	e7f3      	b.n	800242e <time_proc+0xa>
		flag_time &= ~FLAG_1000MS;
 8002446:	2202      	movs	r2, #2
 8002448:	4393      	bics	r3, r2
 800244a:	4a02      	ldr	r2, [pc, #8]	; (8002454 <time_proc+0x30>)
 800244c:	6013      	str	r3, [r2, #0]
		time_1000ms_proc();
 800244e:	f7ff fde5 	bl	800201c <time_1000ms_proc>
}
 8002452:	e7f0      	b.n	8002436 <time_proc+0x12>
 8002454:	20000040 	.word	0x20000040

08002458 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002458:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <SystemInit+0x48>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	2101      	movs	r1, #1
 800245e:	430a      	orrs	r2, r1
 8002460:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	480f      	ldr	r0, [pc, #60]	; (80024a4 <SystemInit+0x4c>)
 8002466:	4002      	ands	r2, r0
 8002468:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	480e      	ldr	r0, [pc, #56]	; (80024a8 <SystemInit+0x50>)
 800246e:	4002      	ands	r2, r0
 8002470:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	480d      	ldr	r0, [pc, #52]	; (80024ac <SystemInit+0x54>)
 8002476:	4002      	ands	r2, r0
 8002478:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	480c      	ldr	r0, [pc, #48]	; (80024b0 <SystemInit+0x58>)
 800247e:	4002      	ands	r2, r0
 8002480:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002484:	200f      	movs	r0, #15
 8002486:	4382      	bics	r2, r0
 8002488:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 800248a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800248c:	4809      	ldr	r0, [pc, #36]	; (80024b4 <SystemInit+0x5c>)
 800248e:	4002      	ands	r2, r0
 8002490:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002494:	438a      	bics	r2, r1
 8002496:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002498:	2200      	movs	r2, #0
 800249a:	609a      	str	r2, [r3, #8]

}
 800249c:	4770      	bx	lr
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	40021000 	.word	0x40021000
 80024a4:	08ffb80c 	.word	0x08ffb80c
 80024a8:	fef6ffff 	.word	0xfef6ffff
 80024ac:	fffbffff 	.word	0xfffbffff
 80024b0:	ffc0ffff 	.word	0xffc0ffff
 80024b4:	fffffeec 	.word	0xfffffeec

080024b8 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{

}
 80024b8:	4770      	bx	lr

080024ba <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024ba:	b510      	push	{r4, lr}
	if(huart->pRxBuffPtr[PAYLOAD_POS] == SHORT_PRESS_ACK)
 80024bc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80024be:	791b      	ldrb	r3, [r3, #4]
 80024c0:	2bf1      	cmp	r3, #241	; 0xf1
 80024c2:	d003      	beq.n	80024cc <HAL_UART_RxCpltCallback+0x12>
	{

	}
	else if(huart->pRxBuffPtr[PAYLOAD_POS] == MIDDLE_PRESS_ACK)
 80024c4:	2bf2      	cmp	r3, #242	; 0xf2
 80024c6:	d002      	beq.n	80024ce <HAL_UART_RxCpltCallback+0x14>
	{
		Set_CurrentPowState(READY_OFF);
	}
	else if(huart->pRxBuffPtr[PAYLOAD_POS] == MIDDLE_PRESS_CANCEL_ACK)
 80024c8:	2bff      	cmp	r3, #255	; 0xff
 80024ca:	d004      	beq.n	80024d6 <HAL_UART_RxCpltCallback+0x1c>
	}
	else
	{

	}
}
 80024cc:	bd10      	pop	{r4, pc}
		Set_CurrentPowState(READY_OFF);
 80024ce:	2002      	movs	r0, #2
 80024d0:	f7ff fcc0 	bl	8001e54 <Set_CurrentPowState>
 80024d4:	e7fa      	b.n	80024cc <HAL_UART_RxCpltCallback+0x12>
		Set_CurrentPowState(ON);
 80024d6:	2003      	movs	r0, #3
 80024d8:	f7ff fcbc 	bl	8001e54 <Set_CurrentPowState>
}
 80024dc:	e7f6      	b.n	80024cc <HAL_UART_RxCpltCallback+0x12>
	...

080024e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024e0:	480d      	ldr	r0, [pc, #52]	; (8002518 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024e4:	480d      	ldr	r0, [pc, #52]	; (800251c <LoopForever+0x6>)
  ldr r1, =_edata
 80024e6:	490e      	ldr	r1, [pc, #56]	; (8002520 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024e8:	4a0e      	ldr	r2, [pc, #56]	; (8002524 <LoopForever+0xe>)
  movs r3, #0
 80024ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024ec:	e002      	b.n	80024f4 <LoopCopyDataInit>

080024ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024f2:	3304      	adds	r3, #4

080024f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f8:	d3f9      	bcc.n	80024ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024fa:	4a0b      	ldr	r2, [pc, #44]	; (8002528 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024fc:	4c0b      	ldr	r4, [pc, #44]	; (800252c <LoopForever+0x16>)
  movs r3, #0
 80024fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002500:	e001      	b.n	8002506 <LoopFillZerobss>

08002502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002504:	3204      	adds	r2, #4

08002506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002508:	d3fb      	bcc.n	8002502 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800250a:	f7ff ffa5 	bl	8002458 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800250e:	f000 f811 	bl	8002534 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002512:	f7ff fdbd 	bl	8002090 <main>

08002516 <LoopForever>:

LoopForever:
    b LoopForever
 8002516:	e7fe      	b.n	8002516 <LoopForever>
  ldr   r0, =_estack
 8002518:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800251c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002520:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002524:	080025e4 	.word	0x080025e4
  ldr r2, =_sbss
 8002528:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800252c:	2000010c 	.word	0x2000010c

08002530 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002530:	e7fe      	b.n	8002530 <DMA1_Channel1_IRQHandler>
	...

08002534 <__libc_init_array>:
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	2600      	movs	r6, #0
 8002538:	4d0c      	ldr	r5, [pc, #48]	; (800256c <__libc_init_array+0x38>)
 800253a:	4c0d      	ldr	r4, [pc, #52]	; (8002570 <__libc_init_array+0x3c>)
 800253c:	1b64      	subs	r4, r4, r5
 800253e:	10a4      	asrs	r4, r4, #2
 8002540:	42a6      	cmp	r6, r4
 8002542:	d109      	bne.n	8002558 <__libc_init_array+0x24>
 8002544:	2600      	movs	r6, #0
 8002546:	f000 f821 	bl	800258c <_init>
 800254a:	4d0a      	ldr	r5, [pc, #40]	; (8002574 <__libc_init_array+0x40>)
 800254c:	4c0a      	ldr	r4, [pc, #40]	; (8002578 <__libc_init_array+0x44>)
 800254e:	1b64      	subs	r4, r4, r5
 8002550:	10a4      	asrs	r4, r4, #2
 8002552:	42a6      	cmp	r6, r4
 8002554:	d105      	bne.n	8002562 <__libc_init_array+0x2e>
 8002556:	bd70      	pop	{r4, r5, r6, pc}
 8002558:	00b3      	lsls	r3, r6, #2
 800255a:	58eb      	ldr	r3, [r5, r3]
 800255c:	4798      	blx	r3
 800255e:	3601      	adds	r6, #1
 8002560:	e7ee      	b.n	8002540 <__libc_init_array+0xc>
 8002562:	00b3      	lsls	r3, r6, #2
 8002564:	58eb      	ldr	r3, [r5, r3]
 8002566:	4798      	blx	r3
 8002568:	3601      	adds	r6, #1
 800256a:	e7f2      	b.n	8002552 <__libc_init_array+0x1e>
 800256c:	080025dc 	.word	0x080025dc
 8002570:	080025dc 	.word	0x080025dc
 8002574:	080025dc 	.word	0x080025dc
 8002578:	080025e0 	.word	0x080025e0

0800257c <memset>:
 800257c:	0003      	movs	r3, r0
 800257e:	1812      	adds	r2, r2, r0
 8002580:	4293      	cmp	r3, r2
 8002582:	d100      	bne.n	8002586 <memset+0xa>
 8002584:	4770      	bx	lr
 8002586:	7019      	strb	r1, [r3, #0]
 8002588:	3301      	adds	r3, #1
 800258a:	e7f9      	b.n	8002580 <memset+0x4>

0800258c <_init>:
 800258c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800258e:	46c0      	nop			; (mov r8, r8)
 8002590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002592:	bc08      	pop	{r3}
 8002594:	469e      	mov	lr, r3
 8002596:	4770      	bx	lr

08002598 <_fini>:
 8002598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800259e:	bc08      	pop	{r3}
 80025a0:	469e      	mov	lr, r3
 80025a2:	4770      	bx	lr
