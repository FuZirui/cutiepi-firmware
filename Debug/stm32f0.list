
stm32f0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002060  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002120  08002120  00012120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002158  08002158  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002158  08002158  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002158  08002158  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002158  08002158  00012158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800215c  0800215c  0001215c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000004  08002164  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08002164  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014132  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f1f  00000000  00000000  0003415e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000051c1  00000000  00000000  0003707d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000838  00000000  00000000  0003c240  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000007a8  00000000  00000000  0003ca78  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000f572  00000000  00000000  0003d220  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000091c5  00000000  00000000  0004c792  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0004a957  00000000  00000000  00055957  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000a02ae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001308  00000000  00000000  000a032c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002108 	.word	0x08002108

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08002108 	.word	0x08002108

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000220:	b510      	push	{r4, lr}
 8000222:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000224:	f000 ff44 	bl	80010b0 <HAL_RCC_GetHCLKFreq>
 8000228:	21fa      	movs	r1, #250	; 0xfa
 800022a:	0089      	lsls	r1, r1, #2
 800022c:	f7ff ff6c 	bl	8000108 <__udivsi3>
 8000230:	f000 fab4 	bl	800079c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000234:	2001      	movs	r0, #1
 8000236:	2200      	movs	r2, #0
 8000238:	0021      	movs	r1, r4
 800023a:	4240      	negs	r0, r0
 800023c:	f000 fa70 	bl	8000720 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000240:	2000      	movs	r0, #0
 8000242:	bd10      	pop	{r4, pc}

08000244 <HAL_Init>:
{
 8000244:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000246:	4a06      	ldr	r2, [pc, #24]	; (8000260 <HAL_Init+0x1c>)
 8000248:	6813      	ldr	r3, [r2, #0]
 800024a:	2110      	movs	r1, #16
 800024c:	430b      	orrs	r3, r1
 800024e:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000250:	2001      	movs	r0, #1
 8000252:	f7ff ffe5 	bl	8000220 <HAL_InitTick>
  HAL_MspInit();
 8000256:	f001 fde7 	bl	8001e28 <HAL_MspInit>
}
 800025a:	2000      	movs	r0, #0
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	40022000 	.word	0x40022000

08000264 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000264:	4a02      	ldr	r2, [pc, #8]	; (8000270 <HAL_IncTick+0xc>)
 8000266:	6813      	ldr	r3, [r2, #0]
 8000268:	3301      	adds	r3, #1
 800026a:	6013      	str	r3, [r2, #0]
}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	20000044 	.word	0x20000044

08000274 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000274:	4b01      	ldr	r3, [pc, #4]	; (800027c <HAL_GetTick+0x8>)
 8000276:	6818      	ldr	r0, [r3, #0]
}
 8000278:	4770      	bx	lr
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	20000044 	.word	0x20000044

08000280 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	0004      	movs	r4, r0
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000286:	2300      	movs	r3, #0
 8000288:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800028a:	6803      	ldr	r3, [r0, #0]
 800028c:	6899      	ldr	r1, [r3, #8]
 800028e:	2203      	movs	r2, #3
 8000290:	400a      	ands	r2, r1
 8000292:	2a01      	cmp	r2, #1
 8000294:	d02d      	beq.n	80002f2 <ADC_Enable+0x72>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8000296:	6899      	ldr	r1, [r3, #8]
 8000298:	4a20      	ldr	r2, [pc, #128]	; (800031c <ADC_Enable+0x9c>)
 800029a:	4211      	tst	r1, r2
 800029c:	d131      	bne.n	8000302 <ADC_Enable+0x82>
      
      return HAL_ERROR;
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800029e:	689a      	ldr	r2, [r3, #8]
 80002a0:	2101      	movs	r1, #1
 80002a2:	430a      	orrs	r2, r1
 80002a4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80002a6:	4b1e      	ldr	r3, [pc, #120]	; (8000320 <ADC_Enable+0xa0>)
 80002a8:	6818      	ldr	r0, [r3, #0]
 80002aa:	491e      	ldr	r1, [pc, #120]	; (8000324 <ADC_Enable+0xa4>)
 80002ac:	f7ff ff2c 	bl	8000108 <__udivsi3>
 80002b0:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 80002b2:	9b01      	ldr	r3, [sp, #4]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d005      	beq.n	80002c4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80002b8:	9b01      	ldr	r3, [sp, #4]
 80002ba:	3b01      	subs	r3, #1
 80002bc:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80002be:	9b01      	ldr	r3, [sp, #4]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d1f9      	bne.n	80002b8 <ADC_Enable+0x38>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80002c4:	f7ff ffd6 	bl	8000274 <HAL_GetTick>
 80002c8:	0006      	movs	r6, r0
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80002ca:	2501      	movs	r5, #1
 80002cc:	6823      	ldr	r3, [r4, #0]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	421d      	tst	r5, r3
 80002d2:	d121      	bne.n	8000318 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80002d4:	f7ff ffce 	bl	8000274 <HAL_GetTick>
 80002d8:	1b80      	subs	r0, r0, r6
 80002da:	2802      	cmp	r0, #2
 80002dc:	d9f6      	bls.n	80002cc <ADC_Enable+0x4c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80002de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80002e0:	2210      	movs	r2, #16
 80002e2:	4313      	orrs	r3, r2
 80002e4:	6463      	str	r3, [r4, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80002e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80002e8:	3a0f      	subs	r2, #15
 80002ea:	4313      	orrs	r3, r2
 80002ec:	64a3      	str	r3, [r4, #72]	; 0x48
      
        return HAL_ERROR;
 80002ee:	2001      	movs	r0, #1
 80002f0:	e010      	b.n	8000314 <ADC_Enable+0x94>
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002f2:	681a      	ldr	r2, [r3, #0]
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80002f4:	2000      	movs	r0, #0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80002f6:	07d2      	lsls	r2, r2, #31
 80002f8:	d40c      	bmi.n	8000314 <ADC_Enable+0x94>
 80002fa:	68da      	ldr	r2, [r3, #12]
 80002fc:	0412      	lsls	r2, r2, #16
 80002fe:	d5ca      	bpl.n	8000296 <ADC_Enable+0x16>
 8000300:	e008      	b.n	8000314 <ADC_Enable+0x94>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000302:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000304:	2210      	movs	r2, #16
 8000306:	4313      	orrs	r3, r2
 8000308:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800030a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800030c:	3a0f      	subs	r2, #15
 800030e:	4313      	orrs	r3, r2
 8000310:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8000312:	2001      	movs	r0, #1
}
 8000314:	b002      	add	sp, #8
 8000316:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8000318:	2000      	movs	r0, #0
 800031a:	e7fb      	b.n	8000314 <ADC_Enable+0x94>
 800031c:	80000017 	.word	0x80000017
 8000320:	20000000 	.word	0x20000000
 8000324:	000f4240 	.word	0x000f4240

08000328 <HAL_ADC_Init>:
{
 8000328:	b570      	push	{r4, r5, r6, lr}
 800032a:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 800032c:	d100      	bne.n	8000330 <HAL_ADC_Init+0x8>
 800032e:	e0a4      	b.n	800047a <HAL_ADC_Init+0x152>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000330:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000332:	2b00      	cmp	r3, #0
 8000334:	d073      	beq.n	800041e <HAL_ADC_Init+0xf6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000336:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000338:	06db      	lsls	r3, r3, #27
 800033a:	d500      	bpl.n	800033e <HAL_ADC_Init+0x16>
 800033c:	e097      	b.n	800046e <HAL_ADC_Init+0x146>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800033e:	6822      	ldr	r2, [r4, #0]
 8000340:	6893      	ldr	r3, [r2, #8]
 8000342:	2104      	movs	r1, #4
 8000344:	4019      	ands	r1, r3
      (tmp_hal_status == HAL_OK)                                &&
 8000346:	d000      	beq.n	800034a <HAL_ADC_Init+0x22>
 8000348:	e091      	b.n	800046e <HAL_ADC_Init+0x146>
    ADC_STATE_CLR_SET(hadc->State,
 800034a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800034c:	484c      	ldr	r0, [pc, #304]	; (8000480 <HAL_ADC_Init+0x158>)
 800034e:	4003      	ands	r3, r0
 8000350:	3006      	adds	r0, #6
 8000352:	30ff      	adds	r0, #255	; 0xff
 8000354:	4303      	orrs	r3, r0
 8000356:	6463      	str	r3, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000358:	6890      	ldr	r0, [r2, #8]
 800035a:	2303      	movs	r3, #3
 800035c:	4003      	ands	r3, r0
 800035e:	2b01      	cmp	r3, #1
 8000360:	d063      	beq.n	800042a <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR1,
 8000362:	68d3      	ldr	r3, [r2, #12]
 8000364:	2018      	movs	r0, #24
 8000366:	4383      	bics	r3, r0
 8000368:	68a0      	ldr	r0, [r4, #8]
 800036a:	4303      	orrs	r3, r0
 800036c:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800036e:	6822      	ldr	r2, [r4, #0]
 8000370:	6913      	ldr	r3, [r2, #16]
 8000372:	009b      	lsls	r3, r3, #2
 8000374:	089b      	lsrs	r3, r3, #2
 8000376:	6860      	ldr	r0, [r4, #4]
 8000378:	4303      	orrs	r3, r0
 800037a:	6113      	str	r3, [r2, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800037c:	6822      	ldr	r2, [r4, #0]
 800037e:	68d3      	ldr	r3, [r2, #12]
 8000380:	4840      	ldr	r0, [pc, #256]	; (8000484 <HAL_ADC_Init+0x15c>)
 8000382:	4003      	ands	r3, r0
 8000384:	60d3      	str	r3, [r2, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000386:	69a3      	ldr	r3, [r4, #24]
 8000388:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800038a:	69e3      	ldr	r3, [r4, #28]
 800038c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800038e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000390:	6a20      	ldr	r0, [r4, #32]
 8000392:	0345      	lsls	r5, r0, #13
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8000394:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000396:	000e      	movs	r6, r1
 8000398:	2b01      	cmp	r3, #1
 800039a:	d001      	beq.n	80003a0 <HAL_ADC_Init+0x78>
 800039c:	2680      	movs	r6, #128	; 0x80
 800039e:	0176      	lsls	r6, r6, #5
 80003a0:	68e3      	ldr	r3, [r4, #12]
 80003a2:	431a      	orrs	r2, r3
 80003a4:	432a      	orrs	r2, r5
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80003a6:	6923      	ldr	r3, [r4, #16]
 80003a8:	2b02      	cmp	r3, #2
 80003aa:	d045      	beq.n	8000438 <HAL_ADC_Init+0x110>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80003ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80003ae:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80003b0:	4313      	orrs	r3, r2
 80003b2:	4333      	orrs	r3, r6
 80003b4:	430b      	orrs	r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80003b8:	2a01      	cmp	r2, #1
 80003ba:	d03f      	beq.n	800043c <HAL_ADC_Init+0x114>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80003bc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80003be:	21c2      	movs	r1, #194	; 0xc2
 80003c0:	31ff      	adds	r1, #255	; 0xff
 80003c2:	428a      	cmp	r2, r1
 80003c4:	d002      	beq.n	80003cc <HAL_ADC_Init+0xa4>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80003c6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80003c8:	430a      	orrs	r2, r1
 80003ca:	4313      	orrs	r3, r2
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80003cc:	6821      	ldr	r1, [r4, #0]
 80003ce:	68ca      	ldr	r2, [r1, #12]
 80003d0:	431a      	orrs	r2, r3
 80003d2:	60ca      	str	r2, [r1, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80003d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80003d6:	2180      	movs	r1, #128	; 0x80
 80003d8:	0549      	lsls	r1, r1, #21
 80003da:	428a      	cmp	r2, r1
 80003dc:	d002      	beq.n	80003e4 <HAL_ADC_Init+0xbc>
 80003de:	3a01      	subs	r2, #1
 80003e0:	2a06      	cmp	r2, #6
 80003e2:	d80a      	bhi.n	80003fa <HAL_ADC_Init+0xd2>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80003e4:	6820      	ldr	r0, [r4, #0]
 80003e6:	6941      	ldr	r1, [r0, #20]
 80003e8:	2207      	movs	r2, #7
 80003ea:	4391      	bics	r1, r2
 80003ec:	6141      	str	r1, [r0, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80003ee:	6821      	ldr	r1, [r4, #0]
 80003f0:	6948      	ldr	r0, [r1, #20]
 80003f2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80003f4:	402a      	ands	r2, r5
 80003f6:	4302      	orrs	r2, r0
 80003f8:	614a      	str	r2, [r1, #20]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80003fa:	6822      	ldr	r2, [r4, #0]
 80003fc:	68d2      	ldr	r2, [r2, #12]
 80003fe:	4922      	ldr	r1, [pc, #136]	; (8000488 <HAL_ADC_Init+0x160>)
 8000400:	400a      	ands	r2, r1
 8000402:	429a      	cmp	r2, r3
 8000404:	d029      	beq.n	800045a <HAL_ADC_Init+0x132>
      ADC_STATE_CLR_SET(hadc->State,
 8000406:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000408:	2212      	movs	r2, #18
 800040a:	4393      	bics	r3, r2
 800040c:	3a02      	subs	r2, #2
 800040e:	4313      	orrs	r3, r2
 8000410:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000412:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000414:	3a0f      	subs	r2, #15
 8000416:	4313      	orrs	r3, r2
 8000418:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 800041a:	2001      	movs	r0, #1
 800041c:	e02c      	b.n	8000478 <HAL_ADC_Init+0x150>
    ADC_CLEAR_ERRORCODE(hadc);
 800041e:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 8000420:	2240      	movs	r2, #64	; 0x40
 8000422:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8000424:	f001 fd20 	bl	8001e68 <HAL_ADC_MspInit>
 8000428:	e785      	b.n	8000336 <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800042a:	6813      	ldr	r3, [r2, #0]
 800042c:	07db      	lsls	r3, r3, #31
 800042e:	d4a5      	bmi.n	800037c <HAL_ADC_Init+0x54>
 8000430:	68d3      	ldr	r3, [r2, #12]
 8000432:	041b      	lsls	r3, r3, #16
 8000434:	d4a2      	bmi.n	800037c <HAL_ADC_Init+0x54>
 8000436:	e794      	b.n	8000362 <HAL_ADC_Init+0x3a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000438:	2104      	movs	r1, #4
 800043a:	e7b7      	b.n	80003ac <HAL_ADC_Init+0x84>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800043c:	2800      	cmp	r0, #0
 800043e:	d103      	bne.n	8000448 <HAL_ADC_Init+0x120>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000440:	2280      	movs	r2, #128	; 0x80
 8000442:	0252      	lsls	r2, r2, #9
 8000444:	4313      	orrs	r3, r2
 8000446:	e7b9      	b.n	80003bc <HAL_ADC_Init+0x94>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000448:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800044a:	2120      	movs	r1, #32
 800044c:	430a      	orrs	r2, r1
 800044e:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000450:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000452:	391f      	subs	r1, #31
 8000454:	430a      	orrs	r2, r1
 8000456:	64a2      	str	r2, [r4, #72]	; 0x48
 8000458:	e7b0      	b.n	80003bc <HAL_ADC_Init+0x94>
      ADC_CLEAR_ERRORCODE(hadc);
 800045a:	2300      	movs	r3, #0
 800045c:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 800045e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000460:	2203      	movs	r2, #3
 8000462:	4393      	bics	r3, r2
 8000464:	3a02      	subs	r2, #2
 8000466:	4313      	orrs	r3, r2
 8000468:	6463      	str	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800046a:	2000      	movs	r0, #0
 800046c:	e004      	b.n	8000478 <HAL_ADC_Init+0x150>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800046e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000470:	2210      	movs	r2, #16
 8000472:	4313      	orrs	r3, r2
 8000474:	6463      	str	r3, [r4, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000476:	2001      	movs	r0, #1
}
 8000478:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800047a:	2001      	movs	r0, #1
 800047c:	e7fc      	b.n	8000478 <HAL_ADC_Init+0x150>
 800047e:	46c0      	nop			; (mov r8, r8)
 8000480:	fffffefd 	.word	0xfffffefd
 8000484:	fffe0219 	.word	0xfffe0219
 8000488:	833fffe7 	.word	0x833fffe7

0800048c <HAL_ADC_Start_IT>:
{
 800048c:	b510      	push	{r4, lr}
 800048e:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000490:	6803      	ldr	r3, [r0, #0]
 8000492:	689b      	ldr	r3, [r3, #8]
 8000494:	075b      	lsls	r3, r3, #29
 8000496:	d436      	bmi.n	8000506 <HAL_ADC_Start_IT+0x7a>
    __HAL_LOCK(hadc);
 8000498:	2340      	movs	r3, #64	; 0x40
 800049a:	5cc3      	ldrb	r3, [r0, r3]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d034      	beq.n	800050a <HAL_ADC_Start_IT+0x7e>
 80004a0:	2340      	movs	r3, #64	; 0x40
 80004a2:	2201      	movs	r2, #1
 80004a4:	54c2      	strb	r2, [r0, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80004a6:	69c3      	ldr	r3, [r0, #28]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d121      	bne.n	80004f0 <HAL_ADC_Start_IT+0x64>
      ADC_STATE_CLR_SET(hadc->State,
 80004ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004ae:	4a18      	ldr	r2, [pc, #96]	; (8000510 <HAL_ADC_Start_IT+0x84>)
 80004b0:	401a      	ands	r2, r3
 80004b2:	2380      	movs	r3, #128	; 0x80
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	4313      	orrs	r3, r2
 80004b8:	6463      	str	r3, [r4, #68]	; 0x44
      ADC_CLEAR_ERRORCODE(hadc);
 80004ba:	2300      	movs	r3, #0
 80004bc:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 80004be:	2240      	movs	r2, #64	; 0x40
 80004c0:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80004c2:	6823      	ldr	r3, [r4, #0]
 80004c4:	3a24      	subs	r2, #36	; 0x24
 80004c6:	601a      	str	r2, [r3, #0]
      switch(hadc->Init.EOCSelection)
 80004c8:	6963      	ldr	r3, [r4, #20]
 80004ca:	2b08      	cmp	r3, #8
 80004cc:	d115      	bne.n	80004fa <HAL_ADC_Start_IT+0x6e>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80004ce:	6822      	ldr	r2, [r4, #0]
 80004d0:	6853      	ldr	r3, [r2, #4]
 80004d2:	2104      	movs	r1, #4
 80004d4:	438b      	bics	r3, r1
 80004d6:	6053      	str	r3, [r2, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 80004d8:	6822      	ldr	r2, [r4, #0]
 80004da:	6853      	ldr	r3, [r2, #4]
 80004dc:	3114      	adds	r1, #20
 80004de:	430b      	orrs	r3, r1
 80004e0:	6053      	str	r3, [r2, #4]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80004e2:	6822      	ldr	r2, [r4, #0]
 80004e4:	6893      	ldr	r3, [r2, #8]
 80004e6:	2104      	movs	r1, #4
 80004e8:	430b      	orrs	r3, r1
 80004ea:	6093      	str	r3, [r2, #8]
 80004ec:	2000      	movs	r0, #0
}
 80004ee:	bd10      	pop	{r4, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80004f0:	f7ff fec6 	bl	8000280 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80004f4:	2800      	cmp	r0, #0
 80004f6:	d0d9      	beq.n	80004ac <HAL_ADC_Start_IT+0x20>
 80004f8:	e7f9      	b.n	80004ee <HAL_ADC_Start_IT+0x62>
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80004fa:	6822      	ldr	r2, [r4, #0]
 80004fc:	6853      	ldr	r3, [r2, #4]
 80004fe:	211c      	movs	r1, #28
 8000500:	430b      	orrs	r3, r1
 8000502:	6053      	str	r3, [r2, #4]
          break;
 8000504:	e7ed      	b.n	80004e2 <HAL_ADC_Start_IT+0x56>
    tmp_hal_status = HAL_BUSY;
 8000506:	2002      	movs	r0, #2
 8000508:	e7f1      	b.n	80004ee <HAL_ADC_Start_IT+0x62>
    __HAL_LOCK(hadc);
 800050a:	2002      	movs	r0, #2
 800050c:	e7ef      	b.n	80004ee <HAL_ADC_Start_IT+0x62>
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	fffff0fe 	.word	0xfffff0fe

08000514 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000514:	6803      	ldr	r3, [r0, #0]
 8000516:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8000518:	4770      	bx	lr

0800051a <HAL_ADC_LevelOutOfWindowCallback>:
}
 800051a:	4770      	bx	lr

0800051c <HAL_ADC_ErrorCallback>:
}
 800051c:	4770      	bx	lr
	...

08000520 <HAL_ADC_IRQHandler>:
{
 8000520:	b510      	push	{r4, lr}
 8000522:	0004      	movs	r4, r0
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000524:	6803      	ldr	r3, [r0, #0]
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	0752      	lsls	r2, r2, #29
 800052a:	d502      	bpl.n	8000532 <HAL_ADC_IRQHandler+0x12>
 800052c:	685a      	ldr	r2, [r3, #4]
 800052e:	0752      	lsls	r2, r2, #29
 8000530:	d405      	bmi.n	800053e <HAL_ADC_IRQHandler+0x1e>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000532:	681a      	ldr	r2, [r3, #0]
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 8000534:	0712      	lsls	r2, r2, #28
 8000536:	d529      	bpl.n	800058c <HAL_ADC_IRQHandler+0x6c>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8000538:	685a      	ldr	r2, [r3, #4]
 800053a:	0712      	lsls	r2, r2, #28
 800053c:	d526      	bpl.n	800058c <HAL_ADC_IRQHandler+0x6c>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800053e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000540:	06d2      	lsls	r2, r2, #27
 8000542:	d404      	bmi.n	800054e <HAL_ADC_IRQHandler+0x2e>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000544:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000546:	2280      	movs	r2, #128	; 0x80
 8000548:	0092      	lsls	r2, r2, #2
 800054a:	430a      	orrs	r2, r1
 800054c:	6462      	str	r2, [r4, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800054e:	68d9      	ldr	r1, [r3, #12]
 8000550:	22c0      	movs	r2, #192	; 0xc0
 8000552:	0112      	lsls	r2, r2, #4
 8000554:	4211      	tst	r1, r2
 8000556:	d113      	bne.n	8000580 <HAL_ADC_IRQHandler+0x60>
 8000558:	6a22      	ldr	r2, [r4, #32]
 800055a:	2a00      	cmp	r2, #0
 800055c:	d110      	bne.n	8000580 <HAL_ADC_IRQHandler+0x60>
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	0712      	lsls	r2, r2, #28
 8000562:	d50d      	bpl.n	8000580 <HAL_ADC_IRQHandler+0x60>
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000564:	689a      	ldr	r2, [r3, #8]
 8000566:	0752      	lsls	r2, r2, #29
 8000568:	d431      	bmi.n	80005ce <HAL_ADC_IRQHandler+0xae>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800056a:	685a      	ldr	r2, [r3, #4]
 800056c:	210c      	movs	r1, #12
 800056e:	438a      	bics	r2, r1
 8000570:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8000572:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000574:	4a20      	ldr	r2, [pc, #128]	; (80005f8 <HAL_ADC_IRQHandler+0xd8>)
 8000576:	4013      	ands	r3, r2
 8000578:	3204      	adds	r2, #4
 800057a:	32ff      	adds	r2, #255	; 0xff
 800057c:	4313      	orrs	r3, r2
 800057e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_ADC_ConvCpltCallback(hadc);
 8000580:	0020      	movs	r0, r4
 8000582:	f001 f9fd 	bl	8001980 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000586:	6823      	ldr	r3, [r4, #0]
 8000588:	220c      	movs	r2, #12
 800058a:	601a      	str	r2, [r3, #0]
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800058c:	6823      	ldr	r3, [r4, #0]
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	0612      	lsls	r2, r2, #24
 8000592:	d502      	bpl.n	800059a <HAL_ADC_IRQHandler+0x7a>
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	061b      	lsls	r3, r3, #24
 8000598:	d422      	bmi.n	80005e0 <HAL_ADC_IRQHandler+0xc0>
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 800059a:	6823      	ldr	r3, [r4, #0]
 800059c:	681a      	ldr	r2, [r3, #0]
 800059e:	06d2      	lsls	r2, r2, #27
 80005a0:	d514      	bpl.n	80005cc <HAL_ADC_IRQHandler+0xac>
 80005a2:	685a      	ldr	r2, [r3, #4]
 80005a4:	06d2      	lsls	r2, r2, #27
 80005a6:	d511      	bpl.n	80005cc <HAL_ADC_IRQHandler+0xac>
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80005a8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	d002      	beq.n	80005b4 <HAL_ADC_IRQHandler+0x94>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80005ae:	68da      	ldr	r2, [r3, #12]
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80005b0:	07d2      	lsls	r2, r2, #31
 80005b2:	d508      	bpl.n	80005c6 <HAL_ADC_IRQHandler+0xa6>
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80005b4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80005b6:	2102      	movs	r1, #2
 80005b8:	430a      	orrs	r2, r1
 80005ba:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80005bc:	2210      	movs	r2, #16
 80005be:	601a      	str	r2, [r3, #0]
      HAL_ADC_ErrorCallback(hadc);
 80005c0:	0020      	movs	r0, r4
 80005c2:	f7ff ffab 	bl	800051c <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80005c6:	6823      	ldr	r3, [r4, #0]
 80005c8:	2210      	movs	r2, #16
 80005ca:	601a      	str	r2, [r3, #0]
}
 80005cc:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80005ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80005d0:	2220      	movs	r2, #32
 80005d2:	4313      	orrs	r3, r2
 80005d4:	6463      	str	r3, [r4, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80005d8:	3a1f      	subs	r2, #31
 80005da:	4313      	orrs	r3, r2
 80005dc:	64a3      	str	r3, [r4, #72]	; 0x48
 80005de:	e7cf      	b.n	8000580 <HAL_ADC_IRQHandler+0x60>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80005e0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80005e2:	2380      	movs	r3, #128	; 0x80
 80005e4:	025b      	lsls	r3, r3, #9
 80005e6:	4313      	orrs	r3, r2
 80005e8:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80005ea:	0020      	movs	r0, r4
 80005ec:	f7ff ff95 	bl	800051a <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80005f0:	6823      	ldr	r3, [r4, #0]
 80005f2:	2280      	movs	r2, #128	; 0x80
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	e7d0      	b.n	800059a <HAL_ADC_IRQHandler+0x7a>
 80005f8:	fffffefe 	.word	0xfffffefe

080005fc <HAL_ADC_ConfigChannel>:
{
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	b083      	sub	sp, #12
 8000600:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8000602:	2300      	movs	r3, #0
 8000604:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000606:	3340      	adds	r3, #64	; 0x40
 8000608:	5cc3      	ldrb	r3, [r0, r3]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d100      	bne.n	8000610 <HAL_ADC_ConfigChannel+0x14>
 800060e:	e07b      	b.n	8000708 <HAL_ADC_ConfigChannel+0x10c>
 8000610:	2340      	movs	r3, #64	; 0x40
 8000612:	2201      	movs	r2, #1
 8000614:	54c2      	strb	r2, [r0, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000616:	6803      	ldr	r3, [r0, #0]
 8000618:	689a      	ldr	r2, [r3, #8]
 800061a:	0752      	lsls	r2, r2, #29
 800061c:	d468      	bmi.n	80006f0 <HAL_ADC_ConfigChannel+0xf4>
    if (sConfig->Rank != ADC_RANK_NONE)
 800061e:	4a3b      	ldr	r2, [pc, #236]	; (800070c <HAL_ADC_ConfigChannel+0x110>)
 8000620:	6848      	ldr	r0, [r1, #4]
 8000622:	4290      	cmp	r0, r2
 8000624:	d04a      	beq.n	80006bc <HAL_ADC_ConfigChannel+0xc0>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000626:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000628:	2201      	movs	r2, #1
 800062a:	680d      	ldr	r5, [r1, #0]
 800062c:	40aa      	lsls	r2, r5
 800062e:	4302      	orrs	r2, r0
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000632:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000634:	2280      	movs	r2, #128	; 0x80
 8000636:	0552      	lsls	r2, r2, #21
 8000638:	4293      	cmp	r3, r2
 800063a:	d013      	beq.n	8000664 <HAL_ADC_ConfigChannel+0x68>
 800063c:	3b01      	subs	r3, #1
 800063e:	2b06      	cmp	r3, #6
 8000640:	d910      	bls.n	8000664 <HAL_ADC_ConfigChannel+0x68>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000642:	6822      	ldr	r2, [r4, #0]
 8000644:	6950      	ldr	r0, [r2, #20]
 8000646:	2307      	movs	r3, #7
 8000648:	4003      	ands	r3, r0
 800064a:	6888      	ldr	r0, [r1, #8]
 800064c:	4298      	cmp	r0, r3
 800064e:	d009      	beq.n	8000664 <HAL_ADC_ConfigChannel+0x68>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000650:	6950      	ldr	r0, [r2, #20]
 8000652:	2307      	movs	r3, #7
 8000654:	4398      	bics	r0, r3
 8000656:	6150      	str	r0, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000658:	6822      	ldr	r2, [r4, #0]
 800065a:	6950      	ldr	r0, [r2, #20]
 800065c:	688d      	ldr	r5, [r1, #8]
 800065e:	402b      	ands	r3, r5
 8000660:	4303      	orrs	r3, r0
 8000662:	6153      	str	r3, [r2, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000664:	680b      	ldr	r3, [r1, #0]
 8000666:	001a      	movs	r2, r3
 8000668:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800066a:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800066c:	2a01      	cmp	r2, #1
 800066e:	d844      	bhi.n	80006fa <HAL_ADC_ConfigChannel+0xfe>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000670:	4a27      	ldr	r2, [pc, #156]	; (8000710 <HAL_ADC_ConfigChannel+0x114>)
 8000672:	6812      	ldr	r2, [r2, #0]
 8000674:	3b10      	subs	r3, #16
 8000676:	4258      	negs	r0, r3
 8000678:	4143      	adcs	r3, r0
 800067a:	425b      	negs	r3, r3
 800067c:	2080      	movs	r0, #128	; 0x80
 800067e:	03c0      	lsls	r0, r0, #15
 8000680:	4003      	ands	r3, r0
 8000682:	4684      	mov	ip, r0
 8000684:	4463      	add	r3, ip
 8000686:	4313      	orrs	r3, r2
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <HAL_ADC_ConfigChannel+0x114>)
 800068a:	6013      	str	r3, [r2, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800068c:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800068e:	2000      	movs	r0, #0
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000690:	2b10      	cmp	r3, #16
 8000692:	d132      	bne.n	80006fa <HAL_ADC_ConfigChannel+0xfe>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <HAL_ADC_ConfigChannel+0x118>)
 8000696:	6818      	ldr	r0, [r3, #0]
 8000698:	491f      	ldr	r1, [pc, #124]	; (8000718 <HAL_ADC_ConfigChannel+0x11c>)
 800069a:	f7ff fd35 	bl	8000108 <__udivsi3>
 800069e:	0083      	lsls	r3, r0, #2
 80006a0:	1818      	adds	r0, r3, r0
 80006a2:	0040      	lsls	r0, r0, #1
 80006a4:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 80006a6:	9b01      	ldr	r3, [sp, #4]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d02b      	beq.n	8000704 <HAL_ADC_ConfigChannel+0x108>
            wait_loop_index--;
 80006ac:	9b01      	ldr	r3, [sp, #4]
 80006ae:	3b01      	subs	r3, #1
 80006b0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80006b2:	9b01      	ldr	r3, [sp, #4]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d1f9      	bne.n	80006ac <HAL_ADC_ConfigChannel+0xb0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006b8:	2000      	movs	r0, #0
 80006ba:	e01e      	b.n	80006fa <HAL_ADC_ConfigChannel+0xfe>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80006bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80006be:	2001      	movs	r0, #1
 80006c0:	680d      	ldr	r5, [r1, #0]
 80006c2:	40a8      	lsls	r0, r5
 80006c4:	4382      	bics	r2, r0
 80006c6:	629a      	str	r2, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80006c8:	680b      	ldr	r3, [r1, #0]
 80006ca:	001a      	movs	r2, r3
 80006cc:	3a10      	subs	r2, #16
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006ce:	2000      	movs	r0, #0
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80006d0:	2a01      	cmp	r2, #1
 80006d2:	d812      	bhi.n	80006fa <HAL_ADC_ConfigChannel+0xfe>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80006d4:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <HAL_ADC_ConfigChannel+0x114>)
 80006d6:	6811      	ldr	r1, [r2, #0]
 80006d8:	3b10      	subs	r3, #16
 80006da:	425a      	negs	r2, r3
 80006dc:	415a      	adcs	r2, r3
 80006de:	4253      	negs	r3, r2
 80006e0:	059b      	lsls	r3, r3, #22
 80006e2:	4a0e      	ldr	r2, [pc, #56]	; (800071c <HAL_ADC_ConfigChannel+0x120>)
 80006e4:	4694      	mov	ip, r2
 80006e6:	4463      	add	r3, ip
 80006e8:	400b      	ands	r3, r1
 80006ea:	4a09      	ldr	r2, [pc, #36]	; (8000710 <HAL_ADC_ConfigChannel+0x114>)
 80006ec:	6013      	str	r3, [r2, #0]
 80006ee:	e004      	b.n	80006fa <HAL_ADC_ConfigChannel+0xfe>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80006f0:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80006f2:	2220      	movs	r2, #32
 80006f4:	4313      	orrs	r3, r2
 80006f6:	6443      	str	r3, [r0, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 80006f8:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 80006fa:	2340      	movs	r3, #64	; 0x40
 80006fc:	2200      	movs	r2, #0
 80006fe:	54e2      	strb	r2, [r4, r3]
}
 8000700:	b003      	add	sp, #12
 8000702:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000704:	2000      	movs	r0, #0
 8000706:	e7f8      	b.n	80006fa <HAL_ADC_ConfigChannel+0xfe>
  __HAL_LOCK(hadc);
 8000708:	2002      	movs	r0, #2
 800070a:	e7f9      	b.n	8000700 <HAL_ADC_ConfigChannel+0x104>
 800070c:	00001001 	.word	0x00001001
 8000710:	40012708 	.word	0x40012708
 8000714:	20000000 	.word	0x20000000
 8000718:	000f4240 	.word	0x000f4240
 800071c:	ffbfffff 	.word	0xffbfffff

08000720 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000720:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000722:	2800      	cmp	r0, #0
 8000724:	db14      	blt.n	8000750 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000726:	0883      	lsrs	r3, r0, #2
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	4a15      	ldr	r2, [pc, #84]	; (8000780 <HAL_NVIC_SetPriority+0x60>)
 800072c:	4694      	mov	ip, r2
 800072e:	4463      	add	r3, ip
 8000730:	26c0      	movs	r6, #192	; 0xc0
 8000732:	00b6      	lsls	r6, r6, #2
 8000734:	599d      	ldr	r5, [r3, r6]
 8000736:	2403      	movs	r4, #3
 8000738:	4020      	ands	r0, r4
 800073a:	00c0      	lsls	r0, r0, #3
 800073c:	22ff      	movs	r2, #255	; 0xff
 800073e:	0014      	movs	r4, r2
 8000740:	4084      	lsls	r4, r0
 8000742:	43a5      	bics	r5, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000744:	0189      	lsls	r1, r1, #6
 8000746:	400a      	ands	r2, r1
 8000748:	4082      	lsls	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800074a:	432a      	orrs	r2, r5
 800074c:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800074e:	bd70      	pop	{r4, r5, r6, pc}
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000750:	b2c0      	uxtb	r0, r0
 8000752:	230f      	movs	r3, #15
 8000754:	4003      	ands	r3, r0
 8000756:	3b08      	subs	r3, #8
 8000758:	089b      	lsrs	r3, r3, #2
 800075a:	009b      	lsls	r3, r3, #2
 800075c:	4a09      	ldr	r2, [pc, #36]	; (8000784 <HAL_NVIC_SetPriority+0x64>)
 800075e:	4694      	mov	ip, r2
 8000760:	4463      	add	r3, ip
 8000762:	69dd      	ldr	r5, [r3, #28]
 8000764:	2203      	movs	r2, #3
 8000766:	4010      	ands	r0, r2
 8000768:	00c0      	lsls	r0, r0, #3
 800076a:	24ff      	movs	r4, #255	; 0xff
 800076c:	0022      	movs	r2, r4
 800076e:	4082      	lsls	r2, r0
 8000770:	4395      	bics	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000772:	0189      	lsls	r1, r1, #6
 8000774:	400c      	ands	r4, r1
 8000776:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000778:	432c      	orrs	r4, r5
 800077a:	61dc      	str	r4, [r3, #28]
 800077c:	e7e7      	b.n	800074e <HAL_NVIC_SetPriority+0x2e>
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	e000e100 	.word	0xe000e100
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000788:	231f      	movs	r3, #31
 800078a:	4018      	ands	r0, r3
 800078c:	3b1e      	subs	r3, #30
 800078e:	4083      	lsls	r3, r0
 8000790:	4a01      	ldr	r2, [pc, #4]	; (8000798 <HAL_NVIC_EnableIRQ+0x10>)
 8000792:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000794:	4770      	bx	lr
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	e000e100 	.word	0xe000e100

0800079c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800079c:	1e43      	subs	r3, r0, #1
 800079e:	4a0a      	ldr	r2, [pc, #40]	; (80007c8 <HAL_SYSTICK_Config+0x2c>)
  {
    return (1UL);                                                   /* Reload value impossible */
 80007a0:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d80e      	bhi.n	80007c4 <HAL_SYSTICK_Config+0x28>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a6:	4a09      	ldr	r2, [pc, #36]	; (80007cc <HAL_SYSTICK_Config+0x30>)
 80007a8:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80007aa:	4809      	ldr	r0, [pc, #36]	; (80007d0 <HAL_SYSTICK_Config+0x34>)
 80007ac:	6a03      	ldr	r3, [r0, #32]
 80007ae:	021b      	lsls	r3, r3, #8
 80007b0:	0a1b      	lsrs	r3, r3, #8
 80007b2:	21c0      	movs	r1, #192	; 0xc0
 80007b4:	0609      	lsls	r1, r1, #24
 80007b6:	430b      	orrs	r3, r1
 80007b8:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ba:	2300      	movs	r3, #0
 80007bc:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007be:	3307      	adds	r3, #7
 80007c0:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c2:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80007c4:	4770      	bx	lr
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	00ffffff 	.word	0x00ffffff
 80007cc:	e000e010 	.word	0xe000e010
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and initialize the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80007d4:	b510      	push	{r4, lr}
 80007d6:	1e04      	subs	r4, r0, #0
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 80007d8:	d029      	beq.n	800082e <HAL_CRC_Init+0x5a>
  }
  
  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 80007da:	7f43      	ldrb	r3, [r0, #29]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d01e      	beq.n	800081e <HAL_CRC_Init+0x4a>

    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }
  
  hcrc->State = HAL_CRC_STATE_BUSY; 
 80007e0:	2302      	movs	r3, #2
 80007e2:	7763      	strb	r3, [r4, #29]
  /* Extended initialization: if programmable polynomial feature is 
     applicable to device, set default or non-default generating 
     polynomial according to hcrc->Init parameters.
     If feature is non-applicable to device in use, HAL_CRCEx_Init straight 
     away reports HAL_OK. */
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 80007e4:	0020      	movs	r0, r4
 80007e6:	f000 f826 	bl	8000836 <HAL_CRCEx_Init>
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d121      	bne.n	8000832 <HAL_CRC_Init+0x5e>
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80007ee:	7963      	ldrb	r3, [r4, #5]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d118      	bne.n	8000826 <HAL_CRC_Init+0x52>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 80007f4:	6823      	ldr	r3, [r4, #0]
 80007f6:	2201      	movs	r2, #1
 80007f8:	4252      	negs	r2, r2
 80007fa:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 80007fc:	6822      	ldr	r2, [r4, #0]
 80007fe:	6893      	ldr	r3, [r2, #8]
 8000800:	2160      	movs	r1, #96	; 0x60
 8000802:	438b      	bics	r3, r1
 8000804:	6961      	ldr	r1, [r4, #20]
 8000806:	430b      	orrs	r3, r1
 8000808:	6093      	str	r3, [r2, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 800080a:	6822      	ldr	r2, [r4, #0]
 800080c:	6893      	ldr	r3, [r2, #8]
 800080e:	2180      	movs	r1, #128	; 0x80
 8000810:	438b      	bics	r3, r1
 8000812:	69a1      	ldr	r1, [r4, #24]
 8000814:	430b      	orrs	r3, r1
 8000816:	6093      	str	r3, [r2, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000818:	2301      	movs	r3, #1
 800081a:	7763      	strb	r3, [r4, #29]
  
  /* Return function status */
  return HAL_OK;
}
 800081c:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 800081e:	7703      	strb	r3, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8000820:	f001 fb5a 	bl	8001ed8 <HAL_CRC_MspInit>
 8000824:	e7dc      	b.n	80007e0 <HAL_CRC_Init+0xc>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000826:	6823      	ldr	r3, [r4, #0]
 8000828:	6922      	ldr	r2, [r4, #16]
 800082a:	611a      	str	r2, [r3, #16]
 800082c:	e7e6      	b.n	80007fc <HAL_CRC_Init+0x28>
    return HAL_ERROR;
 800082e:	2001      	movs	r0, #1
 8000830:	e7f4      	b.n	800081c <HAL_CRC_Init+0x48>
    return HAL_ERROR;
 8000832:	2001      	movs	r0, #1
 8000834:	e7f2      	b.n	800081c <HAL_CRC_Init+0x48>

08000836 <HAL_CRCEx_Init>:
    }
  }
#endif /* defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F091xC) || defined (STM32F098xx) */    

   return HAL_OK;
}
 8000836:	2000      	movs	r0, #0
 8000838:	4770      	bx	lr

0800083a <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800083a:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800083c:	2321      	movs	r3, #33	; 0x21
 800083e:	5cc3      	ldrb	r3, [r0, r3]
 8000840:	2b02      	cmp	r3, #2
 8000842:	d003      	beq.n	800084c <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000844:	2304      	movs	r3, #4
 8000846:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000848:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 800084a:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800084c:	6802      	ldr	r2, [r0, #0]
 800084e:	6813      	ldr	r3, [r2, #0]
 8000850:	210e      	movs	r1, #14
 8000852:	438b      	bics	r3, r1
 8000854:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000856:	6801      	ldr	r1, [r0, #0]
 8000858:	680a      	ldr	r2, [r1, #0]
 800085a:	2301      	movs	r3, #1
 800085c:	439a      	bics	r2, r3
 800085e:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000860:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8000862:	0019      	movs	r1, r3
 8000864:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8000866:	40a1      	lsls	r1, r4
 8000868:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800086a:	2221      	movs	r2, #33	; 0x21
 800086c:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 800086e:	331f      	adds	r3, #31
 8000870:	2200      	movs	r2, #0
 8000872:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 8000874:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000876:	2b00      	cmp	r3, #0
 8000878:	d002      	beq.n	8000880 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 800087a:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800087c:	2000      	movs	r0, #0
 800087e:	e7e4      	b.n	800084a <HAL_DMA_Abort_IT+0x10>
 8000880:	2000      	movs	r0, #0
 8000882:	e7e2      	b.n	800084a <HAL_DMA_Abort_IT+0x10>

08000884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000886:	46de      	mov	lr, fp
 8000888:	4657      	mov	r7, sl
 800088a:	464e      	mov	r6, r9
 800088c:	4645      	mov	r5, r8
 800088e:	b5e0      	push	{r5, r6, r7, lr}
 8000890:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000892:	680a      	ldr	r2, [r1, #0]
 8000894:	2a00      	cmp	r2, #0
 8000896:	d100      	bne.n	800089a <HAL_GPIO_Init+0x16>
 8000898:	e0ba      	b.n	8000a10 <HAL_GPIO_Init+0x18c>
  uint32_t position = 0x00U;
 800089a:	2400      	movs	r4, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800089c:	2301      	movs	r3, #1
 800089e:	4698      	mov	r8, r3
    
    if(iocurrent)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80008a0:	330f      	adds	r3, #15
 80008a2:	469a      	mov	sl, r3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80008a4:	3b0d      	subs	r3, #13
 80008a6:	4699      	mov	r9, r3
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
      GPIOx->PUPDR = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	055b      	lsls	r3, r3, #21
 80008ac:	469b      	mov	fp, r3
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008ae:	4b5c      	ldr	r3, [pc, #368]	; (8000a20 <HAL_GPIO_Init+0x19c>)
 80008b0:	18c3      	adds	r3, r0, r3
 80008b2:	425d      	negs	r5, r3
 80008b4:	416b      	adcs	r3, r5
 80008b6:	425b      	negs	r3, r3
 80008b8:	9301      	str	r3, [sp, #4]
 80008ba:	e039      	b.n	8000930 <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3];
 80008bc:	08e3      	lsrs	r3, r4, #3
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	18c3      	adds	r3, r0, r3
 80008c2:	6a1f      	ldr	r7, [r3, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80008c4:	2507      	movs	r5, #7
 80008c6:	4025      	ands	r5, r4
 80008c8:	00ad      	lsls	r5, r5, #2
 80008ca:	220f      	movs	r2, #15
 80008cc:	40aa      	lsls	r2, r5
 80008ce:	4397      	bics	r7, r2
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80008d0:	690a      	ldr	r2, [r1, #16]
 80008d2:	40aa      	lsls	r2, r5
 80008d4:	0015      	movs	r5, r2
 80008d6:	433d      	orrs	r5, r7
        GPIOx->AFR[position >> 3U] = temp;
 80008d8:	621d      	str	r5, [r3, #32]
 80008da:	e033      	b.n	8000944 <HAL_GPIO_Init+0xc0>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008dc:	2500      	movs	r5, #0
 80008de:	40b5      	lsls	r5, r6
 80008e0:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 80008e2:	609d      	str	r5, [r3, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80008e4:	4b4f      	ldr	r3, [pc, #316]	; (8000a24 <HAL_GPIO_Init+0x1a0>)
 80008e6:	681b      	ldr	r3, [r3, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80008e8:	9a00      	ldr	r2, [sp, #0]
 80008ea:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008ec:	684a      	ldr	r2, [r1, #4]
 80008ee:	03d2      	lsls	r2, r2, #15
 80008f0:	d500      	bpl.n	80008f4 <HAL_GPIO_Init+0x70>
 80008f2:	e081      	b.n	80009f8 <HAL_GPIO_Init+0x174>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80008f4:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 80008f6:	4e4b      	ldr	r6, [pc, #300]	; (8000a24 <HAL_GPIO_Init+0x1a0>)
 80008f8:	6033      	str	r3, [r6, #0]

        temp = EXTI->EMR;
 80008fa:	6873      	ldr	r3, [r6, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008fc:	684a      	ldr	r2, [r1, #4]
 80008fe:	0392      	lsls	r2, r2, #14
 8000900:	d47d      	bmi.n	80009fe <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000902:	402b      	ands	r3, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8000904:	4e47      	ldr	r6, [pc, #284]	; (8000a24 <HAL_GPIO_Init+0x1a0>)
 8000906:	6073      	str	r3, [r6, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000908:	68b3      	ldr	r3, [r6, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800090a:	684a      	ldr	r2, [r1, #4]
 800090c:	02d2      	lsls	r2, r2, #11
 800090e:	d479      	bmi.n	8000a04 <HAL_GPIO_Init+0x180>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000910:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8000912:	4e44      	ldr	r6, [pc, #272]	; (8000a24 <HAL_GPIO_Init+0x1a0>)
 8000914:	60b3      	str	r3, [r6, #8]

        temp = EXTI->FTSR;
 8000916:	68f3      	ldr	r3, [r6, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000918:	684a      	ldr	r2, [r1, #4]
 800091a:	0292      	lsls	r2, r2, #10
 800091c:	d475      	bmi.n	8000a0a <HAL_GPIO_Init+0x186>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800091e:	402b      	ands	r3, r5
 8000920:	001a      	movs	r2, r3
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8000922:	4b40      	ldr	r3, [pc, #256]	; (8000a24 <HAL_GPIO_Init+0x1a0>)
 8000924:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8000926:	3401      	adds	r4, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000928:	680a      	ldr	r2, [r1, #0]
 800092a:	0013      	movs	r3, r2
 800092c:	40e3      	lsrs	r3, r4
 800092e:	d06f      	beq.n	8000a10 <HAL_GPIO_Init+0x18c>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000930:	4646      	mov	r6, r8
 8000932:	40a6      	lsls	r6, r4
 8000934:	4032      	ands	r2, r6
 8000936:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 8000938:	d0f5      	beq.n	8000926 <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 800093a:	684b      	ldr	r3, [r1, #4]
 800093c:	4655      	mov	r5, sl
 800093e:	43ab      	bics	r3, r5
 8000940:	2b02      	cmp	r3, #2
 8000942:	d0bb      	beq.n	80008bc <HAL_GPIO_Init+0x38>
      temp = GPIOx->MODER;
 8000944:	6803      	ldr	r3, [r0, #0]
 8000946:	0067      	lsls	r7, r4, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000948:	464d      	mov	r5, r9
 800094a:	40bd      	lsls	r5, r7
 800094c:	43ed      	mvns	r5, r5
 800094e:	402b      	ands	r3, r5
 8000950:	469c      	mov	ip, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000952:	684b      	ldr	r3, [r1, #4]
 8000954:	464a      	mov	r2, r9
 8000956:	4013      	ands	r3, r2
 8000958:	40bb      	lsls	r3, r7
 800095a:	4662      	mov	r2, ip
 800095c:	4313      	orrs	r3, r2
      GPIOx->MODER = temp;
 800095e:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000960:	684b      	ldr	r3, [r1, #4]
 8000962:	4652      	mov	r2, sl
 8000964:	4393      	bics	r3, r2
 8000966:	3b01      	subs	r3, #1
 8000968:	2b01      	cmp	r3, #1
 800096a:	d811      	bhi.n	8000990 <HAL_GPIO_Init+0x10c>
        temp = GPIOx->OSPEEDR; 
 800096c:	6883      	ldr	r3, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800096e:	402b      	ands	r3, r5
 8000970:	469c      	mov	ip, r3
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000972:	68cb      	ldr	r3, [r1, #12]
 8000974:	40bb      	lsls	r3, r7
 8000976:	4662      	mov	r2, ip
 8000978:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
 800097a:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 800097c:	6843      	ldr	r3, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800097e:	43b3      	bics	r3, r6
 8000980:	001e      	movs	r6, r3
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000982:	684b      	ldr	r3, [r1, #4]
 8000984:	091b      	lsrs	r3, r3, #4
 8000986:	4642      	mov	r2, r8
 8000988:	4013      	ands	r3, r2
 800098a:	40a3      	lsls	r3, r4
 800098c:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 800098e:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 8000990:	68c3      	ldr	r3, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000992:	402b      	ands	r3, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000994:	688d      	ldr	r5, [r1, #8]
 8000996:	40bd      	lsls	r5, r7
 8000998:	431d      	orrs	r5, r3
      GPIOx->PUPDR = temp;
 800099a:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800099c:	684b      	ldr	r3, [r1, #4]
 800099e:	465a      	mov	r2, fp
 80009a0:	4213      	tst	r3, r2
 80009a2:	d0c0      	beq.n	8000926 <HAL_GPIO_Init+0xa2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a4:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <HAL_GPIO_Init+0x1a4>)
 80009a6:	699d      	ldr	r5, [r3, #24]
 80009a8:	4642      	mov	r2, r8
 80009aa:	4315      	orrs	r5, r2
 80009ac:	619d      	str	r5, [r3, #24]
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	4013      	ands	r3, r2
 80009b2:	9303      	str	r3, [sp, #12]
 80009b4:	9b03      	ldr	r3, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 80009b6:	08a3      	lsrs	r3, r4, #2
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	4a1c      	ldr	r2, [pc, #112]	; (8000a2c <HAL_GPIO_Init+0x1a8>)
 80009bc:	4694      	mov	ip, r2
 80009be:	4463      	add	r3, ip
 80009c0:	689d      	ldr	r5, [r3, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80009c2:	464e      	mov	r6, r9
 80009c4:	4026      	ands	r6, r4
 80009c6:	00b6      	lsls	r6, r6, #2
 80009c8:	270f      	movs	r7, #15
 80009ca:	40b7      	lsls	r7, r6
 80009cc:	43bd      	bics	r5, r7
 80009ce:	002f      	movs	r7, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009d0:	2590      	movs	r5, #144	; 0x90
 80009d2:	05ed      	lsls	r5, r5, #23
 80009d4:	42a8      	cmp	r0, r5
 80009d6:	d100      	bne.n	80009da <HAL_GPIO_Init+0x156>
 80009d8:	e780      	b.n	80008dc <HAL_GPIO_Init+0x58>
 80009da:	4d15      	ldr	r5, [pc, #84]	; (8000a30 <HAL_GPIO_Init+0x1ac>)
 80009dc:	42a8      	cmp	r0, r5
 80009de:	d007      	beq.n	80009f0 <HAL_GPIO_Init+0x16c>
 80009e0:	4d14      	ldr	r5, [pc, #80]	; (8000a34 <HAL_GPIO_Init+0x1b0>)
 80009e2:	42a8      	cmp	r0, r5
 80009e4:	d006      	beq.n	80009f4 <HAL_GPIO_Init+0x170>
 80009e6:	9d01      	ldr	r5, [sp, #4]
 80009e8:	4642      	mov	r2, r8
 80009ea:	4395      	bics	r5, r2
 80009ec:	3505      	adds	r5, #5
 80009ee:	e776      	b.n	80008de <HAL_GPIO_Init+0x5a>
 80009f0:	2501      	movs	r5, #1
 80009f2:	e774      	b.n	80008de <HAL_GPIO_Init+0x5a>
 80009f4:	2502      	movs	r5, #2
 80009f6:	e772      	b.n	80008de <HAL_GPIO_Init+0x5a>
          SET_BIT(temp, iocurrent); 
 80009f8:	9a00      	ldr	r2, [sp, #0]
 80009fa:	4313      	orrs	r3, r2
 80009fc:	e77b      	b.n	80008f6 <HAL_GPIO_Init+0x72>
          SET_BIT(temp, iocurrent); 
 80009fe:	9a00      	ldr	r2, [sp, #0]
 8000a00:	4313      	orrs	r3, r2
 8000a02:	e77f      	b.n	8000904 <HAL_GPIO_Init+0x80>
          SET_BIT(temp, iocurrent); 
 8000a04:	9a00      	ldr	r2, [sp, #0]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	e783      	b.n	8000912 <HAL_GPIO_Init+0x8e>
          SET_BIT(temp, iocurrent); 
 8000a0a:	9a00      	ldr	r2, [sp, #0]
 8000a0c:	431a      	orrs	r2, r3
 8000a0e:	e788      	b.n	8000922 <HAL_GPIO_Init+0x9e>
  } 
}
 8000a10:	b005      	add	sp, #20
 8000a12:	bc3c      	pop	{r2, r3, r4, r5}
 8000a14:	4690      	mov	r8, r2
 8000a16:	4699      	mov	r9, r3
 8000a18:	46a2      	mov	sl, r4
 8000a1a:	46ab      	mov	fp, r5
 8000a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	b7fff400 	.word	0xb7fff400
 8000a24:	40010400 	.word	0x40010400
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40010000 	.word	0x40010000
 8000a30:	48000400 	.word	0x48000400
 8000a34:	48000800 	.word	0x48000800

08000a38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a3a:	46ce      	mov	lr, r9
 8000a3c:	4647      	mov	r7, r8
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b083      	sub	sp, #12
 8000a42:	0004      	movs	r4, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a44:	6803      	ldr	r3, [r0, #0]
 8000a46:	07db      	lsls	r3, r3, #31
 8000a48:	d527      	bpl.n	8000a9a <HAL_RCC_OscConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a4a:	4bb9      	ldr	r3, [pc, #740]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000a4c:	685a      	ldr	r2, [r3, #4]
 8000a4e:	230c      	movs	r3, #12
 8000a50:	4013      	ands	r3, r2
 8000a52:	2b04      	cmp	r3, #4
 8000a54:	d018      	beq.n	8000a88 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a56:	4bb6      	ldr	r3, [pc, #728]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000a58:	685a      	ldr	r2, [r3, #4]
 8000a5a:	230c      	movs	r3, #12
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	2b08      	cmp	r3, #8
 8000a60:	d00e      	beq.n	8000a80 <HAL_RCC_OscConfig+0x48>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a62:	6863      	ldr	r3, [r4, #4]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d03f      	beq.n	8000ae8 <HAL_RCC_OscConfig+0xb0>
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d156      	bne.n	8000b1a <HAL_RCC_OscConfig+0xe2>
 8000a6c:	4bb0      	ldr	r3, [pc, #704]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000a6e:	681a      	ldr	r2, [r3, #0]
 8000a70:	49b0      	ldr	r1, [pc, #704]	; (8000d34 <HAL_RCC_OscConfig+0x2fc>)
 8000a72:	400a      	ands	r2, r1
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	49af      	ldr	r1, [pc, #700]	; (8000d38 <HAL_RCC_OscConfig+0x300>)
 8000a7a:	400a      	ands	r2, r1
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	e039      	b.n	8000af4 <HAL_RCC_OscConfig+0xbc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a80:	4bab      	ldr	r3, [pc, #684]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	03db      	lsls	r3, r3, #15
 8000a86:	d5ec      	bpl.n	8000a62 <HAL_RCC_OscConfig+0x2a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a88:	4ba9      	ldr	r3, [pc, #676]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	039b      	lsls	r3, r3, #14
 8000a8e:	d504      	bpl.n	8000a9a <HAL_RCC_OscConfig+0x62>
        return HAL_ERROR;
 8000a90:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a92:	6863      	ldr	r3, [r4, #4]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d100      	bne.n	8000a9a <HAL_RCC_OscConfig+0x62>
 8000a98:	e094      	b.n	8000bc4 <HAL_RCC_OscConfig+0x18c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a9a:	6823      	ldr	r3, [r4, #0]
 8000a9c:	079b      	lsls	r3, r3, #30
 8000a9e:	d578      	bpl.n	8000b92 <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000aa0:	4ba3      	ldr	r3, [pc, #652]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	220c      	movs	r2, #12
 8000aa6:	421a      	tst	r2, r3
 8000aa8:	d063      	beq.n	8000b72 <HAL_RCC_OscConfig+0x13a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000aaa:	4ba1      	ldr	r3, [pc, #644]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000aac:	685a      	ldr	r2, [r3, #4]
 8000aae:	230c      	movs	r3, #12
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	2b08      	cmp	r3, #8
 8000ab4:	d059      	beq.n	8000b6a <HAL_RCC_OscConfig+0x132>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ab6:	68e3      	ldr	r3, [r4, #12]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d100      	bne.n	8000abe <HAL_RCC_OscConfig+0x86>
 8000abc:	e090      	b.n	8000be0 <HAL_RCC_OscConfig+0x1a8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000abe:	4a9c      	ldr	r2, [pc, #624]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000ac0:	6813      	ldr	r3, [r2, #0]
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	430b      	orrs	r3, r1
 8000ac6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ac8:	f7ff fbd4 	bl	8000274 <HAL_GetTick>
 8000acc:	0007      	movs	r7, r0
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ace:	4e98      	ldr	r6, [pc, #608]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000ad0:	2502      	movs	r5, #2
 8000ad2:	6833      	ldr	r3, [r6, #0]
 8000ad4:	421d      	tst	r5, r3
 8000ad6:	d000      	beq.n	8000ada <HAL_RCC_OscConfig+0xa2>
 8000ad8:	e079      	b.n	8000bce <HAL_RCC_OscConfig+0x196>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ada:	f7ff fbcb 	bl	8000274 <HAL_GetTick>
 8000ade:	1bc0      	subs	r0, r0, r7
 8000ae0:	2802      	cmp	r0, #2
 8000ae2:	d9f6      	bls.n	8000ad2 <HAL_RCC_OscConfig+0x9a>
          {
            return HAL_TIMEOUT;
 8000ae4:	2003      	movs	r0, #3
 8000ae6:	e06d      	b.n	8000bc4 <HAL_RCC_OscConfig+0x18c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ae8:	4a91      	ldr	r2, [pc, #580]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000aea:	6811      	ldr	r1, [r2, #0]
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	025b      	lsls	r3, r3, #9
 8000af0:	430b      	orrs	r3, r1
 8000af2:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000af4:	6863      	ldr	r3, [r4, #4]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d027      	beq.n	8000b4a <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 8000afa:	f7ff fbbb 	bl	8000274 <HAL_GetTick>
 8000afe:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b00:	4e8b      	ldr	r6, [pc, #556]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000b02:	2580      	movs	r5, #128	; 0x80
 8000b04:	02ad      	lsls	r5, r5, #10
 8000b06:	6833      	ldr	r3, [r6, #0]
 8000b08:	422b      	tst	r3, r5
 8000b0a:	d1c6      	bne.n	8000a9a <HAL_RCC_OscConfig+0x62>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b0c:	f7ff fbb2 	bl	8000274 <HAL_GetTick>
 8000b10:	1bc0      	subs	r0, r0, r7
 8000b12:	2864      	cmp	r0, #100	; 0x64
 8000b14:	d9f7      	bls.n	8000b06 <HAL_RCC_OscConfig+0xce>
            return HAL_TIMEOUT;
 8000b16:	2003      	movs	r0, #3
 8000b18:	e054      	b.n	8000bc4 <HAL_RCC_OscConfig+0x18c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b1a:	2b05      	cmp	r3, #5
 8000b1c:	d009      	beq.n	8000b32 <HAL_RCC_OscConfig+0xfa>
 8000b1e:	4b84      	ldr	r3, [pc, #528]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	4984      	ldr	r1, [pc, #528]	; (8000d34 <HAL_RCC_OscConfig+0x2fc>)
 8000b24:	400a      	ands	r2, r1
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	4983      	ldr	r1, [pc, #524]	; (8000d38 <HAL_RCC_OscConfig+0x300>)
 8000b2c:	400a      	ands	r2, r1
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	e7e0      	b.n	8000af4 <HAL_RCC_OscConfig+0xbc>
 8000b32:	4b7f      	ldr	r3, [pc, #508]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000b34:	6819      	ldr	r1, [r3, #0]
 8000b36:	2280      	movs	r2, #128	; 0x80
 8000b38:	02d2      	lsls	r2, r2, #11
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	6819      	ldr	r1, [r3, #0]
 8000b40:	2280      	movs	r2, #128	; 0x80
 8000b42:	0252      	lsls	r2, r2, #9
 8000b44:	430a      	orrs	r2, r1
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	e7d4      	b.n	8000af4 <HAL_RCC_OscConfig+0xbc>
        tickstart = HAL_GetTick();
 8000b4a:	f7ff fb93 	bl	8000274 <HAL_GetTick>
 8000b4e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b50:	4e77      	ldr	r6, [pc, #476]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000b52:	2580      	movs	r5, #128	; 0x80
 8000b54:	02ad      	lsls	r5, r5, #10
 8000b56:	6833      	ldr	r3, [r6, #0]
 8000b58:	422b      	tst	r3, r5
 8000b5a:	d09e      	beq.n	8000a9a <HAL_RCC_OscConfig+0x62>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b5c:	f7ff fb8a 	bl	8000274 <HAL_GetTick>
 8000b60:	1bc0      	subs	r0, r0, r7
 8000b62:	2864      	cmp	r0, #100	; 0x64
 8000b64:	d9f7      	bls.n	8000b56 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8000b66:	2003      	movs	r0, #3
 8000b68:	e02c      	b.n	8000bc4 <HAL_RCC_OscConfig+0x18c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b6a:	4b71      	ldr	r3, [pc, #452]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	03db      	lsls	r3, r3, #15
 8000b70:	d4a1      	bmi.n	8000ab6 <HAL_RCC_OscConfig+0x7e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b72:	4b6f      	ldr	r3, [pc, #444]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	079b      	lsls	r3, r3, #30
 8000b78:	d503      	bpl.n	8000b82 <HAL_RCC_OscConfig+0x14a>
        return HAL_ERROR;
 8000b7a:	2001      	movs	r0, #1
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b7c:	68e3      	ldr	r3, [r4, #12]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d120      	bne.n	8000bc4 <HAL_RCC_OscConfig+0x18c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b82:	496b      	ldr	r1, [pc, #428]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000b84:	680a      	ldr	r2, [r1, #0]
 8000b86:	6923      	ldr	r3, [r4, #16]
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	20f8      	movs	r0, #248	; 0xf8
 8000b8c:	4382      	bics	r2, r0
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	600b      	str	r3, [r1, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b92:	6823      	ldr	r3, [r4, #0]
 8000b94:	071b      	lsls	r3, r3, #28
 8000b96:	d54b      	bpl.n	8000c30 <HAL_RCC_OscConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000b98:	69e3      	ldr	r3, [r4, #28]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d034      	beq.n	8000c08 <HAL_RCC_OscConfig+0x1d0>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b9e:	4a64      	ldr	r2, [pc, #400]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000ba0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	430b      	orrs	r3, r1
 8000ba6:	6253      	str	r3, [r2, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ba8:	f7ff fb64 	bl	8000274 <HAL_GetTick>
 8000bac:	0007      	movs	r7, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bae:	4e60      	ldr	r6, [pc, #384]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000bb0:	2502      	movs	r5, #2
 8000bb2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000bb4:	421d      	tst	r5, r3
 8000bb6:	d13b      	bne.n	8000c30 <HAL_RCC_OscConfig+0x1f8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bb8:	f7ff fb5c 	bl	8000274 <HAL_GetTick>
 8000bbc:	1bc0      	subs	r0, r0, r7
 8000bbe:	2802      	cmp	r0, #2
 8000bc0:	d9f7      	bls.n	8000bb2 <HAL_RCC_OscConfig+0x17a>
        {
          return HAL_TIMEOUT;
 8000bc2:	2003      	movs	r0, #3
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000bc4:	b003      	add	sp, #12
 8000bc6:	bc0c      	pop	{r2, r3}
 8000bc8:	4690      	mov	r8, r2
 8000bca:	4699      	mov	r9, r3
 8000bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bce:	4958      	ldr	r1, [pc, #352]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000bd0:	680a      	ldr	r2, [r1, #0]
 8000bd2:	6923      	ldr	r3, [r4, #16]
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	20f8      	movs	r0, #248	; 0xf8
 8000bd8:	4382      	bics	r2, r0
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	600b      	str	r3, [r1, #0]
 8000bde:	e7d8      	b.n	8000b92 <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8000be0:	4a53      	ldr	r2, [pc, #332]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000be2:	6813      	ldr	r3, [r2, #0]
 8000be4:	2101      	movs	r1, #1
 8000be6:	438b      	bics	r3, r1
 8000be8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000bea:	f7ff fb43 	bl	8000274 <HAL_GetTick>
 8000bee:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bf0:	4e4f      	ldr	r6, [pc, #316]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000bf2:	2502      	movs	r5, #2
 8000bf4:	6833      	ldr	r3, [r6, #0]
 8000bf6:	421d      	tst	r5, r3
 8000bf8:	d0cb      	beq.n	8000b92 <HAL_RCC_OscConfig+0x15a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bfa:	f7ff fb3b 	bl	8000274 <HAL_GetTick>
 8000bfe:	1bc0      	subs	r0, r0, r7
 8000c00:	2802      	cmp	r0, #2
 8000c02:	d9f7      	bls.n	8000bf4 <HAL_RCC_OscConfig+0x1bc>
            return HAL_TIMEOUT;
 8000c04:	2003      	movs	r0, #3
 8000c06:	e7dd      	b.n	8000bc4 <HAL_RCC_OscConfig+0x18c>
      __HAL_RCC_LSI_DISABLE();
 8000c08:	4a49      	ldr	r2, [pc, #292]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000c0a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	438b      	bics	r3, r1
 8000c10:	6253      	str	r3, [r2, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000c12:	f7ff fb2f 	bl	8000274 <HAL_GetTick>
 8000c16:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c18:	4e45      	ldr	r6, [pc, #276]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000c1a:	2502      	movs	r5, #2
 8000c1c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8000c1e:	421d      	tst	r5, r3
 8000c20:	d006      	beq.n	8000c30 <HAL_RCC_OscConfig+0x1f8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c22:	f7ff fb27 	bl	8000274 <HAL_GetTick>
 8000c26:	1bc0      	subs	r0, r0, r7
 8000c28:	2802      	cmp	r0, #2
 8000c2a:	d9f7      	bls.n	8000c1c <HAL_RCC_OscConfig+0x1e4>
          return HAL_TIMEOUT;
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	e7c9      	b.n	8000bc4 <HAL_RCC_OscConfig+0x18c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c30:	6823      	ldr	r3, [r4, #0]
 8000c32:	075b      	lsls	r3, r3, #29
 8000c34:	d400      	bmi.n	8000c38 <HAL_RCC_OscConfig+0x200>
 8000c36:	e088      	b.n	8000d4a <HAL_RCC_OscConfig+0x312>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c38:	4b3d      	ldr	r3, [pc, #244]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000c3a:	69db      	ldr	r3, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	4690      	mov	r8, r2
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	d40b      	bmi.n	8000c5c <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c44:	4a3a      	ldr	r2, [pc, #232]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000c46:	69d1      	ldr	r1, [r2, #28]
 8000c48:	2080      	movs	r0, #128	; 0x80
 8000c4a:	0540      	lsls	r0, r0, #21
 8000c4c:	4301      	orrs	r1, r0
 8000c4e:	61d1      	str	r1, [r2, #28]
 8000c50:	69d3      	ldr	r3, [r2, #28]
 8000c52:	4003      	ands	r3, r0
 8000c54:	9301      	str	r3, [sp, #4]
 8000c56:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	4698      	mov	r8, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c5c:	4b37      	ldr	r3, [pc, #220]	; (8000d3c <HAL_RCC_OscConfig+0x304>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	05db      	lsls	r3, r3, #23
 8000c62:	d50e      	bpl.n	8000c82 <HAL_RCC_OscConfig+0x24a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c64:	68a3      	ldr	r3, [r4, #8]
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d021      	beq.n	8000cae <HAL_RCC_OscConfig+0x276>
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d138      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x2a8>
 8000c6e:	4b30      	ldr	r3, [pc, #192]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000c70:	6a1a      	ldr	r2, [r3, #32]
 8000c72:	2101      	movs	r1, #1
 8000c74:	438a      	bics	r2, r1
 8000c76:	621a      	str	r2, [r3, #32]
 8000c78:	6a1a      	ldr	r2, [r3, #32]
 8000c7a:	3103      	adds	r1, #3
 8000c7c:	438a      	bics	r2, r1
 8000c7e:	621a      	str	r2, [r3, #32]
 8000c80:	e01a      	b.n	8000cb8 <HAL_RCC_OscConfig+0x280>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c82:	4a2e      	ldr	r2, [pc, #184]	; (8000d3c <HAL_RCC_OscConfig+0x304>)
 8000c84:	6811      	ldr	r1, [r2, #0]
 8000c86:	2380      	movs	r3, #128	; 0x80
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	430b      	orrs	r3, r1
 8000c8c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000c8e:	f7ff faf1 	bl	8000274 <HAL_GetTick>
 8000c92:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c94:	4f29      	ldr	r7, [pc, #164]	; (8000d3c <HAL_RCC_OscConfig+0x304>)
 8000c96:	2680      	movs	r6, #128	; 0x80
 8000c98:	0076      	lsls	r6, r6, #1
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	4233      	tst	r3, r6
 8000c9e:	d1e1      	bne.n	8000c64 <HAL_RCC_OscConfig+0x22c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ca0:	f7ff fae8 	bl	8000274 <HAL_GetTick>
 8000ca4:	1b40      	subs	r0, r0, r5
 8000ca6:	2864      	cmp	r0, #100	; 0x64
 8000ca8:	d9f7      	bls.n	8000c9a <HAL_RCC_OscConfig+0x262>
          return HAL_TIMEOUT;
 8000caa:	2003      	movs	r0, #3
 8000cac:	e78a      	b.n	8000bc4 <HAL_RCC_OscConfig+0x18c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cae:	4a20      	ldr	r2, [pc, #128]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000cb0:	6a13      	ldr	r3, [r2, #32]
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	430b      	orrs	r3, r1
 8000cb6:	6213      	str	r3, [r2, #32]
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000cb8:	68a3      	ldr	r3, [r4, #8]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d026      	beq.n	8000d0c <HAL_RCC_OscConfig+0x2d4>
      tickstart = HAL_GetTick();
 8000cbe:	f7ff fad9 	bl	8000274 <HAL_GetTick>
 8000cc2:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cc4:	4f1a      	ldr	r7, [pc, #104]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000cc6:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cc8:	4d1d      	ldr	r5, [pc, #116]	; (8000d40 <HAL_RCC_OscConfig+0x308>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cca:	6a3b      	ldr	r3, [r7, #32]
 8000ccc:	421e      	tst	r6, r3
 8000cce:	d139      	bne.n	8000d44 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cd0:	f7ff fad0 	bl	8000274 <HAL_GetTick>
 8000cd4:	464b      	mov	r3, r9
 8000cd6:	1ac0      	subs	r0, r0, r3
 8000cd8:	42a8      	cmp	r0, r5
 8000cda:	d9f6      	bls.n	8000cca <HAL_RCC_OscConfig+0x292>
          return HAL_TIMEOUT;
 8000cdc:	2003      	movs	r0, #3
 8000cde:	e771      	b.n	8000bc4 <HAL_RCC_OscConfig+0x18c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ce0:	2b05      	cmp	r3, #5
 8000ce2:	d009      	beq.n	8000cf8 <HAL_RCC_OscConfig+0x2c0>
 8000ce4:	4b12      	ldr	r3, [pc, #72]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000ce6:	6a1a      	ldr	r2, [r3, #32]
 8000ce8:	2101      	movs	r1, #1
 8000cea:	438a      	bics	r2, r1
 8000cec:	621a      	str	r2, [r3, #32]
 8000cee:	6a1a      	ldr	r2, [r3, #32]
 8000cf0:	3103      	adds	r1, #3
 8000cf2:	438a      	bics	r2, r1
 8000cf4:	621a      	str	r2, [r3, #32]
 8000cf6:	e7df      	b.n	8000cb8 <HAL_RCC_OscConfig+0x280>
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000cfa:	6a1a      	ldr	r2, [r3, #32]
 8000cfc:	2104      	movs	r1, #4
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	621a      	str	r2, [r3, #32]
 8000d02:	6a1a      	ldr	r2, [r3, #32]
 8000d04:	3903      	subs	r1, #3
 8000d06:	430a      	orrs	r2, r1
 8000d08:	621a      	str	r2, [r3, #32]
 8000d0a:	e7d5      	b.n	8000cb8 <HAL_RCC_OscConfig+0x280>
      tickstart = HAL_GetTick();
 8000d0c:	f7ff fab2 	bl	8000274 <HAL_GetTick>
 8000d10:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d12:	4f07      	ldr	r7, [pc, #28]	; (8000d30 <HAL_RCC_OscConfig+0x2f8>)
 8000d14:	2602      	movs	r6, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d16:	4d0a      	ldr	r5, [pc, #40]	; (8000d40 <HAL_RCC_OscConfig+0x308>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d18:	6a3b      	ldr	r3, [r7, #32]
 8000d1a:	421e      	tst	r6, r3
 8000d1c:	d012      	beq.n	8000d44 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d1e:	f7ff faa9 	bl	8000274 <HAL_GetTick>
 8000d22:	464b      	mov	r3, r9
 8000d24:	1ac0      	subs	r0, r0, r3
 8000d26:	42a8      	cmp	r0, r5
 8000d28:	d9f6      	bls.n	8000d18 <HAL_RCC_OscConfig+0x2e0>
          return HAL_TIMEOUT;
 8000d2a:	2003      	movs	r0, #3
 8000d2c:	e74a      	b.n	8000bc4 <HAL_RCC_OscConfig+0x18c>
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	40021000 	.word	0x40021000
 8000d34:	fffeffff 	.word	0xfffeffff
 8000d38:	fffbffff 	.word	0xfffbffff
 8000d3c:	40007000 	.word	0x40007000
 8000d40:	00001388 	.word	0x00001388
    if(pwrclkchanged == SET)
 8000d44:	4643      	mov	r3, r8
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d037      	beq.n	8000dba <HAL_RCC_OscConfig+0x382>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000d4a:	6823      	ldr	r3, [r4, #0]
 8000d4c:	06db      	lsls	r3, r3, #27
 8000d4e:	d510      	bpl.n	8000d72 <HAL_RCC_OscConfig+0x33a>
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000d50:	6963      	ldr	r3, [r4, #20]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d037      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x38e>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000d56:	3305      	adds	r3, #5
 8000d58:	d156      	bne.n	8000e08 <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000d5a:	4a57      	ldr	r2, [pc, #348]	; (8000eb8 <HAL_RCC_OscConfig+0x480>)
 8000d5c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000d5e:	2104      	movs	r1, #4
 8000d60:	438b      	bics	r3, r1
 8000d62:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000d64:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000d66:	69a3      	ldr	r3, [r4, #24]
 8000d68:	00db      	lsls	r3, r3, #3
 8000d6a:	20f8      	movs	r0, #248	; 0xf8
 8000d6c:	4381      	bics	r1, r0
 8000d6e:	430b      	orrs	r3, r1
 8000d70:	6353      	str	r3, [r2, #52]	; 0x34
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d72:	6a23      	ldr	r3, [r4, #32]
  return HAL_OK;
 8000d74:	2000      	movs	r0, #0
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d100      	bne.n	8000d7c <HAL_RCC_OscConfig+0x344>
 8000d7a:	e723      	b.n	8000bc4 <HAL_RCC_OscConfig+0x18c>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d7c:	4a4e      	ldr	r2, [pc, #312]	; (8000eb8 <HAL_RCC_OscConfig+0x480>)
 8000d7e:	6851      	ldr	r1, [r2, #4]
 8000d80:	220c      	movs	r2, #12
 8000d82:	400a      	ands	r2, r1
 8000d84:	2a08      	cmp	r2, #8
 8000d86:	d100      	bne.n	8000d8a <HAL_RCC_OscConfig+0x352>
 8000d88:	e093      	b.n	8000eb2 <HAL_RCC_OscConfig+0x47a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d054      	beq.n	8000e38 <HAL_RCC_OscConfig+0x400>
        __HAL_RCC_PLL_DISABLE();
 8000d8e:	4a4a      	ldr	r2, [pc, #296]	; (8000eb8 <HAL_RCC_OscConfig+0x480>)
 8000d90:	6813      	ldr	r3, [r2, #0]
 8000d92:	494a      	ldr	r1, [pc, #296]	; (8000ebc <HAL_RCC_OscConfig+0x484>)
 8000d94:	400b      	ands	r3, r1
 8000d96:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000d98:	f7ff fa6c 	bl	8000274 <HAL_GetTick>
 8000d9c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000d9e:	4d46      	ldr	r5, [pc, #280]	; (8000eb8 <HAL_RCC_OscConfig+0x480>)
 8000da0:	2480      	movs	r4, #128	; 0x80
 8000da2:	04a4      	lsls	r4, r4, #18
 8000da4:	682b      	ldr	r3, [r5, #0]
 8000da6:	4223      	tst	r3, r4
 8000da8:	d100      	bne.n	8000dac <HAL_RCC_OscConfig+0x374>
 8000daa:	e080      	b.n	8000eae <HAL_RCC_OscConfig+0x476>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dac:	f7ff fa62 	bl	8000274 <HAL_GetTick>
 8000db0:	1b80      	subs	r0, r0, r6
 8000db2:	2802      	cmp	r0, #2
 8000db4:	d9f6      	bls.n	8000da4 <HAL_RCC_OscConfig+0x36c>
            return HAL_TIMEOUT;
 8000db6:	2003      	movs	r0, #3
 8000db8:	e704      	b.n	8000bc4 <HAL_RCC_OscConfig+0x18c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dba:	4a3f      	ldr	r2, [pc, #252]	; (8000eb8 <HAL_RCC_OscConfig+0x480>)
 8000dbc:	69d3      	ldr	r3, [r2, #28]
 8000dbe:	4940      	ldr	r1, [pc, #256]	; (8000ec0 <HAL_RCC_OscConfig+0x488>)
 8000dc0:	400b      	ands	r3, r1
 8000dc2:	61d3      	str	r3, [r2, #28]
 8000dc4:	e7c1      	b.n	8000d4a <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000dc6:	4b3c      	ldr	r3, [pc, #240]	; (8000eb8 <HAL_RCC_OscConfig+0x480>)
 8000dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dca:	2104      	movs	r1, #4
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8000dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dd2:	3903      	subs	r1, #3
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000dd8:	f7ff fa4c 	bl	8000274 <HAL_GetTick>
 8000ddc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000dde:	4e36      	ldr	r6, [pc, #216]	; (8000eb8 <HAL_RCC_OscConfig+0x480>)
 8000de0:	2502      	movs	r5, #2
 8000de2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8000de4:	421d      	tst	r5, r3
 8000de6:	d106      	bne.n	8000df6 <HAL_RCC_OscConfig+0x3be>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000de8:	f7ff fa44 	bl	8000274 <HAL_GetTick>
 8000dec:	1bc0      	subs	r0, r0, r7
 8000dee:	2802      	cmp	r0, #2
 8000df0:	d9f7      	bls.n	8000de2 <HAL_RCC_OscConfig+0x3aa>
          return HAL_TIMEOUT;
 8000df2:	2003      	movs	r0, #3
 8000df4:	e6e6      	b.n	8000bc4 <HAL_RCC_OscConfig+0x18c>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000df6:	4930      	ldr	r1, [pc, #192]	; (8000eb8 <HAL_RCC_OscConfig+0x480>)
 8000df8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8000dfa:	69a3      	ldr	r3, [r4, #24]
 8000dfc:	00db      	lsls	r3, r3, #3
 8000dfe:	20f8      	movs	r0, #248	; 0xf8
 8000e00:	4382      	bics	r2, r0
 8000e02:	4313      	orrs	r3, r2
 8000e04:	634b      	str	r3, [r1, #52]	; 0x34
 8000e06:	e7b4      	b.n	8000d72 <HAL_RCC_OscConfig+0x33a>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000e08:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <HAL_RCC_OscConfig+0x480>)
 8000e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e0c:	2104      	movs	r1, #4
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	635a      	str	r2, [r3, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e14:	3903      	subs	r1, #3
 8000e16:	438a      	bics	r2, r1
 8000e18:	635a      	str	r2, [r3, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000e1a:	f7ff fa2b 	bl	8000274 <HAL_GetTick>
 8000e1e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000e20:	4e25      	ldr	r6, [pc, #148]	; (8000eb8 <HAL_RCC_OscConfig+0x480>)
 8000e22:	2502      	movs	r5, #2
 8000e24:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8000e26:	421d      	tst	r5, r3
 8000e28:	d0a3      	beq.n	8000d72 <HAL_RCC_OscConfig+0x33a>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000e2a:	f7ff fa23 	bl	8000274 <HAL_GetTick>
 8000e2e:	1bc0      	subs	r0, r0, r7
 8000e30:	2802      	cmp	r0, #2
 8000e32:	d9f7      	bls.n	8000e24 <HAL_RCC_OscConfig+0x3ec>
          return HAL_TIMEOUT;
 8000e34:	2003      	movs	r0, #3
 8000e36:	e6c5      	b.n	8000bc4 <HAL_RCC_OscConfig+0x18c>
        __HAL_RCC_PLL_DISABLE();
 8000e38:	4a1f      	ldr	r2, [pc, #124]	; (8000eb8 <HAL_RCC_OscConfig+0x480>)
 8000e3a:	6813      	ldr	r3, [r2, #0]
 8000e3c:	491f      	ldr	r1, [pc, #124]	; (8000ebc <HAL_RCC_OscConfig+0x484>)
 8000e3e:	400b      	ands	r3, r1
 8000e40:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8000e42:	f7ff fa17 	bl	8000274 <HAL_GetTick>
 8000e46:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e48:	4e1b      	ldr	r6, [pc, #108]	; (8000eb8 <HAL_RCC_OscConfig+0x480>)
 8000e4a:	2580      	movs	r5, #128	; 0x80
 8000e4c:	04ad      	lsls	r5, r5, #18
 8000e4e:	6833      	ldr	r3, [r6, #0]
 8000e50:	422b      	tst	r3, r5
 8000e52:	d006      	beq.n	8000e62 <HAL_RCC_OscConfig+0x42a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e54:	f7ff fa0e 	bl	8000274 <HAL_GetTick>
 8000e58:	1bc0      	subs	r0, r0, r7
 8000e5a:	2802      	cmp	r0, #2
 8000e5c:	d9f7      	bls.n	8000e4e <HAL_RCC_OscConfig+0x416>
            return HAL_TIMEOUT;
 8000e5e:	2003      	movs	r0, #3
 8000e60:	e6b0      	b.n	8000bc4 <HAL_RCC_OscConfig+0x18c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <HAL_RCC_OscConfig+0x480>)
 8000e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e66:	210f      	movs	r1, #15
 8000e68:	438a      	bics	r2, r1
 8000e6a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000e6c:	430a      	orrs	r2, r1
 8000e6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e70:	6859      	ldr	r1, [r3, #4]
 8000e72:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e74:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8000e76:	4302      	orrs	r2, r0
 8000e78:	4812      	ldr	r0, [pc, #72]	; (8000ec4 <HAL_RCC_OscConfig+0x48c>)
 8000e7a:	4001      	ands	r1, r0
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	605a      	str	r2, [r3, #4]
        __HAL_RCC_PLL_ENABLE();
 8000e80:	6819      	ldr	r1, [r3, #0]
 8000e82:	2280      	movs	r2, #128	; 0x80
 8000e84:	0452      	lsls	r2, r2, #17
 8000e86:	430a      	orrs	r2, r1
 8000e88:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e8a:	f7ff f9f3 	bl	8000274 <HAL_GetTick>
 8000e8e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e90:	4d09      	ldr	r5, [pc, #36]	; (8000eb8 <HAL_RCC_OscConfig+0x480>)
 8000e92:	2480      	movs	r4, #128	; 0x80
 8000e94:	04a4      	lsls	r4, r4, #18
 8000e96:	682b      	ldr	r3, [r5, #0]
 8000e98:	4223      	tst	r3, r4
 8000e9a:	d106      	bne.n	8000eaa <HAL_RCC_OscConfig+0x472>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e9c:	f7ff f9ea 	bl	8000274 <HAL_GetTick>
 8000ea0:	1b80      	subs	r0, r0, r6
 8000ea2:	2802      	cmp	r0, #2
 8000ea4:	d9f7      	bls.n	8000e96 <HAL_RCC_OscConfig+0x45e>
            return HAL_TIMEOUT;
 8000ea6:	2003      	movs	r0, #3
 8000ea8:	e68c      	b.n	8000bc4 <HAL_RCC_OscConfig+0x18c>
  return HAL_OK;
 8000eaa:	2000      	movs	r0, #0
 8000eac:	e68a      	b.n	8000bc4 <HAL_RCC_OscConfig+0x18c>
 8000eae:	2000      	movs	r0, #0
 8000eb0:	e688      	b.n	8000bc4 <HAL_RCC_OscConfig+0x18c>
      return HAL_ERROR;
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	e686      	b.n	8000bc4 <HAL_RCC_OscConfig+0x18c>
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	40021000 	.word	0x40021000
 8000ebc:	feffffff 	.word	0xfeffffff
 8000ec0:	efffffff 	.word	0xefffffff
 8000ec4:	ffc2ffff 	.word	0xffc2ffff

08000ec8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ec8:	b530      	push	{r4, r5, lr}
 8000eca:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000ecc:	aa04      	add	r2, sp, #16
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	c832      	ldmia	r0!, {r1, r4, r5}
 8000ed4:	c232      	stmia	r2!, {r1, r4, r5}
 8000ed6:	0011      	movs	r1, r2
 8000ed8:	6802      	ldr	r2, [r0, #0]
 8000eda:	600a      	str	r2, [r1, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000edc:	466a      	mov	r2, sp
 8000ede:	3310      	adds	r3, #16
 8000ee0:	cb13      	ldmia	r3!, {r0, r1, r4}
 8000ee2:	c213      	stmia	r2!, {r0, r1, r4}
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	6013      	str	r3, [r2, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <HAL_RCC_GetSysClockFreq+0x70>)
 8000eea:	685a      	ldr	r2, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000eec:	230c      	movs	r3, #12
 8000eee:	4013      	ands	r3, r2
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d01d      	beq.n	8000f30 <HAL_RCC_GetSysClockFreq+0x68>
 8000ef4:	2b08      	cmp	r3, #8
 8000ef6:	d002      	beq.n	8000efe <HAL_RCC_GetSysClockFreq+0x36>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000ef8:	4810      	ldr	r0, [pc, #64]	; (8000f3c <HAL_RCC_GetSysClockFreq+0x74>)
      break;
    }
  }
  return sysclockfreq;
}
 8000efa:	b009      	add	sp, #36	; 0x24
 8000efc:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000efe:	0c91      	lsrs	r1, r2, #18
 8000f00:	230f      	movs	r3, #15
 8000f02:	4019      	ands	r1, r3
 8000f04:	a804      	add	r0, sp, #16
 8000f06:	5c44      	ldrb	r4, [r0, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000f08:	490b      	ldr	r1, [pc, #44]	; (8000f38 <HAL_RCC_GetSysClockFreq+0x70>)
 8000f0a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8000f0c:	400b      	ands	r3, r1
 8000f0e:	4669      	mov	r1, sp
 8000f10:	5cc9      	ldrb	r1, [r1, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000f12:	03d3      	lsls	r3, r2, #15
 8000f14:	d504      	bpl.n	8000f20 <HAL_RCC_GetSysClockFreq+0x58>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000f16:	480a      	ldr	r0, [pc, #40]	; (8000f40 <HAL_RCC_GetSysClockFreq+0x78>)
 8000f18:	f7ff f8f6 	bl	8000108 <__udivsi3>
 8000f1c:	4360      	muls	r0, r4
 8000f1e:	e7ec      	b.n	8000efa <HAL_RCC_GetSysClockFreq+0x32>
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000f20:	0163      	lsls	r3, r4, #5
 8000f22:	1b1b      	subs	r3, r3, r4
 8000f24:	0198      	lsls	r0, r3, #6
 8000f26:	1ac0      	subs	r0, r0, r3
 8000f28:	00c0      	lsls	r0, r0, #3
 8000f2a:	1900      	adds	r0, r0, r4
 8000f2c:	0200      	lsls	r0, r0, #8
 8000f2e:	e7e4      	b.n	8000efa <HAL_RCC_GetSysClockFreq+0x32>
      sysclockfreq = HSE_VALUE;
 8000f30:	4803      	ldr	r0, [pc, #12]	; (8000f40 <HAL_RCC_GetSysClockFreq+0x78>)
  return sysclockfreq;
 8000f32:	e7e2      	b.n	8000efa <HAL_RCC_GetSysClockFreq+0x32>
 8000f34:	08002120 	.word	0x08002120
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	007a1200 	.word	0x007a1200
 8000f40:	017d7840 	.word	0x017d7840

08000f44 <HAL_RCC_ClockConfig>:
{
 8000f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f46:	46ce      	mov	lr, r9
 8000f48:	4647      	mov	r7, r8
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	0005      	movs	r5, r0
 8000f4e:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f50:	4b51      	ldr	r3, [pc, #324]	; (8001098 <HAL_RCC_ClockConfig+0x154>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	2301      	movs	r3, #1
 8000f56:	4013      	ands	r3, r2
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	d20e      	bcs.n	8000f7a <HAL_RCC_ClockConfig+0x36>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f5c:	494e      	ldr	r1, [pc, #312]	; (8001098 <HAL_RCC_ClockConfig+0x154>)
 8000f5e:	680b      	ldr	r3, [r1, #0]
 8000f60:	2201      	movs	r2, #1
 8000f62:	4393      	bics	r3, r2
 8000f64:	4323      	orrs	r3, r4
 8000f66:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f68:	680b      	ldr	r3, [r1, #0]
 8000f6a:	401a      	ands	r2, r3
      return HAL_ERROR;
 8000f6c:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f6e:	42a2      	cmp	r2, r4
 8000f70:	d003      	beq.n	8000f7a <HAL_RCC_ClockConfig+0x36>
}
 8000f72:	bc0c      	pop	{r2, r3}
 8000f74:	4690      	mov	r8, r2
 8000f76:	4699      	mov	r9, r3
 8000f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f7a:	682b      	ldr	r3, [r5, #0]
 8000f7c:	079b      	lsls	r3, r3, #30
 8000f7e:	d506      	bpl.n	8000f8e <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f80:	4a46      	ldr	r2, [pc, #280]	; (800109c <HAL_RCC_ClockConfig+0x158>)
 8000f82:	6853      	ldr	r3, [r2, #4]
 8000f84:	21f0      	movs	r1, #240	; 0xf0
 8000f86:	438b      	bics	r3, r1
 8000f88:	68a9      	ldr	r1, [r5, #8]
 8000f8a:	430b      	orrs	r3, r1
 8000f8c:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f8e:	682b      	ldr	r3, [r5, #0]
 8000f90:	07db      	lsls	r3, r3, #31
 8000f92:	d555      	bpl.n	8001040 <HAL_RCC_ClockConfig+0xfc>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f94:	686a      	ldr	r2, [r5, #4]
 8000f96:	2a01      	cmp	r2, #1
 8000f98:	d024      	beq.n	8000fe4 <HAL_RCC_ClockConfig+0xa0>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000f9a:	2a02      	cmp	r2, #2
 8000f9c:	d028      	beq.n	8000ff0 <HAL_RCC_ClockConfig+0xac>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f9e:	4b3f      	ldr	r3, [pc, #252]	; (800109c <HAL_RCC_ClockConfig+0x158>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
        return HAL_ERROR;
 8000fa2:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fa4:	079b      	lsls	r3, r3, #30
 8000fa6:	d5e4      	bpl.n	8000f72 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fa8:	493c      	ldr	r1, [pc, #240]	; (800109c <HAL_RCC_ClockConfig+0x158>)
 8000faa:	684b      	ldr	r3, [r1, #4]
 8000fac:	2003      	movs	r0, #3
 8000fae:	4383      	bics	r3, r0
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000fb4:	f7ff f95e 	bl	8000274 <HAL_GetTick>
 8000fb8:	0006      	movs	r6, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fba:	686b      	ldr	r3, [r5, #4]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d01d      	beq.n	8000ffc <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d02c      	beq.n	800101e <HAL_RCC_ClockConfig+0xda>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fc4:	4b35      	ldr	r3, [pc, #212]	; (800109c <HAL_RCC_ClockConfig+0x158>)
 8000fc6:	4698      	mov	r8, r3
 8000fc8:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fca:	4b35      	ldr	r3, [pc, #212]	; (80010a0 <HAL_RCC_ClockConfig+0x15c>)
 8000fcc:	4699      	mov	r9, r3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fce:	4643      	mov	r3, r8
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	421f      	tst	r7, r3
 8000fd4:	d034      	beq.n	8001040 <HAL_RCC_ClockConfig+0xfc>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fd6:	f7ff f94d 	bl	8000274 <HAL_GetTick>
 8000fda:	1b80      	subs	r0, r0, r6
 8000fdc:	4548      	cmp	r0, r9
 8000fde:	d9f6      	bls.n	8000fce <HAL_RCC_ClockConfig+0x8a>
          return HAL_TIMEOUT;
 8000fe0:	2003      	movs	r0, #3
 8000fe2:	e7c6      	b.n	8000f72 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe4:	4b2d      	ldr	r3, [pc, #180]	; (800109c <HAL_RCC_ClockConfig+0x158>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
        return HAL_ERROR;
 8000fe8:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fea:	039b      	lsls	r3, r3, #14
 8000fec:	d4dc      	bmi.n	8000fa8 <HAL_RCC_ClockConfig+0x64>
 8000fee:	e7c0      	b.n	8000f72 <HAL_RCC_ClockConfig+0x2e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ff0:	4b2a      	ldr	r3, [pc, #168]	; (800109c <HAL_RCC_ClockConfig+0x158>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
        return HAL_ERROR;
 8000ff4:	2001      	movs	r0, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ff6:	019b      	lsls	r3, r3, #6
 8000ff8:	d4d6      	bmi.n	8000fa8 <HAL_RCC_ClockConfig+0x64>
 8000ffa:	e7ba      	b.n	8000f72 <HAL_RCC_ClockConfig+0x2e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ffc:	4b27      	ldr	r3, [pc, #156]	; (800109c <HAL_RCC_ClockConfig+0x158>)
 8000ffe:	4698      	mov	r8, r3
 8001000:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001002:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <HAL_RCC_ClockConfig+0x15c>)
 8001004:	4699      	mov	r9, r3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001006:	4643      	mov	r3, r8
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	403b      	ands	r3, r7
 800100c:	2b04      	cmp	r3, #4
 800100e:	d017      	beq.n	8001040 <HAL_RCC_ClockConfig+0xfc>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001010:	f7ff f930 	bl	8000274 <HAL_GetTick>
 8001014:	1b80      	subs	r0, r0, r6
 8001016:	4548      	cmp	r0, r9
 8001018:	d9f5      	bls.n	8001006 <HAL_RCC_ClockConfig+0xc2>
          return HAL_TIMEOUT;
 800101a:	2003      	movs	r0, #3
 800101c:	e7a9      	b.n	8000f72 <HAL_RCC_ClockConfig+0x2e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800101e:	4b1f      	ldr	r3, [pc, #124]	; (800109c <HAL_RCC_ClockConfig+0x158>)
 8001020:	4698      	mov	r8, r3
 8001022:	270c      	movs	r7, #12
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001024:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <HAL_RCC_ClockConfig+0x15c>)
 8001026:	4699      	mov	r9, r3
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001028:	4643      	mov	r3, r8
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	403b      	ands	r3, r7
 800102e:	2b08      	cmp	r3, #8
 8001030:	d006      	beq.n	8001040 <HAL_RCC_ClockConfig+0xfc>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001032:	f7ff f91f 	bl	8000274 <HAL_GetTick>
 8001036:	1b80      	subs	r0, r0, r6
 8001038:	4548      	cmp	r0, r9
 800103a:	d9f5      	bls.n	8001028 <HAL_RCC_ClockConfig+0xe4>
          return HAL_TIMEOUT;
 800103c:	2003      	movs	r0, #3
 800103e:	e798      	b.n	8000f72 <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001040:	4b15      	ldr	r3, [pc, #84]	; (8001098 <HAL_RCC_ClockConfig+0x154>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	2301      	movs	r3, #1
 8001046:	4013      	ands	r3, r2
 8001048:	42a3      	cmp	r3, r4
 800104a:	d90b      	bls.n	8001064 <HAL_RCC_ClockConfig+0x120>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800104c:	4912      	ldr	r1, [pc, #72]	; (8001098 <HAL_RCC_ClockConfig+0x154>)
 800104e:	680b      	ldr	r3, [r1, #0]
 8001050:	2201      	movs	r2, #1
 8001052:	4393      	bics	r3, r2
 8001054:	4323      	orrs	r3, r4
 8001056:	600b      	str	r3, [r1, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001058:	680b      	ldr	r3, [r1, #0]
 800105a:	401a      	ands	r2, r3
      return HAL_ERROR;
 800105c:	2001      	movs	r0, #1
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800105e:	42a2      	cmp	r2, r4
 8001060:	d000      	beq.n	8001064 <HAL_RCC_ClockConfig+0x120>
 8001062:	e786      	b.n	8000f72 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001064:	682b      	ldr	r3, [r5, #0]
 8001066:	075b      	lsls	r3, r3, #29
 8001068:	d506      	bpl.n	8001078 <HAL_RCC_ClockConfig+0x134>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800106a:	4a0c      	ldr	r2, [pc, #48]	; (800109c <HAL_RCC_ClockConfig+0x158>)
 800106c:	6853      	ldr	r3, [r2, #4]
 800106e:	490d      	ldr	r1, [pc, #52]	; (80010a4 <HAL_RCC_ClockConfig+0x160>)
 8001070:	400b      	ands	r3, r1
 8001072:	68e9      	ldr	r1, [r5, #12]
 8001074:	430b      	orrs	r3, r1
 8001076:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001078:	f7ff ff26 	bl	8000ec8 <HAL_RCC_GetSysClockFreq>
 800107c:	4b07      	ldr	r3, [pc, #28]	; (800109c <HAL_RCC_ClockConfig+0x158>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	061b      	lsls	r3, r3, #24
 8001082:	0f1b      	lsrs	r3, r3, #28
 8001084:	4a08      	ldr	r2, [pc, #32]	; (80010a8 <HAL_RCC_ClockConfig+0x164>)
 8001086:	5cd3      	ldrb	r3, [r2, r3]
 8001088:	40d8      	lsrs	r0, r3
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <HAL_RCC_ClockConfig+0x168>)
 800108c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800108e:	2001      	movs	r0, #1
 8001090:	f7ff f8c6 	bl	8000220 <HAL_InitTick>
  return HAL_OK;
 8001094:	2000      	movs	r0, #0
 8001096:	e76c      	b.n	8000f72 <HAL_RCC_ClockConfig+0x2e>
 8001098:	40022000 	.word	0x40022000
 800109c:	40021000 	.word	0x40021000
 80010a0:	00001388 	.word	0x00001388
 80010a4:	fffff8ff 	.word	0xfffff8ff
 80010a8:	08002140 	.word	0x08002140
 80010ac:	20000000 	.word	0x20000000

080010b0 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80010b0:	4b01      	ldr	r3, [pc, #4]	; (80010b8 <HAL_RCC_GetHCLKFreq+0x8>)
 80010b2:	6818      	ldr	r0, [r3, #0]
}
 80010b4:	4770      	bx	lr
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	20000000 	.word	0x20000000

080010bc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	055b      	lsls	r3, r3, #21
 80010c2:	0f5b      	lsrs	r3, r3, #29
 80010c4:	4a03      	ldr	r2, [pc, #12]	; (80010d4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80010c6:	5cd3      	ldrb	r3, [r2, r3]
 80010c8:	4a03      	ldr	r2, [pc, #12]	; (80010d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80010ca:	6810      	ldr	r0, [r2, #0]
 80010cc:	40d8      	lsrs	r0, r3
}    
 80010ce:	4770      	bx	lr
 80010d0:	40021000 	.word	0x40021000
 80010d4:	08002150 	.word	0x08002150
 80010d8:	20000000 	.word	0x20000000

080010dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80010dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010de:	46ce      	mov	lr, r9
 80010e0:	4647      	mov	r7, r8
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b083      	sub	sp, #12
 80010e6:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80010e8:	6803      	ldr	r3, [r0, #0]
 80010ea:	03db      	lsls	r3, r3, #15
 80010ec:	d536      	bpl.n	800115c <HAL_RCCEx_PeriphCLKConfig+0x80>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010ee:	4b3f      	ldr	r3, [pc, #252]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80010f0:	69db      	ldr	r3, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 80010f2:	2500      	movs	r5, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	d40a      	bmi.n	800110e <HAL_RCCEx_PeriphCLKConfig+0x32>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80010f8:	4a3c      	ldr	r2, [pc, #240]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80010fa:	69d1      	ldr	r1, [r2, #28]
 80010fc:	2080      	movs	r0, #128	; 0x80
 80010fe:	0540      	lsls	r0, r0, #21
 8001100:	4301      	orrs	r1, r0
 8001102:	61d1      	str	r1, [r2, #28]
 8001104:	69d3      	ldr	r3, [r2, #28]
 8001106:	4003      	ands	r3, r0
 8001108:	9301      	str	r3, [sp, #4]
 800110a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800110c:	3501      	adds	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800110e:	4b38      	ldr	r3, [pc, #224]	; (80011f0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	05db      	lsls	r3, r3, #23
 8001114:	d53c      	bpl.n	8001190 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001116:	4b35      	ldr	r3, [pc, #212]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001118:	6a1b      	ldr	r3, [r3, #32]
 800111a:	22c0      	movs	r2, #192	; 0xc0
 800111c:	0092      	lsls	r2, r2, #2
 800111e:	4013      	ands	r3, r2
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001120:	d013      	beq.n	800114a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8001122:	6861      	ldr	r1, [r4, #4]
 8001124:	400a      	ands	r2, r1
 8001126:	429a      	cmp	r2, r3
 8001128:	d00f      	beq.n	800114a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800112a:	4b30      	ldr	r3, [pc, #192]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800112c:	6a18      	ldr	r0, [r3, #32]
 800112e:	4a31      	ldr	r2, [pc, #196]	; (80011f4 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001130:	4002      	ands	r2, r0
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001132:	6a1e      	ldr	r6, [r3, #32]
 8001134:	2180      	movs	r1, #128	; 0x80
 8001136:	0249      	lsls	r1, r1, #9
 8001138:	4331      	orrs	r1, r6
 800113a:	6219      	str	r1, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800113c:	6a19      	ldr	r1, [r3, #32]
 800113e:	4e2e      	ldr	r6, [pc, #184]	; (80011f8 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8001140:	4031      	ands	r1, r6
 8001142:	6219      	str	r1, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001144:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001146:	07c3      	lsls	r3, r0, #31
 8001148:	d439      	bmi.n	80011be <HAL_RCCEx_PeriphCLKConfig+0xe2>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800114a:	4a28      	ldr	r2, [pc, #160]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800114c:	6a13      	ldr	r3, [r2, #32]
 800114e:	4929      	ldr	r1, [pc, #164]	; (80011f4 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8001150:	400b      	ands	r3, r1
 8001152:	6861      	ldr	r1, [r4, #4]
 8001154:	430b      	orrs	r3, r1
 8001156:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001158:	2d01      	cmp	r5, #1
 800115a:	d042      	beq.n	80011e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800115c:	6823      	ldr	r3, [r4, #0]
 800115e:	07db      	lsls	r3, r3, #31
 8001160:	d506      	bpl.n	8001170 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001162:	4a22      	ldr	r2, [pc, #136]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8001164:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001166:	2103      	movs	r1, #3
 8001168:	438b      	bics	r3, r1
 800116a:	68a1      	ldr	r1, [r4, #8]
 800116c:	430b      	orrs	r3, r1
 800116e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001170:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001172:	6823      	ldr	r3, [r4, #0]
 8001174:	069b      	lsls	r3, r3, #26
 8001176:	d506      	bpl.n	8001186 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001178:	4a1c      	ldr	r2, [pc, #112]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800117a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800117c:	2110      	movs	r1, #16
 800117e:	438b      	bics	r3, r1
 8001180:	68e1      	ldr	r1, [r4, #12]
 8001182:	430b      	orrs	r3, r1
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001186:	b003      	add	sp, #12
 8001188:	bc0c      	pop	{r2, r3}
 800118a:	4690      	mov	r8, r2
 800118c:	4699      	mov	r9, r3
 800118e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001190:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8001192:	6811      	ldr	r1, [r2, #0]
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	430b      	orrs	r3, r1
 800119a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800119c:	f7ff f86a 	bl	8000274 <HAL_GetTick>
 80011a0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a2:	4f13      	ldr	r7, [pc, #76]	; (80011f0 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 80011a4:	2680      	movs	r6, #128	; 0x80
 80011a6:	0076      	lsls	r6, r6, #1
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	4233      	tst	r3, r6
 80011ac:	d1b3      	bne.n	8001116 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ae:	f7ff f861 	bl	8000274 <HAL_GetTick>
 80011b2:	4643      	mov	r3, r8
 80011b4:	1ac0      	subs	r0, r0, r3
 80011b6:	2864      	cmp	r0, #100	; 0x64
 80011b8:	d9f6      	bls.n	80011a8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
          return HAL_TIMEOUT;
 80011ba:	2003      	movs	r0, #3
 80011bc:	e7e3      	b.n	8001186 <HAL_RCCEx_PeriphCLKConfig+0xaa>
        tickstart = HAL_GetTick();
 80011be:	f7ff f859 	bl	8000274 <HAL_GetTick>
 80011c2:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011c4:	4f09      	ldr	r7, [pc, #36]	; (80011ec <HAL_RCCEx_PeriphCLKConfig+0x110>)
 80011c6:	2602      	movs	r6, #2
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011c8:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80011ca:	4698      	mov	r8, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011cc:	6a3b      	ldr	r3, [r7, #32]
 80011ce:	421e      	tst	r6, r3
 80011d0:	d1bb      	bne.n	800114a <HAL_RCCEx_PeriphCLKConfig+0x6e>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011d2:	f7ff f84f 	bl	8000274 <HAL_GetTick>
 80011d6:	464b      	mov	r3, r9
 80011d8:	1ac0      	subs	r0, r0, r3
 80011da:	4540      	cmp	r0, r8
 80011dc:	d9f6      	bls.n	80011cc <HAL_RCCEx_PeriphCLKConfig+0xf0>
            return HAL_TIMEOUT;
 80011de:	2003      	movs	r0, #3
 80011e0:	e7d1      	b.n	8001186 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011e2:	69d3      	ldr	r3, [r2, #28]
 80011e4:	4906      	ldr	r1, [pc, #24]	; (8001200 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80011e6:	400b      	ands	r3, r1
 80011e8:	61d3      	str	r3, [r2, #28]
 80011ea:	e7b7      	b.n	800115c <HAL_RCCEx_PeriphCLKConfig+0x80>
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40007000 	.word	0x40007000
 80011f4:	fffffcff 	.word	0xfffffcff
 80011f8:	fffeffff 	.word	0xfffeffff
 80011fc:	00001388 	.word	0x00001388
 8001200:	efffffff 	.word	0xefffffff

08001204 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001204:	6802      	ldr	r2, [r0, #0]
 8001206:	6813      	ldr	r3, [r2, #0]
 8001208:	4906      	ldr	r1, [pc, #24]	; (8001224 <UART_EndRxTransfer+0x20>)
 800120a:	400b      	ands	r3, r1
 800120c:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800120e:	6802      	ldr	r2, [r0, #0]
 8001210:	6893      	ldr	r3, [r2, #8]
 8001212:	3123      	adds	r1, #35	; 0x23
 8001214:	31ff      	adds	r1, #255	; 0xff
 8001216:	438b      	bics	r3, r1
 8001218:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800121a:	236a      	movs	r3, #106	; 0x6a
 800121c:	2220      	movs	r2, #32
 800121e:	54c2      	strb	r2, [r0, r3]
}
 8001220:	4770      	bx	lr
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	fffffedf 	.word	0xfffffedf

08001228 <HAL_UART_Transmit_IT>:
{
 8001228:	b510      	push	{r4, lr}
  if(huart->gState == HAL_UART_STATE_READY)
 800122a:	2369      	movs	r3, #105	; 0x69
 800122c:	5cc4      	ldrb	r4, [r0, r3]
    return HAL_BUSY;
 800122e:	3b67      	subs	r3, #103	; 0x67
  if(huart->gState == HAL_UART_STATE_READY)
 8001230:	2c20      	cmp	r4, #32
 8001232:	d11f      	bne.n	8001274 <HAL_UART_Transmit_IT+0x4c>
    if((pData == NULL ) || (Size == 0U))
 8001234:	2900      	cmp	r1, #0
 8001236:	d026      	beq.n	8001286 <HAL_UART_Transmit_IT+0x5e>
      return HAL_ERROR;
 8001238:	3b01      	subs	r3, #1
    if((pData == NULL ) || (Size == 0U))
 800123a:	2a00      	cmp	r2, #0
 800123c:	d01a      	beq.n	8001274 <HAL_UART_Transmit_IT+0x4c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800123e:	2380      	movs	r3, #128	; 0x80
 8001240:	015b      	lsls	r3, r3, #5
 8001242:	6884      	ldr	r4, [r0, #8]
 8001244:	429c      	cmp	r4, r3
 8001246:	d017      	beq.n	8001278 <HAL_UART_Transmit_IT+0x50>
    __HAL_LOCK(huart);
 8001248:	2368      	movs	r3, #104	; 0x68
 800124a:	5cc3      	ldrb	r3, [r0, r3]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d01c      	beq.n	800128a <HAL_UART_Transmit_IT+0x62>
    huart->pTxBuffPtr = pData;
 8001250:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize = Size;
 8001252:	2350      	movs	r3, #80	; 0x50
 8001254:	52c2      	strh	r2, [r0, r3]
    huart->TxXferCount = Size;
 8001256:	3302      	adds	r3, #2
 8001258:	52c2      	strh	r2, [r0, r3]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800125a:	2300      	movs	r3, #0
 800125c:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800125e:	2269      	movs	r2, #105	; 0x69
 8001260:	2121      	movs	r1, #33	; 0x21
 8001262:	5481      	strb	r1, [r0, r2]
    __HAL_UNLOCK(huart);
 8001264:	3a01      	subs	r2, #1
 8001266:	5483      	strb	r3, [r0, r2]
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001268:	6802      	ldr	r2, [r0, #0]
 800126a:	6813      	ldr	r3, [r2, #0]
 800126c:	315f      	adds	r1, #95	; 0x5f
 800126e:	430b      	orrs	r3, r1
 8001270:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	0018      	movs	r0, r3
 8001276:	bd10      	pop	{r4, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001278:	6903      	ldr	r3, [r0, #16]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1e4      	bne.n	8001248 <HAL_UART_Transmit_IT+0x20>
        return  HAL_ERROR;
 800127e:	3301      	adds	r3, #1
      if((((uint32_t)pData)&1U) != 0U)
 8001280:	07cc      	lsls	r4, r1, #31
 8001282:	d5e1      	bpl.n	8001248 <HAL_UART_Transmit_IT+0x20>
 8001284:	e7f6      	b.n	8001274 <HAL_UART_Transmit_IT+0x4c>
      return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e7f4      	b.n	8001274 <HAL_UART_Transmit_IT+0x4c>
    __HAL_LOCK(huart);
 800128a:	2302      	movs	r3, #2
 800128c:	e7f2      	b.n	8001274 <HAL_UART_Transmit_IT+0x4c>
	...

08001290 <HAL_UART_Receive_IT>:
{
 8001290:	b530      	push	{r4, r5, lr}
  if(huart->RxState == HAL_UART_STATE_READY)
 8001292:	236a      	movs	r3, #106	; 0x6a
 8001294:	5cc4      	ldrb	r4, [r0, r3]
    return HAL_BUSY;
 8001296:	3b68      	subs	r3, #104	; 0x68
  if(huart->RxState == HAL_UART_STATE_READY)
 8001298:	2c20      	cmp	r4, #32
 800129a:	d12a      	bne.n	80012f2 <HAL_UART_Receive_IT+0x62>
    if((pData == NULL ) || (Size == 0U))
 800129c:	2900      	cmp	r1, #0
 800129e:	d049      	beq.n	8001334 <HAL_UART_Receive_IT+0xa4>
      return HAL_ERROR;
 80012a0:	3b01      	subs	r3, #1
    if((pData == NULL ) || (Size == 0U))
 80012a2:	2a00      	cmp	r2, #0
 80012a4:	d025      	beq.n	80012f2 <HAL_UART_Receive_IT+0x62>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80012a6:	6883      	ldr	r3, [r0, #8]
 80012a8:	2480      	movs	r4, #128	; 0x80
 80012aa:	0164      	lsls	r4, r4, #5
 80012ac:	42a3      	cmp	r3, r4
 80012ae:	d022      	beq.n	80012f6 <HAL_UART_Receive_IT+0x66>
    __HAL_LOCK(huart);
 80012b0:	2468      	movs	r4, #104	; 0x68
 80012b2:	5d04      	ldrb	r4, [r0, r4]
 80012b4:	2c01      	cmp	r4, #1
 80012b6:	d03f      	beq.n	8001338 <HAL_UART_Receive_IT+0xa8>
 80012b8:	2468      	movs	r4, #104	; 0x68
 80012ba:	2501      	movs	r5, #1
 80012bc:	5505      	strb	r5, [r0, r4]
    huart->pRxBuffPtr = pData;
 80012be:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 80012c0:	2158      	movs	r1, #88	; 0x58
 80012c2:	5242      	strh	r2, [r0, r1]
    huart->RxXferCount = Size;
 80012c4:	3102      	adds	r1, #2
 80012c6:	5242      	strh	r2, [r0, r1]
    UART_MASK_COMPUTATION(huart);
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d028      	beq.n	800131e <HAL_UART_Receive_IT+0x8e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80012d0:	226a      	movs	r2, #106	; 0x6a
 80012d2:	2122      	movs	r1, #34	; 0x22
 80012d4:	5481      	strb	r1, [r0, r2]
    __HAL_UNLOCK(huart);
 80012d6:	3a02      	subs	r2, #2
 80012d8:	5483      	strb	r3, [r0, r2]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012da:	6802      	ldr	r2, [r0, #0]
 80012dc:	6893      	ldr	r3, [r2, #8]
 80012de:	3921      	subs	r1, #33	; 0x21
 80012e0:	430b      	orrs	r3, r1
 80012e2:	6093      	str	r3, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80012e4:	6802      	ldr	r2, [r0, #0]
 80012e6:	6811      	ldr	r1, [r2, #0]
 80012e8:	2390      	movs	r3, #144	; 0x90
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	430b      	orrs	r3, r1
 80012ee:	6013      	str	r3, [r2, #0]
    return HAL_OK;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	0018      	movs	r0, r3
 80012f4:	bd30      	pop	{r4, r5, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80012f6:	6903      	ldr	r3, [r0, #16]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d121      	bne.n	8001340 <HAL_UART_Receive_IT+0xb0>
        return  HAL_ERROR;
 80012fc:	3301      	adds	r3, #1
      if((((uint32_t)pData)&1U) != 0U)
 80012fe:	07cc      	lsls	r4, r1, #31
 8001300:	d4f7      	bmi.n	80012f2 <HAL_UART_Receive_IT+0x62>
    __HAL_LOCK(huart);
 8001302:	2368      	movs	r3, #104	; 0x68
 8001304:	5cc4      	ldrb	r4, [r0, r3]
 8001306:	3b66      	subs	r3, #102	; 0x66
 8001308:	2c01      	cmp	r4, #1
 800130a:	d0f2      	beq.n	80012f2 <HAL_UART_Receive_IT+0x62>
    huart->pRxBuffPtr = pData;
 800130c:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 800130e:	2358      	movs	r3, #88	; 0x58
 8001310:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 8001312:	3302      	adds	r3, #2
 8001314:	52c2      	strh	r2, [r0, r3]
    UART_MASK_COMPUTATION(huart);
 8001316:	3302      	adds	r3, #2
 8001318:	4a10      	ldr	r2, [pc, #64]	; (800135c <HAL_UART_Receive_IT+0xcc>)
 800131a:	52c2      	strh	r2, [r0, r3]
 800131c:	e7d6      	b.n	80012cc <HAL_UART_Receive_IT+0x3c>
 800131e:	6903      	ldr	r3, [r0, #16]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d103      	bne.n	800132c <HAL_UART_Receive_IT+0x9c>
 8001324:	335c      	adds	r3, #92	; 0x5c
 8001326:	22ff      	movs	r2, #255	; 0xff
 8001328:	52c2      	strh	r2, [r0, r3]
 800132a:	e7cf      	b.n	80012cc <HAL_UART_Receive_IT+0x3c>
 800132c:	235c      	movs	r3, #92	; 0x5c
 800132e:	227f      	movs	r2, #127	; 0x7f
 8001330:	52c2      	strh	r2, [r0, r3]
 8001332:	e7cb      	b.n	80012cc <HAL_UART_Receive_IT+0x3c>
      return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e7dc      	b.n	80012f2 <HAL_UART_Receive_IT+0x62>
    __HAL_LOCK(huart);
 8001338:	2302      	movs	r3, #2
 800133a:	e7da      	b.n	80012f2 <HAL_UART_Receive_IT+0x62>
 800133c:	2302      	movs	r3, #2
 800133e:	e7d8      	b.n	80012f2 <HAL_UART_Receive_IT+0x62>
 8001340:	2368      	movs	r3, #104	; 0x68
 8001342:	5cc3      	ldrb	r3, [r0, r3]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d0f9      	beq.n	800133c <HAL_UART_Receive_IT+0xac>
    huart->pRxBuffPtr = pData;
 8001348:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
 800134a:	2358      	movs	r3, #88	; 0x58
 800134c:	52c2      	strh	r2, [r0, r3]
    huart->RxXferCount = Size;
 800134e:	3302      	adds	r3, #2
 8001350:	52c2      	strh	r2, [r0, r3]
    UART_MASK_COMPUTATION(huart);
 8001352:	3302      	adds	r3, #2
 8001354:	22ff      	movs	r2, #255	; 0xff
 8001356:	52c2      	strh	r2, [r0, r3]
 8001358:	e7b8      	b.n	80012cc <HAL_UART_Receive_IT+0x3c>
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	000001ff 	.word	0x000001ff

08001360 <HAL_UART_ErrorCallback>:
}
 8001360:	4770      	bx	lr

08001362 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001362:	b510      	push	{r4, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8001364:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8001366:	2300      	movs	r3, #0
 8001368:	225a      	movs	r2, #90	; 0x5a
 800136a:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 800136c:	3a08      	subs	r2, #8
 800136e:	5283      	strh	r3, [r0, r2]

  HAL_UART_ErrorCallback(huart);
 8001370:	f7ff fff6 	bl	8001360 <HAL_UART_ErrorCallback>
}
 8001374:	bd10      	pop	{r4, pc}
	...

08001378 <UART_SetConfig>:
{
 8001378:	b510      	push	{r4, lr}
 800137a:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800137c:	6801      	ldr	r1, [r0, #0]
 800137e:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001380:	6883      	ldr	r3, [r0, #8]
 8001382:	6900      	ldr	r0, [r0, #16]
 8001384:	4303      	orrs	r3, r0
 8001386:	6960      	ldr	r0, [r4, #20]
 8001388:	4303      	orrs	r3, r0
 800138a:	69e0      	ldr	r0, [r4, #28]
 800138c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800138e:	4856      	ldr	r0, [pc, #344]	; (80014e8 <UART_SetConfig+0x170>)
 8001390:	4002      	ands	r2, r0
 8001392:	4313      	orrs	r3, r2
 8001394:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001396:	6822      	ldr	r2, [r4, #0]
 8001398:	6853      	ldr	r3, [r2, #4]
 800139a:	4954      	ldr	r1, [pc, #336]	; (80014ec <UART_SetConfig+0x174>)
 800139c:	400b      	ands	r3, r1
 800139e:	68e1      	ldr	r1, [r4, #12]
 80013a0:	430b      	orrs	r3, r1
 80013a2:	6053      	str	r3, [r2, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80013a4:	6821      	ldr	r1, [r4, #0]
 80013a6:	688a      	ldr	r2, [r1, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80013a8:	69a3      	ldr	r3, [r4, #24]
 80013aa:	6a20      	ldr	r0, [r4, #32]
 80013ac:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80013ae:	4850      	ldr	r0, [pc, #320]	; (80014f0 <UART_SetConfig+0x178>)
 80013b0:	4002      	ands	r2, r0
 80013b2:	4313      	orrs	r3, r2
 80013b4:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80013b6:	4b4f      	ldr	r3, [pc, #316]	; (80014f4 <UART_SetConfig+0x17c>)
 80013b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ba:	2303      	movs	r3, #3
 80013bc:	4013      	ands	r3, r2
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d067      	beq.n	8001492 <UART_SetConfig+0x11a>
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00a      	beq.n	80013dc <UART_SetConfig+0x64>
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d050      	beq.n	800146c <UART_SetConfig+0xf4>
 80013ca:	2b03      	cmp	r3, #3
 80013cc:	d03c      	beq.n	8001448 <UART_SetConfig+0xd0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013ce:	2380      	movs	r3, #128	; 0x80
 80013d0:	021b      	lsls	r3, r3, #8
 80013d2:	69e2      	ldr	r2, [r4, #28]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d034      	beq.n	8001442 <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 80013d8:	2001      	movs	r0, #1
 80013da:	e025      	b.n	8001428 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013dc:	2380      	movs	r3, #128	; 0x80
 80013de:	021b      	lsls	r3, r3, #8
 80013e0:	69e2      	ldr	r2, [r4, #28]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d100      	bne.n	80013e8 <UART_SetConfig+0x70>
 80013e6:	e072      	b.n	80014ce <UART_SetConfig+0x156>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80013e8:	f7ff fe68 	bl	80010bc <HAL_RCC_GetPCLK1Freq>
 80013ec:	6861      	ldr	r1, [r4, #4]
 80013ee:	6824      	ldr	r4, [r4, #0]
 80013f0:	084b      	lsrs	r3, r1, #1
 80013f2:	1818      	adds	r0, r3, r0
 80013f4:	f7fe fe88 	bl	8000108 <__udivsi3>
 80013f8:	0400      	lsls	r0, r0, #16
 80013fa:	0c00      	lsrs	r0, r0, #16
 80013fc:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80013fe:	2000      	movs	r0, #0
        break;
 8001400:	e012      	b.n	8001428 <UART_SetConfig+0xb0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001402:	6863      	ldr	r3, [r4, #4]
 8001404:	0858      	lsrs	r0, r3, #1
 8001406:	4b3c      	ldr	r3, [pc, #240]	; (80014f8 <UART_SetConfig+0x180>)
 8001408:	469c      	mov	ip, r3
 800140a:	4460      	add	r0, ip
 800140c:	6861      	ldr	r1, [r4, #4]
 800140e:	f7fe fe7b 	bl	8000108 <__udivsi3>
 8001412:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 8001414:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8001416:	220f      	movs	r2, #15
 8001418:	0019      	movs	r1, r3
 800141a:	4391      	bics	r1, r2
 800141c:	000a      	movs	r2, r1
    huart->Instance->BRR = brrtemp;
 800141e:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001420:	071b      	lsls	r3, r3, #28
 8001422:	0f5b      	lsrs	r3, r3, #29
    huart->Instance->BRR = brrtemp;
 8001424:	4313      	orrs	r3, r2
 8001426:	60cb      	str	r3, [r1, #12]
}
 8001428:	bd10      	pop	{r4, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800142a:	6863      	ldr	r3, [r4, #4]
 800142c:	0858      	lsrs	r0, r3, #1
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	025b      	lsls	r3, r3, #9
 8001432:	469c      	mov	ip, r3
 8001434:	4460      	add	r0, ip
 8001436:	6861      	ldr	r1, [r4, #4]
 8001438:	f7fe fe66 	bl	8000108 <__udivsi3>
 800143c:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 800143e:	2000      	movs	r0, #0
        break;
 8001440:	e7e9      	b.n	8001416 <UART_SetConfig+0x9e>
        ret = HAL_ERROR;
 8001442:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001444:	2300      	movs	r3, #0
 8001446:	e7e6      	b.n	8001416 <UART_SetConfig+0x9e>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001448:	2380      	movs	r3, #128	; 0x80
 800144a:	021b      	lsls	r3, r3, #8
 800144c:	69e2      	ldr	r2, [r4, #28]
 800144e:	429a      	cmp	r2, r3
 8001450:	d0d7      	beq.n	8001402 <UART_SetConfig+0x8a>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001452:	6861      	ldr	r1, [r4, #4]
 8001454:	6824      	ldr	r4, [r4, #0]
 8001456:	0848      	lsrs	r0, r1, #1
 8001458:	4b28      	ldr	r3, [pc, #160]	; (80014fc <UART_SetConfig+0x184>)
 800145a:	469c      	mov	ip, r3
 800145c:	4460      	add	r0, ip
 800145e:	f7fe fe53 	bl	8000108 <__udivsi3>
 8001462:	0400      	lsls	r0, r0, #16
 8001464:	0c00      	lsrs	r0, r0, #16
 8001466:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001468:	2000      	movs	r0, #0
  return ret;
 800146a:	e7dd      	b.n	8001428 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800146c:	2380      	movs	r3, #128	; 0x80
 800146e:	021b      	lsls	r3, r3, #8
 8001470:	69e2      	ldr	r2, [r4, #28]
 8001472:	429a      	cmp	r2, r3
 8001474:	d0d9      	beq.n	800142a <UART_SetConfig+0xb2>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001476:	6861      	ldr	r1, [r4, #4]
 8001478:	6824      	ldr	r4, [r4, #0]
 800147a:	0848      	lsrs	r0, r1, #1
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	469c      	mov	ip, r3
 8001482:	4460      	add	r0, ip
 8001484:	f7fe fe40 	bl	8000108 <__udivsi3>
 8001488:	0400      	lsls	r0, r0, #16
 800148a:	0c00      	lsrs	r0, r0, #16
 800148c:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800148e:	2000      	movs	r0, #0
        break;
 8001490:	e7ca      	b.n	8001428 <UART_SetConfig+0xb0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001492:	2380      	movs	r3, #128	; 0x80
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	69e2      	ldr	r2, [r4, #28]
 8001498:	429a      	cmp	r2, r3
 800149a:	d00c      	beq.n	80014b6 <UART_SetConfig+0x13e>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800149c:	f7ff fd14 	bl	8000ec8 <HAL_RCC_GetSysClockFreq>
 80014a0:	6861      	ldr	r1, [r4, #4]
 80014a2:	6824      	ldr	r4, [r4, #0]
 80014a4:	084b      	lsrs	r3, r1, #1
 80014a6:	1818      	adds	r0, r3, r0
 80014a8:	f7fe fe2e 	bl	8000108 <__udivsi3>
 80014ac:	0400      	lsls	r0, r0, #16
 80014ae:	0c00      	lsrs	r0, r0, #16
 80014b0:	60e0      	str	r0, [r4, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80014b2:	2000      	movs	r0, #0
        break;
 80014b4:	e7b8      	b.n	8001428 <UART_SetConfig+0xb0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80014b6:	f7ff fd07 	bl	8000ec8 <HAL_RCC_GetSysClockFreq>
 80014ba:	0040      	lsls	r0, r0, #1
 80014bc:	6863      	ldr	r3, [r4, #4]
 80014be:	085b      	lsrs	r3, r3, #1
 80014c0:	18c0      	adds	r0, r0, r3
 80014c2:	6861      	ldr	r1, [r4, #4]
 80014c4:	f7fe fe20 	bl	8000108 <__udivsi3>
 80014c8:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80014ca:	2000      	movs	r0, #0
        break;
 80014cc:	e7a3      	b.n	8001416 <UART_SetConfig+0x9e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80014ce:	f7ff fdf5 	bl	80010bc <HAL_RCC_GetPCLK1Freq>
 80014d2:	0040      	lsls	r0, r0, #1
 80014d4:	6863      	ldr	r3, [r4, #4]
 80014d6:	085b      	lsrs	r3, r3, #1
 80014d8:	18c0      	adds	r0, r0, r3
 80014da:	6861      	ldr	r1, [r4, #4]
 80014dc:	f7fe fe14 	bl	8000108 <__udivsi3>
 80014e0:	b283      	uxth	r3, r0
  HAL_StatusTypeDef ret               = HAL_OK;
 80014e2:	2000      	movs	r0, #0
        break;
 80014e4:	e797      	b.n	8001416 <UART_SetConfig+0x9e>
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	ffff69f3 	.word	0xffff69f3
 80014ec:	ffffcfff 	.word	0xffffcfff
 80014f0:	fffff4ff 	.word	0xfffff4ff
 80014f4:	40021000 	.word	0x40021000
 80014f8:	00f42400 	.word	0x00f42400
 80014fc:	007a1200 	.word	0x007a1200

08001500 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001500:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001502:	07db      	lsls	r3, r3, #31
 8001504:	d506      	bpl.n	8001514 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001506:	6802      	ldr	r2, [r0, #0]
 8001508:	6853      	ldr	r3, [r2, #4]
 800150a:	492c      	ldr	r1, [pc, #176]	; (80015bc <UART_AdvFeatureConfig+0xbc>)
 800150c:	400b      	ands	r3, r1
 800150e:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001510:	430b      	orrs	r3, r1
 8001512:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001514:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001516:	079b      	lsls	r3, r3, #30
 8001518:	d506      	bpl.n	8001528 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800151a:	6802      	ldr	r2, [r0, #0]
 800151c:	6853      	ldr	r3, [r2, #4]
 800151e:	4928      	ldr	r1, [pc, #160]	; (80015c0 <UART_AdvFeatureConfig+0xc0>)
 8001520:	400b      	ands	r3, r1
 8001522:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001524:	430b      	orrs	r3, r1
 8001526:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001528:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800152a:	075b      	lsls	r3, r3, #29
 800152c:	d506      	bpl.n	800153c <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800152e:	6802      	ldr	r2, [r0, #0]
 8001530:	6853      	ldr	r3, [r2, #4]
 8001532:	4924      	ldr	r1, [pc, #144]	; (80015c4 <UART_AdvFeatureConfig+0xc4>)
 8001534:	400b      	ands	r3, r1
 8001536:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001538:	430b      	orrs	r3, r1
 800153a:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800153c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800153e:	071b      	lsls	r3, r3, #28
 8001540:	d506      	bpl.n	8001550 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001542:	6802      	ldr	r2, [r0, #0]
 8001544:	6853      	ldr	r3, [r2, #4]
 8001546:	4920      	ldr	r1, [pc, #128]	; (80015c8 <UART_AdvFeatureConfig+0xc8>)
 8001548:	400b      	ands	r3, r1
 800154a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800154c:	430b      	orrs	r3, r1
 800154e:	6053      	str	r3, [r2, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001550:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001552:	06db      	lsls	r3, r3, #27
 8001554:	d506      	bpl.n	8001564 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001556:	6802      	ldr	r2, [r0, #0]
 8001558:	6893      	ldr	r3, [r2, #8]
 800155a:	491c      	ldr	r1, [pc, #112]	; (80015cc <UART_AdvFeatureConfig+0xcc>)
 800155c:	400b      	ands	r3, r1
 800155e:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001560:	430b      	orrs	r3, r1
 8001562:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001564:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001566:	069b      	lsls	r3, r3, #26
 8001568:	d506      	bpl.n	8001578 <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800156a:	6802      	ldr	r2, [r0, #0]
 800156c:	6893      	ldr	r3, [r2, #8]
 800156e:	4918      	ldr	r1, [pc, #96]	; (80015d0 <UART_AdvFeatureConfig+0xd0>)
 8001570:	400b      	ands	r3, r1
 8001572:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001574:	430b      	orrs	r3, r1
 8001576:	6093      	str	r3, [r2, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001578:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800157a:	065b      	lsls	r3, r3, #25
 800157c:	d50b      	bpl.n	8001596 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800157e:	6802      	ldr	r2, [r0, #0]
 8001580:	6853      	ldr	r3, [r2, #4]
 8001582:	4914      	ldr	r1, [pc, #80]	; (80015d4 <UART_AdvFeatureConfig+0xd4>)
 8001584:	400b      	ands	r3, r1
 8001586:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001588:	430b      	orrs	r3, r1
 800158a:	6053      	str	r3, [r2, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800158c:	2380      	movs	r3, #128	; 0x80
 800158e:	035b      	lsls	r3, r3, #13
 8001590:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001592:	429a      	cmp	r2, r3
 8001594:	d00a      	beq.n	80015ac <UART_AdvFeatureConfig+0xac>
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001596:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001598:	061b      	lsls	r3, r3, #24
 800159a:	d506      	bpl.n	80015aa <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800159c:	6802      	ldr	r2, [r0, #0]
 800159e:	6853      	ldr	r3, [r2, #4]
 80015a0:	490d      	ldr	r1, [pc, #52]	; (80015d8 <UART_AdvFeatureConfig+0xd8>)
 80015a2:	400b      	ands	r3, r1
 80015a4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80015a6:	430b      	orrs	r3, r1
 80015a8:	6053      	str	r3, [r2, #4]
}
 80015aa:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80015ac:	6802      	ldr	r2, [r0, #0]
 80015ae:	6853      	ldr	r3, [r2, #4]
 80015b0:	490a      	ldr	r1, [pc, #40]	; (80015dc <UART_AdvFeatureConfig+0xdc>)
 80015b2:	400b      	ands	r3, r1
 80015b4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80015b6:	430b      	orrs	r3, r1
 80015b8:	6053      	str	r3, [r2, #4]
 80015ba:	e7ec      	b.n	8001596 <UART_AdvFeatureConfig+0x96>
 80015bc:	fffdffff 	.word	0xfffdffff
 80015c0:	fffeffff 	.word	0xfffeffff
 80015c4:	fffbffff 	.word	0xfffbffff
 80015c8:	ffff7fff 	.word	0xffff7fff
 80015cc:	ffffefff 	.word	0xffffefff
 80015d0:	ffffdfff 	.word	0xffffdfff
 80015d4:	ffefffff 	.word	0xffefffff
 80015d8:	fff7ffff 	.word	0xfff7ffff
 80015dc:	ff9fffff 	.word	0xff9fffff

080015e0 <HAL_UART_Init>:
{
 80015e0:	b510      	push	{r4, lr}
 80015e2:	1e04      	subs	r4, r0, #0
  if(huart == NULL)
 80015e4:	d037      	beq.n	8001656 <HAL_UART_Init+0x76>
  if(huart->gState == HAL_UART_STATE_RESET)
 80015e6:	2369      	movs	r3, #105	; 0x69
 80015e8:	5cc3      	ldrb	r3, [r0, r3]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d029      	beq.n	8001642 <HAL_UART_Init+0x62>
  huart->gState = HAL_UART_STATE_BUSY;
 80015ee:	2369      	movs	r3, #105	; 0x69
 80015f0:	2224      	movs	r2, #36	; 0x24
 80015f2:	54e2      	strb	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 80015f4:	6822      	ldr	r2, [r4, #0]
 80015f6:	6813      	ldr	r3, [r2, #0]
 80015f8:	2101      	movs	r1, #1
 80015fa:	438b      	bics	r3, r1
 80015fc:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80015fe:	0020      	movs	r0, r4
 8001600:	f7ff feba 	bl	8001378 <UART_SetConfig>
 8001604:	2801      	cmp	r0, #1
 8001606:	d01b      	beq.n	8001640 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001608:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800160a:	2b00      	cmp	r3, #0
 800160c:	d11f      	bne.n	800164e <HAL_UART_Init+0x6e>
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800160e:	6822      	ldr	r2, [r4, #0]
 8001610:	6853      	ldr	r3, [r2, #4]
 8001612:	4912      	ldr	r1, [pc, #72]	; (800165c <HAL_UART_Init+0x7c>)
 8001614:	400b      	ands	r3, r1
 8001616:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001618:	6822      	ldr	r2, [r4, #0]
 800161a:	6893      	ldr	r3, [r2, #8]
 800161c:	2108      	movs	r1, #8
 800161e:	438b      	bics	r3, r1
 8001620:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8001622:	6822      	ldr	r2, [r4, #0]
 8001624:	6813      	ldr	r3, [r2, #0]
 8001626:	3907      	subs	r1, #7
 8001628:	430b      	orrs	r3, r1
 800162a:	6013      	str	r3, [r2, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800162c:	2300      	movs	r3, #0
 800162e:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->gState  = HAL_UART_STATE_READY;
 8001630:	2220      	movs	r2, #32
 8001632:	3168      	adds	r1, #104	; 0x68
 8001634:	5462      	strb	r2, [r4, r1]
  huart->RxState = HAL_UART_STATE_READY;
 8001636:	3101      	adds	r1, #1
 8001638:	5462      	strb	r2, [r4, r1]
  __HAL_UNLOCK(huart);
 800163a:	3248      	adds	r2, #72	; 0x48
 800163c:	54a3      	strb	r3, [r4, r2]
  return (UART_CheckIdleState(huart));
 800163e:	2000      	movs	r0, #0
}
 8001640:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001642:	3368      	adds	r3, #104	; 0x68
 8001644:	2200      	movs	r2, #0
 8001646:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8001648:	f000 fc5c 	bl	8001f04 <HAL_UART_MspInit>
 800164c:	e7cf      	b.n	80015ee <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 800164e:	0020      	movs	r0, r4
 8001650:	f7ff ff56 	bl	8001500 <UART_AdvFeatureConfig>
 8001654:	e7db      	b.n	800160e <HAL_UART_Init+0x2e>
    return HAL_ERROR;
 8001656:	2001      	movs	r0, #1
 8001658:	e7f2      	b.n	8001640 <HAL_UART_Init+0x60>
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	fffff7ff 	.word	0xfffff7ff

08001660 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001660:	2369      	movs	r3, #105	; 0x69
 8001662:	5cc2      	ldrb	r2, [r0, r3]
      return HAL_OK;
    }
  }
  else
  {
    return HAL_BUSY;
 8001664:	3b67      	subs	r3, #103	; 0x67
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001666:	2a21      	cmp	r2, #33	; 0x21
 8001668:	d115      	bne.n	8001696 <UART_Transmit_IT+0x36>
    if(huart->TxXferCount == 0U)
 800166a:	3350      	adds	r3, #80	; 0x50
 800166c:	5ac3      	ldrh	r3, [r0, r3]
 800166e:	b29b      	uxth	r3, r3
 8001670:	2b00      	cmp	r3, #0
 8001672:	d012      	beq.n	800169a <UART_Transmit_IT+0x3a>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	015b      	lsls	r3, r3, #5
 8001678:	6882      	ldr	r2, [r0, #8]
 800167a:	429a      	cmp	r2, r3
 800167c:	d019      	beq.n	80016b2 <UART_Transmit_IT+0x52>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 800167e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001680:	1c5a      	adds	r2, r3, #1
 8001682:	64c2      	str	r2, [r0, #76]	; 0x4c
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	6802      	ldr	r2, [r0, #0]
 8001688:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800168a:	2252      	movs	r2, #82	; 0x52
 800168c:	5a83      	ldrh	r3, [r0, r2]
 800168e:	3b01      	subs	r3, #1
 8001690:	b29b      	uxth	r3, r3
 8001692:	5283      	strh	r3, [r0, r2]
      return HAL_OK;
 8001694:	2300      	movs	r3, #0
  }
}
 8001696:	0018      	movs	r0, r3
 8001698:	4770      	bx	lr
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800169a:	6802      	ldr	r2, [r0, #0]
 800169c:	6813      	ldr	r3, [r2, #0]
 800169e:	2180      	movs	r1, #128	; 0x80
 80016a0:	438b      	bics	r3, r1
 80016a2:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80016a4:	6802      	ldr	r2, [r0, #0]
 80016a6:	6813      	ldr	r3, [r2, #0]
 80016a8:	3940      	subs	r1, #64	; 0x40
 80016aa:	430b      	orrs	r3, r1
 80016ac:	6013      	str	r3, [r2, #0]
      return HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e7f1      	b.n	8001696 <UART_Transmit_IT+0x36>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016b2:	6903      	ldr	r3, [r0, #16]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1e2      	bne.n	800167e <UART_Transmit_IT+0x1e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80016b8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	05db      	lsls	r3, r3, #23
 80016be:	0ddb      	lsrs	r3, r3, #23
 80016c0:	6802      	ldr	r2, [r0, #0]
 80016c2:	8513      	strh	r3, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80016c4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80016c6:	3302      	adds	r3, #2
 80016c8:	64c3      	str	r3, [r0, #76]	; 0x4c
 80016ca:	e7de      	b.n	800168a <UART_Transmit_IT+0x2a>

080016cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80016cc:	b510      	push	{r4, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80016ce:	6802      	ldr	r2, [r0, #0]
 80016d0:	6813      	ldr	r3, [r2, #0]
 80016d2:	2140      	movs	r1, #64	; 0x40
 80016d4:	438b      	bics	r3, r1
 80016d6:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80016d8:	2369      	movs	r3, #105	; 0x69
 80016da:	2220      	movs	r2, #32
 80016dc:	54c2      	strb	r2, [r0, r3]

  HAL_UART_TxCpltCallback(huart);
 80016de:	f000 fca9 	bl	8002034 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 80016e2:	2000      	movs	r0, #0
 80016e4:	bd10      	pop	{r4, pc}
	...

080016e8 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80016e8:	b510      	push	{r4, lr}
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80016ea:	236a      	movs	r3, #106	; 0x6a
 80016ec:	5cc3      	ldrb	r3, [r0, r3]
 80016ee:	2b22      	cmp	r3, #34	; 0x22
 80016f0:	d132      	bne.n	8001758 <UART_Receive_IT+0x70>
  uint16_t  uhMask = huart->Mask;
 80016f2:	333a      	adds	r3, #58	; 0x3a
 80016f4:	5ac2      	ldrh	r2, [r0, r3]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80016f6:	6803      	ldr	r3, [r0, #0]
 80016f8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80016fa:	b29b      	uxth	r3, r3
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016fc:	2180      	movs	r1, #128	; 0x80
 80016fe:	0149      	lsls	r1, r1, #5
 8001700:	6884      	ldr	r4, [r0, #8]
 8001702:	428c      	cmp	r4, r1
 8001704:	d01e      	beq.n	8001744 <UART_Receive_IT+0x5c>
      *tmp = (uint16_t)(uhdata & uhMask);
      huart->pRxBuffPtr +=2U;
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001706:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8001708:	1c4c      	adds	r4, r1, #1
 800170a:	6544      	str	r4, [r0, #84]	; 0x54
 800170c:	4013      	ands	r3, r2
 800170e:	700b      	strb	r3, [r1, #0]
    }

    if(--huart->RxXferCount == 0U)
 8001710:	225a      	movs	r2, #90	; 0x5a
 8001712:	5a83      	ldrh	r3, [r0, r2]
 8001714:	3b01      	subs	r3, #1
 8001716:	b29b      	uxth	r3, r3
 8001718:	5283      	strh	r3, [r0, r2]
      HAL_UART_RxCpltCallback(huart);

      return HAL_OK;
    }

    return HAL_OK;
 800171a:	2200      	movs	r2, #0
    if(--huart->RxXferCount == 0U)
 800171c:	2b00      	cmp	r3, #0
 800171e:	d121      	bne.n	8001764 <UART_Receive_IT+0x7c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001720:	6802      	ldr	r2, [r0, #0]
 8001722:	6813      	ldr	r3, [r2, #0]
 8001724:	4910      	ldr	r1, [pc, #64]	; (8001768 <UART_Receive_IT+0x80>)
 8001726:	400b      	ands	r3, r1
 8001728:	6013      	str	r3, [r2, #0]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800172a:	6802      	ldr	r2, [r0, #0]
 800172c:	6893      	ldr	r3, [r2, #8]
 800172e:	3123      	adds	r1, #35	; 0x23
 8001730:	31ff      	adds	r1, #255	; 0xff
 8001732:	438b      	bics	r3, r1
 8001734:	6093      	str	r3, [r2, #8]
      huart->RxState = HAL_UART_STATE_READY;
 8001736:	236a      	movs	r3, #106	; 0x6a
 8001738:	2220      	movs	r2, #32
 800173a:	54c2      	strb	r2, [r0, r3]
      HAL_UART_RxCpltCallback(huart);
 800173c:	f000 fc7b 	bl	8002036 <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8001740:	2200      	movs	r2, #0
 8001742:	e00f      	b.n	8001764 <UART_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001744:	6901      	ldr	r1, [r0, #16]
 8001746:	2900      	cmp	r1, #0
 8001748:	d1dd      	bne.n	8001706 <UART_Receive_IT+0x1e>
      *tmp = (uint16_t)(uhdata & uhMask);
 800174a:	4013      	ands	r3, r2
 800174c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800174e:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr +=2U;
 8001750:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001752:	3302      	adds	r3, #2
 8001754:	6543      	str	r3, [r0, #84]	; 0x54
 8001756:	e7db      	b.n	8001710 <UART_Receive_IT+0x28>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001758:	6802      	ldr	r2, [r0, #0]
 800175a:	6993      	ldr	r3, [r2, #24]
 800175c:	2108      	movs	r1, #8
 800175e:	430b      	orrs	r3, r1
 8001760:	6193      	str	r3, [r2, #24]

    return HAL_BUSY;
 8001762:	2202      	movs	r2, #2
  }
}
 8001764:	0010      	movs	r0, r2
 8001766:	bd10      	pop	{r4, pc}
 8001768:	fffffedf 	.word	0xfffffedf

0800176c <HAL_UART_IRQHandler>:
{
 800176c:	b570      	push	{r4, r5, r6, lr}
 800176e:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001770:	6802      	ldr	r2, [r0, #0]
 8001772:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001774:	6811      	ldr	r1, [r2, #0]
  if (errorflags == RESET)
 8001776:	0718      	lsls	r0, r3, #28
 8001778:	d130      	bne.n	80017dc <HAL_UART_IRQHandler+0x70>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800177a:	0698      	lsls	r0, r3, #26
 800177c:	d501      	bpl.n	8001782 <HAL_UART_IRQHandler+0x16>
 800177e:	0688      	lsls	r0, r1, #26
 8001780:	d409      	bmi.n	8001796 <HAL_UART_IRQHandler+0x2a>
  cr3its = READ_REG(huart->Instance->CR3);
 8001782:	6892      	ldr	r2, [r2, #8]
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001784:	061a      	lsls	r2, r3, #24
 8001786:	d501      	bpl.n	800178c <HAL_UART_IRQHandler+0x20>
 8001788:	060a      	lsls	r2, r1, #24
 800178a:	d41f      	bmi.n	80017cc <HAL_UART_IRQHandler+0x60>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800178c:	065b      	lsls	r3, r3, #25
 800178e:	d501      	bpl.n	8001794 <HAL_UART_IRQHandler+0x28>
 8001790:	064b      	lsls	r3, r1, #25
 8001792:	d41f      	bmi.n	80017d4 <HAL_UART_IRQHandler+0x68>
}
 8001794:	bd70      	pop	{r4, r5, r6, pc}
      UART_Receive_IT(huart);
 8001796:	0020      	movs	r0, r4
 8001798:	f7ff ffa6 	bl	80016e8 <UART_Receive_IT>
      return;
 800179c:	e7fa      	b.n	8001794 <HAL_UART_IRQHandler+0x28>
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800179e:	075a      	lsls	r2, r3, #29
 80017a0:	d541      	bpl.n	8001826 <HAL_UART_IRQHandler+0xba>
 80017a2:	2800      	cmp	r0, #0
 80017a4:	d03f      	beq.n	8001826 <HAL_UART_IRQHandler+0xba>
 80017a6:	e037      	b.n	8001818 <HAL_UART_IRQHandler+0xac>
        UART_Receive_IT(huart);
 80017a8:	0020      	movs	r0, r4
 80017aa:	f7ff ff9d 	bl	80016e8 <UART_Receive_IT>
 80017ae:	e04d      	b.n	800184c <HAL_UART_IRQHandler+0xe0>
            HAL_UART_ErrorCallback(huart);
 80017b0:	0020      	movs	r0, r4
 80017b2:	f7ff fdd5 	bl	8001360 <HAL_UART_ErrorCallback>
 80017b6:	e7ed      	b.n	8001794 <HAL_UART_IRQHandler+0x28>
          HAL_UART_ErrorCallback(huart);
 80017b8:	0020      	movs	r0, r4
 80017ba:	f7ff fdd1 	bl	8001360 <HAL_UART_ErrorCallback>
 80017be:	e7e9      	b.n	8001794 <HAL_UART_IRQHandler+0x28>
        HAL_UART_ErrorCallback(huart);
 80017c0:	0020      	movs	r0, r4
 80017c2:	f7ff fdcd 	bl	8001360 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	66e3      	str	r3, [r4, #108]	; 0x6c
 80017ca:	e7e3      	b.n	8001794 <HAL_UART_IRQHandler+0x28>
    UART_Transmit_IT(huart);
 80017cc:	0020      	movs	r0, r4
 80017ce:	f7ff ff47 	bl	8001660 <UART_Transmit_IT>
    return;
 80017d2:	e7df      	b.n	8001794 <HAL_UART_IRQHandler+0x28>
    UART_EndTransmit_IT(huart);
 80017d4:	0020      	movs	r0, r4
 80017d6:	f7ff ff79 	bl	80016cc <UART_EndTransmit_IT>
    return;
 80017da:	e7db      	b.n	8001794 <HAL_UART_IRQHandler+0x28>
  cr3its = READ_REG(huart->Instance->CR3);
 80017dc:	6890      	ldr	r0, [r2, #8]
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80017de:	2501      	movs	r5, #1
 80017e0:	4028      	ands	r0, r5
 80017e2:	d103      	bne.n	80017ec <HAL_UART_IRQHandler+0x80>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80017e4:	2590      	movs	r5, #144	; 0x90
 80017e6:	006d      	lsls	r5, r5, #1
 80017e8:	4229      	tst	r1, r5
 80017ea:	d0cb      	beq.n	8001784 <HAL_UART_IRQHandler+0x18>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80017ec:	07dd      	lsls	r5, r3, #31
 80017ee:	d506      	bpl.n	80017fe <HAL_UART_IRQHandler+0x92>
 80017f0:	05cd      	lsls	r5, r1, #23
 80017f2:	d504      	bpl.n	80017fe <HAL_UART_IRQHandler+0x92>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80017f4:	2501      	movs	r5, #1
 80017f6:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80017f8:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80017fa:	432a      	orrs	r2, r5
 80017fc:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017fe:	079a      	lsls	r2, r3, #30
 8001800:	d5cd      	bpl.n	800179e <HAL_UART_IRQHandler+0x32>
 8001802:	2800      	cmp	r0, #0
 8001804:	d00f      	beq.n	8001826 <HAL_UART_IRQHandler+0xba>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8001806:	6822      	ldr	r2, [r4, #0]
 8001808:	2502      	movs	r5, #2
 800180a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800180c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800180e:	3502      	adds	r5, #2
 8001810:	432a      	orrs	r2, r5
 8001812:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001814:	421d      	tst	r5, r3
 8001816:	d006      	beq.n	8001826 <HAL_UART_IRQHandler+0xba>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8001818:	6822      	ldr	r2, [r4, #0]
 800181a:	2504      	movs	r5, #4
 800181c:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800181e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001820:	3d02      	subs	r5, #2
 8001822:	432a      	orrs	r2, r5
 8001824:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8001826:	071a      	lsls	r2, r3, #28
 8001828:	d509      	bpl.n	800183e <HAL_UART_IRQHandler+0xd2>
 800182a:	068a      	lsls	r2, r1, #26
 800182c:	d401      	bmi.n	8001832 <HAL_UART_IRQHandler+0xc6>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800182e:	2800      	cmp	r0, #0
 8001830:	d005      	beq.n	800183e <HAL_UART_IRQHandler+0xd2>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8001832:	6822      	ldr	r2, [r4, #0]
 8001834:	2008      	movs	r0, #8
 8001836:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001838:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800183a:	4302      	orrs	r2, r0
 800183c:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800183e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001840:	2a00      	cmp	r2, #0
 8001842:	d0a7      	beq.n	8001794 <HAL_UART_IRQHandler+0x28>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001844:	069b      	lsls	r3, r3, #26
 8001846:	d501      	bpl.n	800184c <HAL_UART_IRQHandler+0xe0>
 8001848:	068b      	lsls	r3, r1, #26
 800184a:	d4ad      	bmi.n	80017a8 <HAL_UART_IRQHandler+0x3c>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800184c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800184e:	071b      	lsls	r3, r3, #28
 8001850:	d403      	bmi.n	800185a <HAL_UART_IRQHandler+0xee>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8001852:	6823      	ldr	r3, [r4, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001856:	065b      	lsls	r3, r3, #25
 8001858:	d5b2      	bpl.n	80017c0 <HAL_UART_IRQHandler+0x54>
        UART_EndRxTransfer(huart);
 800185a:	0020      	movs	r0, r4
 800185c:	f7ff fcd2 	bl	8001204 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001860:	6823      	ldr	r3, [r4, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	0652      	lsls	r2, r2, #25
 8001866:	d5a7      	bpl.n	80017b8 <HAL_UART_IRQHandler+0x4c>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001868:	689a      	ldr	r2, [r3, #8]
 800186a:	2140      	movs	r1, #64	; 0x40
 800186c:	438a      	bics	r2, r1
 800186e:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8001870:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001872:	2b00      	cmp	r3, #0
 8001874:	d09c      	beq.n	80017b0 <HAL_UART_IRQHandler+0x44>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001876:	4a06      	ldr	r2, [pc, #24]	; (8001890 <HAL_UART_IRQHandler+0x124>)
 8001878:	635a      	str	r2, [r3, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800187a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800187c:	f7fe ffdd 	bl	800083a <HAL_DMA_Abort_IT>
 8001880:	2800      	cmp	r0, #0
 8001882:	d100      	bne.n	8001886 <HAL_UART_IRQHandler+0x11a>
 8001884:	e786      	b.n	8001794 <HAL_UART_IRQHandler+0x28>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001886:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001888:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800188a:	4798      	blx	r3
 800188c:	e782      	b.n	8001794 <HAL_UART_IRQHandler+0x28>
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	08001363 	.word	0x08001363

08001894 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001896:	46c6      	mov	lr, r8
 8001898:	b500      	push	{lr}
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800189a:	680b      	ldr	r3, [r1, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d045      	beq.n	800192c <LL_GPIO_Init+0x98>
  uint32_t pinpos     = 0x00000000U;
 80018a0:	2200      	movs	r2, #0
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80018a2:	2401      	movs	r4, #1
 80018a4:	46a0      	mov	r8, r4
 80018a6:	e00d      	b.n	80018c4 <LL_GPIO_Init+0x30>
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 80018a8:	68c6      	ldr	r6, [r0, #12]
 80018aa:	690f      	ldr	r7, [r1, #16]
 80018ac:	436f      	muls	r7, r5
 80018ae:	4034      	ands	r4, r6
 80018b0:	433c      	orrs	r4, r7
 80018b2:	60c4      	str	r4, [r0, #12]
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80018b4:	684c      	ldr	r4, [r1, #4]
 80018b6:	2c02      	cmp	r4, #2
 80018b8:	d020      	beq.n	80018fc <LL_GPIO_Init+0x68>
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
    }
    pinpos++;
 80018ba:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80018bc:	680b      	ldr	r3, [r1, #0]
 80018be:	001c      	movs	r4, r3
 80018c0:	40d4      	lsrs	r4, r2
 80018c2:	d033      	beq.n	800192c <LL_GPIO_Init+0x98>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80018c4:	4644      	mov	r4, r8
 80018c6:	4094      	lsls	r4, r2
 80018c8:	4023      	ands	r3, r4
    if (currentpin)
 80018ca:	d0f6      	beq.n	80018ba <LL_GPIO_Init+0x26>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80018cc:	6804      	ldr	r4, [r0, #0]
 80018ce:	46a4      	mov	ip, r4
 80018d0:	001d      	movs	r5, r3
 80018d2:	435d      	muls	r5, r3
 80018d4:	006c      	lsls	r4, r5, #1
 80018d6:	1964      	adds	r4, r4, r5
 80018d8:	43e4      	mvns	r4, r4
 80018da:	684f      	ldr	r7, [r1, #4]
 80018dc:	436f      	muls	r7, r5
 80018de:	4666      	mov	r6, ip
 80018e0:	4026      	ands	r6, r4
 80018e2:	4337      	orrs	r7, r6
 80018e4:	6007      	str	r7, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80018e6:	684e      	ldr	r6, [r1, #4]
 80018e8:	1e77      	subs	r7, r6, #1
 80018ea:	2f01      	cmp	r7, #1
 80018ec:	d8dc      	bhi.n	80018a8 <LL_GPIO_Init+0x14>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 80018ee:	6886      	ldr	r6, [r0, #8]
 80018f0:	688f      	ldr	r7, [r1, #8]
 80018f2:	436f      	muls	r7, r5
 80018f4:	4026      	ands	r6, r4
 80018f6:	4337      	orrs	r7, r6
 80018f8:	6087      	str	r7, [r0, #8]
 80018fa:	e7d5      	b.n	80018a8 <LL_GPIO_Init+0x14>
        if (currentpin < LL_GPIO_PIN_8)
 80018fc:	2bff      	cmp	r3, #255	; 0xff
 80018fe:	d809      	bhi.n	8001914 <LL_GPIO_Init+0x80>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8001900:	6a03      	ldr	r3, [r0, #32]
 8001902:	436d      	muls	r5, r5
 8001904:	012c      	lsls	r4, r5, #4
 8001906:	1b64      	subs	r4, r4, r5
 8001908:	43a3      	bics	r3, r4
 800190a:	694c      	ldr	r4, [r1, #20]
 800190c:	4365      	muls	r5, r4
 800190e:	431d      	orrs	r5, r3
 8001910:	6205      	str	r5, [r0, #32]
 8001912:	e7d2      	b.n	80018ba <LL_GPIO_Init+0x26>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001914:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	435b      	muls	r3, r3
 800191a:	435b      	muls	r3, r3
 800191c:	011d      	lsls	r5, r3, #4
 800191e:	1aed      	subs	r5, r5, r3
 8001920:	43ac      	bics	r4, r5
 8001922:	694d      	ldr	r5, [r1, #20]
 8001924:	436b      	muls	r3, r5
 8001926:	4323      	orrs	r3, r4
 8001928:	6243      	str	r3, [r0, #36]	; 0x24
 800192a:	e7c6      	b.n	80018ba <LL_GPIO_Init+0x26>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800192c:	684a      	ldr	r2, [r1, #4]
 800192e:	3a01      	subs	r2, #1
 8001930:	2a01      	cmp	r2, #1
 8001932:	d903      	bls.n	800193c <LL_GPIO_Init+0xa8>
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8001934:	2001      	movs	r0, #1
 8001936:	bc04      	pop	{r2}
 8001938:	4690      	mov	r8, r2
 800193a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800193c:	6842      	ldr	r2, [r0, #4]
 800193e:	439a      	bics	r2, r3
 8001940:	68c9      	ldr	r1, [r1, #12]
 8001942:	434b      	muls	r3, r1
 8001944:	4313      	orrs	r3, r2
 8001946:	6043      	str	r3, [r0, #4]
 8001948:	e7f4      	b.n	8001934 <LL_GPIO_Init+0xa0>
	...

0800194c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800194c:	b082      	sub	sp, #8
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <LL_mDelay+0x30>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	9301      	str	r3, [sp, #4]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8001954:	9b01      	ldr	r3, [sp, #4]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
  {
    Delay++;
 8001956:	1c43      	adds	r3, r0, #1
 8001958:	1e5a      	subs	r2, r3, #1
 800195a:	4193      	sbcs	r3, r2
 800195c:	18c0      	adds	r0, r0, r3
  }

  while (Delay)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800195e:	4907      	ldr	r1, [pc, #28]	; (800197c <LL_mDelay+0x30>)
 8001960:	2280      	movs	r2, #128	; 0x80
 8001962:	0252      	lsls	r2, r2, #9
  while (Delay)
 8001964:	2800      	cmp	r0, #0
 8001966:	d007      	beq.n	8001978 <LL_mDelay+0x2c>
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8001968:	680b      	ldr	r3, [r1, #0]
 800196a:	4213      	tst	r3, r2
 800196c:	d102      	bne.n	8001974 <LL_mDelay+0x28>
 800196e:	680b      	ldr	r3, [r1, #0]
 8001970:	4213      	tst	r3, r2
 8001972:	d0fc      	beq.n	800196e <LL_mDelay+0x22>
    {
      Delay--;
 8001974:	3801      	subs	r0, #1
 8001976:	e7f5      	b.n	8001964 <LL_mDelay+0x18>
    }
  }
}
 8001978:	b002      	add	sp, #8
 800197a:	4770      	bx	lr
 800197c:	e000e010 	.word	0xe000e010

08001980 <HAL_ADC_ConvCpltCallback>:
#include "crc.h"

extern UART_HandleTypeDef huart1;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001980:	b510      	push	{r4, lr}
 8001982:	b084      	sub	sp, #16
 8001984:	0004      	movs	r4, r0
	uint32_t Adc_val = 0;
	uint32_t ResultVoltage = 0;
	uint32_t batt_vol = 0;
	uint8_t tx_data[10] = {0};
 8001986:	220a      	movs	r2, #10
 8001988:	2100      	movs	r1, #0
 800198a:	a801      	add	r0, sp, #4
 800198c:	f000 fbb4 	bl	80020f8 <memset>

	if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001990:	6823      	ldr	r3, [r4, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	071b      	lsls	r3, r3, #28
 8001996:	d401      	bmi.n	800199c <HAL_ADC_ConvCpltCallback+0x1c>
		tx_data[6] = crc8_calculate(tx_data, MIN_IPC_MSG_LEN + 2);
		HAL_UART_Transmit_IT(&huart1, (uint8_t *)tx_data, MIN_IPC_MSG_LEN + 2);
	}

	return;
}
 8001998:	b004      	add	sp, #16
 800199a:	bd10      	pop	{r4, pc}
		Adc_val = HAL_ADC_GetValue(hadc);
 800199c:	0020      	movs	r0, r4
 800199e:	f7fe fdb9 	bl	8000514 <HAL_ADC_GetValue>
		ResultVoltage = (Adc_val * 3300) >> 12;
 80019a2:	4a11      	ldr	r2, [pc, #68]	; (80019e8 <HAL_ADC_ConvCpltCallback+0x68>)
 80019a4:	4342      	muls	r2, r0
 80019a6:	0b12      	lsrs	r2, r2, #12
		batt_vol = ResultVoltage *673 / 523; /*15k+52.3=67.3*/
 80019a8:	0050      	lsls	r0, r2, #1
 80019aa:	1880      	adds	r0, r0, r2
 80019ac:	00c3      	lsls	r3, r0, #3
 80019ae:	1a18      	subs	r0, r3, r0
 80019b0:	0140      	lsls	r0, r0, #5
 80019b2:	1880      	adds	r0, r0, r2
 80019b4:	490d      	ldr	r1, [pc, #52]	; (80019ec <HAL_ADC_ConvCpltCallback+0x6c>)
 80019b6:	f7fe fba7 	bl	8000108 <__udivsi3>
		tx_data[0] = 0x5a;
 80019ba:	ac01      	add	r4, sp, #4
 80019bc:	235a      	movs	r3, #90	; 0x5a
 80019be:	7023      	strb	r3, [r4, #0]
		tx_data[1] = 0xa5;
 80019c0:	334b      	adds	r3, #75	; 0x4b
 80019c2:	7063      	strb	r3, [r4, #1]
		tx_data[2] = 2;
 80019c4:	3ba3      	subs	r3, #163	; 0xa3
 80019c6:	70a3      	strb	r3, [r4, #2]
		tx_data[3] = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	70e3      	strb	r3, [r4, #3]
		tx_data[4] = (uint8_t)(batt_vol&0xFF);
 80019cc:	7120      	strb	r0, [r4, #4]
		tx_data[5] = (uint8_t)((batt_vol >> 8) &0xFF);
 80019ce:	0a00      	lsrs	r0, r0, #8
 80019d0:	7160      	strb	r0, [r4, #5]
		tx_data[6] = crc8_calculate(tx_data, MIN_IPC_MSG_LEN + 2);
 80019d2:	2107      	movs	r1, #7
 80019d4:	0020      	movs	r0, r4
 80019d6:	f000 f80d 	bl	80019f4 <crc8_calculate>
 80019da:	71a0      	strb	r0, [r4, #6]
		HAL_UART_Transmit_IT(&huart1, (uint8_t *)tx_data, MIN_IPC_MSG_LEN + 2);
 80019dc:	2207      	movs	r2, #7
 80019de:	0021      	movs	r1, r4
 80019e0:	4803      	ldr	r0, [pc, #12]	; (80019f0 <HAL_ADC_ConvCpltCallback+0x70>)
 80019e2:	f7ff fc21 	bl	8001228 <HAL_UART_Transmit_IT>
	return;
 80019e6:	e7d7      	b.n	8001998 <HAL_ADC_ConvCpltCallback+0x18>
 80019e8:	00000ce4 	.word	0x00000ce4
 80019ec:	0000020b 	.word	0x0000020b
 80019f0:	2000006c 	.word	0x2000006c

080019f4 <crc8_calculate>:
uint8_t crc8_calculate(uint8_t *psrc, uint8_t len)
{
  uint8_t crc8_val = 0;
  uint32_t  id;

  for(id = 0; id < len; id++)
 80019f4:	2900      	cmp	r1, #0
 80019f6:	d009      	beq.n	8001a0c <crc8_calculate+0x18>
 80019f8:	0003      	movs	r3, r0
 80019fa:	1841      	adds	r1, r0, r1
  uint8_t crc8_val = 0;
 80019fc:	2000      	movs	r0, #0
  {
	  crc8_val += psrc[id];
 80019fe:	781a      	ldrb	r2, [r3, #0]
 8001a00:	1880      	adds	r0, r0, r2
 8001a02:	b2c0      	uxtb	r0, r0
 8001a04:	3301      	adds	r3, #1
  for(id = 0; id < len; id++)
 8001a06:	428b      	cmp	r3, r1
 8001a08:	d1f9      	bne.n	80019fe <crc8_calculate+0xa>
  }

  return crc8_val;
}
 8001a0a:	4770      	bx	lr
  uint8_t crc8_val = 0;
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	e7fc      	b.n	8001a0a <crc8_calculate+0x16>

08001a10 <Set_CurrentPowState>:
	return current_powerState;
}

void Set_CurrentPowState(uint32_t state)
{
	 current_powerState = state;
 8001a10:	4b01      	ldr	r3, [pc, #4]	; (8001a18 <Set_CurrentPowState+0x8>)
 8001a12:	7018      	strb	r0, [r3, #0]
}
 8001a14:	4770      	bx	lr
 8001a16:	46c0      	nop			; (mov r8, r8)
 8001a18:	20000036 	.word	0x20000036

08001a1c <BatteryVol_Check_And_Send>:

void BatteryVol_Check_And_Send(void)
{
 8001a1c:	b510      	push	{r4, lr}
	if(adc_result_period >= BATT_VOL_SEND_PERIOD && Get_CurrentPowState() != OFF)
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <BatteryVol_Check_And_Send+0x24>)
 8001a20:	4a08      	ldr	r2, [pc, #32]	; (8001a44 <BatteryVol_Check_And_Send+0x28>)
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d903      	bls.n	8001a30 <BatteryVol_Check_And_Send+0x14>
	return current_powerState;
 8001a28:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <BatteryVol_Check_And_Send+0x2c>)
	if(adc_result_period >= BATT_VOL_SEND_PERIOD && Get_CurrentPowState() != OFF)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d100      	bne.n	8001a32 <BatteryVol_Check_And_Send+0x16>
	{
		adc_result_period = 0;
		HAL_ADC_Start_IT(&hadc);
	}
}
 8001a30:	bd10      	pop	{r4, pc}
		adc_result_period = 0;
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <BatteryVol_Check_And_Send+0x28>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]
		HAL_ADC_Start_IT(&hadc);
 8001a38:	4804      	ldr	r0, [pc, #16]	; (8001a4c <BatteryVol_Check_And_Send+0x30>)
 8001a3a:	f7fe fd27 	bl	800048c <HAL_ADC_Start_IT>
}
 8001a3e:	e7f7      	b.n	8001a30 <BatteryVol_Check_And_Send+0x14>
 8001a40:	000003e7 	.word	0x000003e7
 8001a44:	2000003c 	.word	0x2000003c
 8001a48:	20000036 	.word	0x20000036
 8001a4c:	200000e0 	.word	0x200000e0

08001a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a50:	b530      	push	{r4, r5, lr}
 8001a52:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a54:	2218      	movs	r2, #24
 8001a56:	2100      	movs	r1, #0
 8001a58:	a80a      	add	r0, sp, #40	; 0x28
 8001a5a:	f000 fb4d 	bl	80020f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a5e:	2210      	movs	r2, #16
 8001a60:	2100      	movs	r1, #0
 8001a62:	a804      	add	r0, sp, #16
 8001a64:	f000 fb48 	bl	80020f8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a68:	2210      	movs	r2, #16
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	4668      	mov	r0, sp
 8001a6e:	f000 fb43 	bl	80020f8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8001a72:	2311      	movs	r3, #17
 8001a74:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a76:	2501      	movs	r5, #1
 8001a78:	9509      	str	r5, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001a7a:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a80:	2402      	movs	r4, #2
 8001a82:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	025b      	lsls	r3, r3, #9
 8001a88:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a8a:	23e0      	movs	r3, #224	; 0xe0
 8001a8c:	035b      	lsls	r3, r3, #13
 8001a8e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV5;
 8001a90:	2304      	movs	r3, #4
 8001a92:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a94:	a808      	add	r0, sp, #32
 8001a96:	f7fe ffcf 	bl	8000a38 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a9a:	2307      	movs	r3, #7
 8001a9c:	9304      	str	r3, [sp, #16]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a9e:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001aa0:	2400      	movs	r4, #0
 8001aa2:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001aa4:	9407      	str	r4, [sp, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001aa6:	2101      	movs	r1, #1
 8001aa8:	a804      	add	r0, sp, #16
 8001aaa:	f7ff fa4b 	bl	8000f44 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001aae:	9500      	str	r5, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001ab0:	9402      	str	r4, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ab2:	4668      	mov	r0, sp
 8001ab4:	f7ff fb12 	bl	80010dc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001ab8:	b015      	add	sp, #84	; 0x54
 8001aba:	bd30      	pop	{r4, r5, pc}

08001abc <main>:
{
 8001abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001abe:	46de      	mov	lr, fp
 8001ac0:	4657      	mov	r7, sl
 8001ac2:	464e      	mov	r6, r9
 8001ac4:	4645      	mov	r5, r8
 8001ac6:	b5e0      	push	{r5, r6, r7, lr}
 8001ac8:	b08b      	sub	sp, #44	; 0x2c
	Uart_TxData[0] = 0x5a;
 8001aca:	4bc5      	ldr	r3, [pc, #788]	; (8001de0 <main+0x324>)
 8001acc:	225a      	movs	r2, #90	; 0x5a
 8001ace:	701a      	strb	r2, [r3, #0]
	Uart_TxData[1] = 0xa5;  //ipc header
 8001ad0:	324b      	adds	r2, #75	; 0x4b
 8001ad2:	705a      	strb	r2, [r3, #1]
  HAL_Init();
 8001ad4:	f7fe fbb6 	bl	8000244 <HAL_Init>
  SystemClock_Config();
 8001ad8:	f7ff ffba 	bl	8001a50 <SystemClock_Config>
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001adc:	4bc1      	ldr	r3, [pc, #772]	; (8001de4 <main+0x328>)
 8001ade:	2280      	movs	r2, #128	; 0x80
 8001ae0:	0612      	lsls	r2, r2, #24
 8001ae2:	601a      	str	r2, [r3, #0]
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae4:	2218      	movs	r2, #24
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	a804      	add	r0, sp, #16
 8001aea:	f000 fb05 	bl	80020f8 <memset>
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001aee:	4bbe      	ldr	r3, [pc, #760]	; (8001de8 <main+0x32c>)
 8001af0:	6959      	ldr	r1, [r3, #20]
 8001af2:	2080      	movs	r0, #128	; 0x80
 8001af4:	03c0      	lsls	r0, r0, #15
 8001af6:	4301      	orrs	r1, r0
 8001af8:	6159      	str	r1, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001afa:	695a      	ldr	r2, [r3, #20]
 8001afc:	4002      	ands	r2, r0
 8001afe:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001b00:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001b02:	6959      	ldr	r1, [r3, #20]
 8001b04:	2080      	movs	r0, #128	; 0x80
 8001b06:	0280      	lsls	r0, r0, #10
 8001b08:	4301      	orrs	r1, r0
 8001b0a:	6159      	str	r1, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001b0c:	695a      	ldr	r2, [r3, #20]
 8001b0e:	4002      	ands	r2, r0
 8001b10:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001b12:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHBENR, Periphs);
 8001b14:	695a      	ldr	r2, [r3, #20]
 8001b16:	2180      	movs	r1, #128	; 0x80
 8001b18:	02c9      	lsls	r1, r1, #11
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	615a      	str	r2, [r3, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	400b      	ands	r3, r1
 8001b22:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8001b24:	9b03      	ldr	r3, [sp, #12]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8001b26:	2590      	movs	r5, #144	; 0x90
 8001b28:	05ed      	lsls	r5, r5, #23
 8001b2a:	2601      	movs	r6, #1
 8001b2c:	62ae      	str	r6, [r5, #40]	; 0x28
 8001b2e:	2402      	movs	r4, #2
 8001b30:	62ac      	str	r4, [r5, #40]	; 0x28
 8001b32:	2304      	movs	r3, #4
 8001b34:	469b      	mov	fp, r3
 8001b36:	62ab      	str	r3, [r5, #40]	; 0x28
 8001b38:	3304      	adds	r3, #4
 8001b3a:	62ab      	str	r3, [r5, #40]	; 0x28
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	4690      	mov	r8, r2
 8001b40:	62aa      	str	r2, [r5, #40]	; 0x28
 8001b42:	3220      	adds	r2, #32
 8001b44:	4692      	mov	sl, r2
 8001b46:	62aa      	str	r2, [r5, #40]	; 0x28
 8001b48:	3240      	adds	r2, #64	; 0x40
 8001b4a:	4691      	mov	r9, r2
 8001b4c:	62aa      	str	r2, [r5, #40]	; 0x28

  /**/
  LL_GPIO_ResetOutputPin(IN2SYS_EN_GPIO_Port, IN2SYS_EN_Pin);

  /**/
  GPIO_InitStruct.Pin = MCU_REV1_Pin;
 8001b4e:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b50:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001b52:	2703      	movs	r7, #3
 8001b54:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(MCU_REV1_GPIO_Port, &GPIO_InitStruct);
 8001b56:	a904      	add	r1, sp, #16
 8001b58:	0028      	movs	r0, r5
 8001b5a:	f7ff fe9b 	bl	8001894 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MCU_REV2_Pin;
 8001b5e:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b60:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001b62:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b64:	2400      	movs	r4, #0
 8001b66:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b68:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(MCU_REV2_GPIO_Port, &GPIO_InitStruct);
 8001b6a:	a904      	add	r1, sp, #16
 8001b6c:	0028      	movs	r0, r5
 8001b6e:	f7ff fe91 	bl	8001894 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MCU_REV3_Pin;
 8001b72:	465a      	mov	r2, fp
 8001b74:	9204      	str	r2, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b76:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001b78:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b7a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b7c:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(MCU_REV3_GPIO_Port, &GPIO_InitStruct);
 8001b7e:	a904      	add	r1, sp, #16
 8001b80:	0028      	movs	r0, r5
 8001b82:	f7ff fe87 	bl	8001894 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MCU_IND_Pin;
 8001b86:	2308      	movs	r3, #8
 8001b88:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001b8a:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001b8c:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001b8e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b90:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(MCU_IND_GPIO_Port, &GPIO_InitStruct);
 8001b92:	a904      	add	r1, sp, #16
 8001b94:	0028      	movs	r0, r5
 8001b96:	f7ff fe7d 	bl	8001894 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = switch_input_Pin;
 8001b9a:	2310      	movs	r3, #16
 8001b9c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001b9e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ba0:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(switch_input_GPIO_Port, &GPIO_InitStruct);
 8001ba2:	a904      	add	r1, sp, #16
 8001ba4:	0028      	movs	r0, r5
 8001ba6:	f7ff fe75 	bl	8001894 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BOOST_EN_Pin;
 8001baa:	4643      	mov	r3, r8
 8001bac:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001bae:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001bb0:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bb2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bb4:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(BOOST_EN_GPIO_Port, &GPIO_InitStruct);
 8001bb6:	a904      	add	r1, sp, #16
 8001bb8:	0028      	movs	r0, r5
 8001bba:	f7ff fe6b 	bl	8001894 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CHARGE_EN_Pin;
 8001bbe:	4653      	mov	r3, sl
 8001bc0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001bc2:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001bc4:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bc6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bc8:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(CHARGE_EN_GPIO_Port, &GPIO_InitStruct);
 8001bca:	a904      	add	r1, sp, #16
 8001bcc:	0028      	movs	r0, r5
 8001bce:	f7ff fe61 	bl	8001894 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IN2SYS_EN_Pin;
 8001bd2:	464b      	mov	r3, r9
 8001bd4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001bd6:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8001bd8:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001bda:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bdc:	9408      	str	r4, [sp, #32]
  LL_GPIO_Init(IN2SYS_EN_GPIO_Port, &GPIO_InitStruct);
 8001bde:	a904      	add	r1, sp, #16
 8001be0:	0028      	movs	r0, r5
 8001be2:	f7ff fe57 	bl	8001894 <LL_GPIO_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001be6:	220c      	movs	r2, #12
 8001be8:	2100      	movs	r1, #0
 8001bea:	a804      	add	r0, sp, #16
 8001bec:	f000 fa84 	bl	80020f8 <memset>
  hadc.Instance = ADC1;
 8001bf0:	4f7e      	ldr	r7, [pc, #504]	; (8001dec <main+0x330>)
 8001bf2:	4b7f      	ldr	r3, [pc, #508]	; (8001df0 <main+0x334>)
 8001bf4:	603b      	str	r3, [r7, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001bf6:	607c      	str	r4, [r7, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001bf8:	60bc      	str	r4, [r7, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bfa:	60fc      	str	r4, [r7, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001bfc:	613e      	str	r6, [r7, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bfe:	465b      	mov	r3, fp
 8001c00:	617b      	str	r3, [r7, #20]
  hadc.Init.LowPowerAutoWait = ENABLE;
 8001c02:	61be      	str	r6, [r7, #24]
  hadc.Init.LowPowerAutoPowerOff = ENABLE;
 8001c04:	61fe      	str	r6, [r7, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001c06:	623c      	str	r4, [r7, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001c08:	627c      	str	r4, [r7, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c0a:	23c2      	movs	r3, #194	; 0xc2
 8001c0c:	33ff      	adds	r3, #255	; 0xff
 8001c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c10:	62fc      	str	r4, [r7, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001c12:	633c      	str	r4, [r7, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001c14:	637c      	str	r4, [r7, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001c16:	0038      	movs	r0, r7
 8001c18:	f7fe fb86 	bl	8000328 <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_9;
 8001c1c:	2309      	movs	r3, #9
 8001c1e:	9304      	str	r3, [sp, #16]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	015b      	lsls	r3, r3, #5
 8001c24:	9305      	str	r3, [sp, #20]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001c26:	2307      	movs	r3, #7
 8001c28:	9306      	str	r3, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c2a:	a904      	add	r1, sp, #16
 8001c2c:	0038      	movs	r0, r7
 8001c2e:	f7fe fce5 	bl	80005fc <HAL_ADC_ConfigChannel>
  huart1.Instance = USART1;
 8001c32:	4870      	ldr	r0, [pc, #448]	; (8001df4 <main+0x338>)
 8001c34:	4b70      	ldr	r3, [pc, #448]	; (8001df8 <main+0x33c>)
 8001c36:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001c38:	23e1      	movs	r3, #225	; 0xe1
 8001c3a:	025b      	lsls	r3, r3, #9
 8001c3c:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c3e:	6084      	str	r4, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c40:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c42:	6104      	str	r4, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c44:	230c      	movs	r3, #12
 8001c46:	6143      	str	r3, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c48:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	021b      	lsls	r3, r3, #8
 8001c4e:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c50:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8001c52:	4643      	mov	r3, r8
 8001c54:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	019b      	lsls	r3, r3, #6
 8001c5a:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c5c:	f7ff fcc0 	bl	80015e0 <HAL_UART_Init>
  hcrc.Instance = CRC;
 8001c60:	4866      	ldr	r0, [pc, #408]	; (8001dfc <main+0x340>)
 8001c62:	4b67      	ldr	r3, [pc, #412]	; (8001e00 <main+0x344>)
 8001c64:	6003      	str	r3, [r0, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001c66:	7104      	strb	r4, [r0, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001c68:	7144      	strb	r4, [r0, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001c6a:	6144      	str	r4, [r0, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001c6c:	6184      	str	r4, [r0, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001c6e:	6206      	str	r6, [r0, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001c70:	f7fe fdb0 	bl	80007d4 <HAL_CRC_Init>
 8001c74:	4643      	mov	r3, r8
 8001c76:	62ab      	str	r3, [r5, #40]	; 0x28
 8001c78:	4653      	mov	r3, sl
 8001c7a:	62ab      	str	r3, [r5, #40]	; 0x28
 8001c7c:	464b      	mov	r3, r9
 8001c7e:	62ab      	str	r3, [r5, #40]	; 0x28
	  if(u32KeyTimerCnt >= LONG_PRESS_DURATION && ON == current_powerState)
 8001c80:	4c60      	ldr	r4, [pc, #384]	; (8001e04 <main+0x348>)
 8001c82:	4d61      	ldr	r5, [pc, #388]	; (8001e08 <main+0x34c>)
	 current_powerState = state;
 8001c84:	46a8      	mov	r8, r5
 8001c86:	e039      	b.n	8001cfc <main+0x240>
	   LL_mDelay(10); /*debounce time, 10ms*/
 8001c88:	200a      	movs	r0, #10
 8001c8a:	f7ff fe5f 	bl	800194c <LL_mDelay>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001c8e:	2390      	movs	r3, #144	; 0x90
 8001c90:	05db      	lsls	r3, r3, #23
 8001c92:	691b      	ldr	r3, [r3, #16]
	   if(POWKEY_ACTIVE == Get_Switch_Key_Val(switch_input_GPIO_Port, switch_input_Pin) && !u8buttonDetectInhibit)
 8001c94:	06db      	lsls	r3, r3, #27
 8001c96:	d407      	bmi.n	8001ca8 <main+0x1ec>
 8001c98:	4b5c      	ldr	r3, [pc, #368]	; (8001e0c <main+0x350>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d103      	bne.n	8001ca8 <main+0x1ec>
		   u8KeyTimerStartFlg = TRUE;
 8001ca0:	4b5b      	ldr	r3, [pc, #364]	; (8001e10 <main+0x354>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	701a      	strb	r2, [r3, #0]
 8001ca6:	e032      	b.n	8001d0e <main+0x252>
		   u8KeyTimerStartFlg = FALSE;
 8001ca8:	4b59      	ldr	r3, [pc, #356]	; (8001e10 <main+0x354>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	701a      	strb	r2, [r3, #0]
		  if(0 < u32KeyTimerCnt && u32KeyTimerCnt <= SHORT_PRESS_DURATION
 8001cae:	4b55      	ldr	r3, [pc, #340]	; (8001e04 <main+0x348>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	1e59      	subs	r1, r3, #1
 8001cb4:	4a57      	ldr	r2, [pc, #348]	; (8001e14 <main+0x358>)
 8001cb6:	4291      	cmp	r1, r2
 8001cb8:	d85d      	bhi.n	8001d76 <main+0x2ba>
				  && ON == current_powerState)
 8001cba:	4a53      	ldr	r2, [pc, #332]	; (8001e08 <main+0x34c>)
 8001cbc:	7812      	ldrb	r2, [r2, #0]
 8001cbe:	2a03      	cmp	r2, #3
 8001cc0:	d040      	beq.n	8001d44 <main+0x288>
		  else if(SHORT_PRESS_DURATION < u32KeyTimerCnt && u32KeyTimerCnt <= MIDDLE_PRESS_DURATION)
 8001cc2:	4a55      	ldr	r2, [pc, #340]	; (8001e18 <main+0x35c>)
 8001cc4:	4694      	mov	ip, r2
 8001cc6:	4463      	add	r3, ip
 8001cc8:	4a54      	ldr	r2, [pc, #336]	; (8001e1c <main+0x360>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d979      	bls.n	8001dc2 <main+0x306>
			  u32KeyTimerCnt = 0;
 8001cce:	4b4d      	ldr	r3, [pc, #308]	; (8001e04 <main+0x348>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
	  if(current_powerState == READY_OFF)
 8001cd4:	4b4c      	ldr	r3, [pc, #304]	; (8001e08 <main+0x34c>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d10a      	bne.n	8001cf2 <main+0x236>
  WRITE_REG(GPIOx->BRR, PinMask);
 8001cdc:	2390      	movs	r3, #144	; 0x90
 8001cde:	05db      	lsls	r3, r3, #23
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	629a      	str	r2, [r3, #40]	; 0x28
 8001ce4:	3220      	adds	r2, #32
 8001ce6:	629a      	str	r2, [r3, #40]	; 0x28
 8001ce8:	3240      	adds	r2, #64	; 0x40
 8001cea:	629a      	str	r2, [r3, #40]	; 0x28
	 current_powerState = state;
 8001cec:	4b46      	ldr	r3, [pc, #280]	; (8001e08 <main+0x34c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	701a      	strb	r2, [r3, #0]
	  BatteryVol_Check_And_Send();
 8001cf2:	f7ff fe93 	bl	8001a1c <BatteryVol_Check_And_Send>
	  LL_mDelay(1);
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f7ff fe28 	bl	800194c <LL_mDelay>
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8001cfc:	2390      	movs	r3, #144	; 0x90
 8001cfe:	05db      	lsls	r3, r3, #23
 8001d00:	691b      	ldr	r3, [r3, #16]
	  if(POWKEY_ACTIVE == Get_Switch_Key_Val(switch_input_GPIO_Port, switch_input_Pin))
 8001d02:	06db      	lsls	r3, r3, #27
 8001d04:	d5c0      	bpl.n	8001c88 <main+0x1cc>
	  if(!u8KeyTimerStartFlg)
 8001d06:	4b42      	ldr	r3, [pc, #264]	; (8001e10 <main+0x354>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0cf      	beq.n	8001cae <main+0x1f2>
	  if(current_powerState == READY_OFF)
 8001d0e:	4b3e      	ldr	r3, [pc, #248]	; (8001e08 <main+0x34c>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d0e2      	beq.n	8001cdc <main+0x220>
	  if(u32KeyTimerCnt >= LONG_PRESS_DURATION && ON == current_powerState)
 8001d16:	4b42      	ldr	r3, [pc, #264]	; (8001e20 <main+0x364>)
 8001d18:	6822      	ldr	r2, [r4, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d9e9      	bls.n	8001cf2 <main+0x236>
 8001d1e:	782b      	ldrb	r3, [r5, #0]
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d1e6      	bne.n	8001cf2 <main+0x236>
  WRITE_REG(GPIOx->BRR, PinMask);
 8001d24:	2390      	movs	r3, #144	; 0x90
 8001d26:	05db      	lsls	r3, r3, #23
 8001d28:	2220      	movs	r2, #32
 8001d2a:	629a      	str	r2, [r3, #40]	; 0x28
 8001d2c:	3220      	adds	r2, #32
 8001d2e:	629a      	str	r2, [r3, #40]	; 0x28
 8001d30:	3240      	adds	r2, #64	; 0x40
 8001d32:	629a      	str	r2, [r3, #40]	; 0x28
	 current_powerState = state;
 8001d34:	2300      	movs	r3, #0
 8001d36:	4642      	mov	r2, r8
 8001d38:	7013      	strb	r3, [r2, #0]
		  u32KeyTimerCnt = 0;
 8001d3a:	4a32      	ldr	r2, [pc, #200]	; (8001e04 <main+0x348>)
 8001d3c:	6013      	str	r3, [r2, #0]
		  u8KeyTimerStartFlg = FALSE; //reset button event
 8001d3e:	4a34      	ldr	r2, [pc, #208]	; (8001e10 <main+0x354>)
 8001d40:	7013      	strb	r3, [r2, #0]
 8001d42:	e7d6      	b.n	8001cf2 <main+0x236>
			  u32KeyTimerCnt = 0;
 8001d44:	2200      	movs	r2, #0
 8001d46:	4b2f      	ldr	r3, [pc, #188]	; (8001e04 <main+0x348>)
 8001d48:	601a      	str	r2, [r3, #0]
			  Uart_TxData[2] = 1;
 8001d4a:	4e25      	ldr	r6, [pc, #148]	; (8001de0 <main+0x324>)
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	70b3      	strb	r3, [r6, #2]
			  Uart_TxData[3] = 0;
 8001d50:	70f2      	strb	r2, [r6, #3]
			  Uart_TxData[4] = SHORT_PRESS;
 8001d52:	7133      	strb	r3, [r6, #4]
			  Uart_TxData[5] = crc8_calculate(Uart_TxData, MIN_IPC_MSG_LEN + 1);
 8001d54:	2106      	movs	r1, #6
 8001d56:	0030      	movs	r0, r6
 8001d58:	f7ff fe4c 	bl	80019f4 <crc8_calculate>
 8001d5c:	7170      	strb	r0, [r6, #5]
			  HAL_UART_Transmit_IT(&huart1, Uart_TxData, MIN_IPC_MSG_LEN + 1);
 8001d5e:	4f25      	ldr	r7, [pc, #148]	; (8001df4 <main+0x338>)
 8001d60:	2206      	movs	r2, #6
 8001d62:	0031      	movs	r1, r6
 8001d64:	0038      	movs	r0, r7
 8001d66:	f7ff fa5f 	bl	8001228 <HAL_UART_Transmit_IT>
			  HAL_UART_Receive_IT(&huart1, Uart_RxData, MIN_IPC_MSG_LEN + 1);
 8001d6a:	2206      	movs	r2, #6
 8001d6c:	492d      	ldr	r1, [pc, #180]	; (8001e24 <main+0x368>)
 8001d6e:	0038      	movs	r0, r7
 8001d70:	f7ff fa8e 	bl	8001290 <HAL_UART_Receive_IT>
 8001d74:	e7cb      	b.n	8001d0e <main+0x252>
		  else if(SHORT_PRESS_DURATION < u32KeyTimerCnt && u32KeyTimerCnt <= MIDDLE_PRESS_DURATION)
 8001d76:	4a28      	ldr	r2, [pc, #160]	; (8001e18 <main+0x35c>)
 8001d78:	4694      	mov	ip, r2
 8001d7a:	4463      	add	r3, ip
 8001d7c:	4a27      	ldr	r2, [pc, #156]	; (8001e1c <main+0x360>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d8a5      	bhi.n	8001cce <main+0x212>
			  u32KeyTimerCnt = 0;
 8001d82:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <main+0x348>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
			  if(ON == current_powerState)
 8001d88:	4b1f      	ldr	r3, [pc, #124]	; (8001e08 <main+0x34c>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	d11b      	bne.n	8001dc8 <main+0x30c>
				  Uart_TxData[2] = 1;
 8001d90:	4e13      	ldr	r6, [pc, #76]	; (8001de0 <main+0x324>)
 8001d92:	2701      	movs	r7, #1
 8001d94:	70b7      	strb	r7, [r6, #2]
				  Uart_TxData[3] = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	70f3      	strb	r3, [r6, #3]
				  Uart_TxData[4] = MIDDLE_PRESS;
 8001d9a:	3302      	adds	r3, #2
 8001d9c:	7133      	strb	r3, [r6, #4]
				  Uart_TxData[5] = crc8_calculate(Uart_TxData, MIN_IPC_MSG_LEN + 1);
 8001d9e:	2106      	movs	r1, #6
 8001da0:	0030      	movs	r0, r6
 8001da2:	f7ff fe27 	bl	80019f4 <crc8_calculate>
 8001da6:	7170      	strb	r0, [r6, #5]
				  HAL_UART_Transmit_IT(&huart1, Uart_TxData, MIN_IPC_MSG_LEN + 1);
 8001da8:	2206      	movs	r2, #6
 8001daa:	0031      	movs	r1, r6
 8001dac:	4811      	ldr	r0, [pc, #68]	; (8001df4 <main+0x338>)
 8001dae:	f7ff fa3b 	bl	8001228 <HAL_UART_Transmit_IT>
				  HAL_UART_Receive_IT(&huart1, Uart_RxData, MIN_IPC_MSG_LEN + 1);
 8001db2:	2206      	movs	r2, #6
 8001db4:	491b      	ldr	r1, [pc, #108]	; (8001e24 <main+0x368>)
 8001db6:	480f      	ldr	r0, [pc, #60]	; (8001df4 <main+0x338>)
 8001db8:	f7ff fa6a 	bl	8001290 <HAL_UART_Receive_IT>
	 current_powerState = state;
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <main+0x34c>)
 8001dbe:	701f      	strb	r7, [r3, #0]
 8001dc0:	e7a9      	b.n	8001d16 <main+0x25a>
			  u32KeyTimerCnt = 0;
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <main+0x348>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001dc8:	2390      	movs	r3, #144	; 0x90
 8001dca:	05db      	lsls	r3, r3, #23
 8001dcc:	2220      	movs	r2, #32
 8001dce:	619a      	str	r2, [r3, #24]
 8001dd0:	3220      	adds	r2, #32
 8001dd2:	619a      	str	r2, [r3, #24]
 8001dd4:	3240      	adds	r2, #64	; 0x40
 8001dd6:	619a      	str	r2, [r3, #24]
	 current_powerState = state;
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <main+0x34c>)
 8001dda:	3a7d      	subs	r2, #125	; 0x7d
 8001ddc:	701a      	strb	r2, [r3, #0]
 8001dde:	e79a      	b.n	8001d16 <main+0x25a>
 8001de0:	2000002c 	.word	0x2000002c
 8001de4:	e000e100 	.word	0xe000e100
 8001de8:	40021000 	.word	0x40021000
 8001dec:	200000e0 	.word	0x200000e0
 8001df0:	40012400 	.word	0x40012400
 8001df4:	2000006c 	.word	0x2000006c
 8001df8:	40013800 	.word	0x40013800
 8001dfc:	20000048 	.word	0x20000048
 8001e00:	40023000 	.word	0x40023000
 8001e04:	20000040 	.word	0x20000040
 8001e08:	20000036 	.word	0x20000036
 8001e0c:	20000038 	.word	0x20000038
 8001e10:	20000037 	.word	0x20000037
 8001e14:	000003e7 	.word	0x000003e7
 8001e18:	fffffc17 	.word	0xfffffc17
 8001e1c:	00000bb7 	.word	0x00000bb7
 8001e20:	0000176f 	.word	0x0000176f
 8001e24:	20000020 	.word	0x20000020

08001e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e28:	b500      	push	{lr}
 8001e2a:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2c:	4b0d      	ldr	r3, [pc, #52]	; (8001e64 <HAL_MspInit+0x3c>)
 8001e2e:	6999      	ldr	r1, [r3, #24]
 8001e30:	2201      	movs	r2, #1
 8001e32:	4311      	orrs	r1, r2
 8001e34:	6199      	str	r1, [r3, #24]
 8001e36:	6999      	ldr	r1, [r3, #24]
 8001e38:	400a      	ands	r2, r1
 8001e3a:	9200      	str	r2, [sp, #0]
 8001e3c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e3e:	69da      	ldr	r2, [r3, #28]
 8001e40:	2180      	movs	r1, #128	; 0x80
 8001e42:	0549      	lsls	r1, r1, #21
 8001e44:	430a      	orrs	r2, r1
 8001e46:	61da      	str	r2, [r3, #28]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	400b      	ands	r3, r1
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001e50:	2200      	movs	r2, #0
 8001e52:	2100      	movs	r1, #0
 8001e54:	2004      	movs	r0, #4
 8001e56:	f7fe fc63 	bl	8000720 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001e5a:	2004      	movs	r0, #4
 8001e5c:	f7fe fc94 	bl	8000788 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e60:	b003      	add	sp, #12
 8001e62:	bd00      	pop	{pc}
 8001e64:	40021000 	.word	0x40021000

08001e68 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e68:	b510      	push	{r4, lr}
 8001e6a:	b088      	sub	sp, #32
 8001e6c:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6e:	2214      	movs	r2, #20
 8001e70:	2100      	movs	r1, #0
 8001e72:	a803      	add	r0, sp, #12
 8001e74:	f000 f940 	bl	80020f8 <memset>
  if(hadc->Instance==ADC1)
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_ADC_MspInit+0x64>)
 8001e7a:	6822      	ldr	r2, [r4, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d001      	beq.n	8001e84 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001e80:	b008      	add	sp, #32
 8001e82:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e84:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_ADC_MspInit+0x68>)
 8001e86:	6999      	ldr	r1, [r3, #24]
 8001e88:	2080      	movs	r0, #128	; 0x80
 8001e8a:	0080      	lsls	r0, r0, #2
 8001e8c:	4301      	orrs	r1, r0
 8001e8e:	6199      	str	r1, [r3, #24]
 8001e90:	699a      	ldr	r2, [r3, #24]
 8001e92:	4002      	ands	r2, r0
 8001e94:	9201      	str	r2, [sp, #4]
 8001e96:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e98:	695a      	ldr	r2, [r3, #20]
 8001e9a:	2180      	movs	r1, #128	; 0x80
 8001e9c:	02c9      	lsls	r1, r1, #11
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	615a      	str	r2, [r3, #20]
 8001ea2:	695b      	ldr	r3, [r3, #20]
 8001ea4:	400b      	ands	r3, r1
 8001ea6:	9302      	str	r3, [sp, #8]
 8001ea8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eae:	3301      	adds	r3, #1
 8001eb0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb2:	a903      	add	r1, sp, #12
 8001eb4:	4807      	ldr	r0, [pc, #28]	; (8001ed4 <HAL_ADC_MspInit+0x6c>)
 8001eb6:	f7fe fce5 	bl	8000884 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	200c      	movs	r0, #12
 8001ec0:	f7fe fc2e 	bl	8000720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001ec4:	200c      	movs	r0, #12
 8001ec6:	f7fe fc5f 	bl	8000788 <HAL_NVIC_EnableIRQ>
}
 8001eca:	e7d9      	b.n	8001e80 <HAL_ADC_MspInit+0x18>
 8001ecc:	40012400 	.word	0x40012400
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	48000400 	.word	0x48000400

08001ed8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001ed8:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001eda:	4b08      	ldr	r3, [pc, #32]	; (8001efc <HAL_CRC_MspInit+0x24>)
 8001edc:	6802      	ldr	r2, [r0, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d001      	beq.n	8001ee6 <HAL_CRC_MspInit+0xe>
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001ee2:	b002      	add	sp, #8
 8001ee4:	4770      	bx	lr
    __HAL_RCC_CRC_CLK_ENABLE();
 8001ee6:	4a06      	ldr	r2, [pc, #24]	; (8001f00 <HAL_CRC_MspInit+0x28>)
 8001ee8:	6951      	ldr	r1, [r2, #20]
 8001eea:	2340      	movs	r3, #64	; 0x40
 8001eec:	4319      	orrs	r1, r3
 8001eee:	6151      	str	r1, [r2, #20]
 8001ef0:	6952      	ldr	r2, [r2, #20]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	9b01      	ldr	r3, [sp, #4]
}
 8001ef8:	e7f3      	b.n	8001ee2 <HAL_CRC_MspInit+0xa>
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	40023000 	.word	0x40023000
 8001f00:	40021000 	.word	0x40021000

08001f04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f04:	b510      	push	{r4, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	0004      	movs	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0a:	2214      	movs	r2, #20
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	a803      	add	r0, sp, #12
 8001f10:	f000 f8f2 	bl	80020f8 <memset>
  if(huart->Instance==USART1)
 8001f14:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <HAL_UART_MspInit+0x70>)
 8001f16:	6822      	ldr	r2, [r4, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d001      	beq.n	8001f20 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001f1c:	b008      	add	sp, #32
 8001f1e:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f20:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <HAL_UART_MspInit+0x74>)
 8001f22:	6999      	ldr	r1, [r3, #24]
 8001f24:	2080      	movs	r0, #128	; 0x80
 8001f26:	01c0      	lsls	r0, r0, #7
 8001f28:	4301      	orrs	r1, r0
 8001f2a:	6199      	str	r1, [r3, #24]
 8001f2c:	699a      	ldr	r2, [r3, #24]
 8001f2e:	4002      	ands	r2, r0
 8001f30:	9201      	str	r2, [sp, #4]
 8001f32:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f34:	695a      	ldr	r2, [r3, #20]
 8001f36:	2180      	movs	r1, #128	; 0x80
 8001f38:	0289      	lsls	r1, r1, #10
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	615a      	str	r2, [r3, #20]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	400b      	ands	r3, r1
 8001f42:	9302      	str	r3, [sp, #8]
 8001f44:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f46:	23c0      	movs	r3, #192	; 0xc0
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f50:	3301      	adds	r3, #1
 8001f52:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001f54:	3b02      	subs	r3, #2
 8001f56:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f58:	2090      	movs	r0, #144	; 0x90
 8001f5a:	a903      	add	r1, sp, #12
 8001f5c:	05c0      	lsls	r0, r0, #23
 8001f5e:	f7fe fc91 	bl	8000884 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001f62:	2200      	movs	r2, #0
 8001f64:	2100      	movs	r1, #0
 8001f66:	201b      	movs	r0, #27
 8001f68:	f7fe fbda 	bl	8000720 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f6c:	201b      	movs	r0, #27
 8001f6e:	f7fe fc0b 	bl	8000788 <HAL_NVIC_EnableIRQ>
}
 8001f72:	e7d3      	b.n	8001f1c <HAL_UART_MspInit+0x18>
 8001f74:	40013800 	.word	0x40013800
 8001f78:	40021000 	.word	0x40021000

08001f7c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f7c:	4770      	bx	lr

08001f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f7e:	e7fe      	b.n	8001f7e <HardFault_Handler>

08001f80 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f80:	4770      	bx	lr

08001f82 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f82:	4770      	bx	lr

08001f84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f84:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(u8KeyTimerStartFlg)
 8001f86:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <SysTick_Handler+0x20>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <SysTick_Handler+0x12>
	{
		u32KeyTimerCnt++;
 8001f8e:	4a06      	ldr	r2, [pc, #24]	; (8001fa8 <SysTick_Handler+0x24>)
 8001f90:	6813      	ldr	r3, [r2, #0]
 8001f92:	3301      	adds	r3, #1
 8001f94:	6013      	str	r3, [r2, #0]
	}
	else
	{
		//u32KeyTimerCnt = 0;
	}
	adc_result_period ++;
 8001f96:	4a05      	ldr	r2, [pc, #20]	; (8001fac <SysTick_Handler+0x28>)
 8001f98:	6813      	ldr	r3, [r2, #0]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f9e:	f7fe f961 	bl	8000264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fa2:	bd10      	pop	{r4, pc}
 8001fa4:	20000037 	.word	0x20000037
 8001fa8:	20000040 	.word	0x20000040
 8001fac:	2000003c 	.word	0x2000003c

08001fb0 <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001fb0:	4770      	bx	lr
	...

08001fb4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001fb4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001fb6:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <ADC1_IRQHandler+0xc>)
 8001fb8:	f7fe fab2 	bl	8000520 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001fbc:	bd10      	pop	{r4, pc}
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	200000e0 	.word	0x200000e0

08001fc4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fc4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fc6:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <USART1_IRQHandler+0xc>)
 8001fc8:	f7ff fbd0 	bl	800176c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fcc:	bd10      	pop	{r4, pc}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	2000006c 	.word	0x2000006c

08001fd4 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001fd4:	4b11      	ldr	r3, [pc, #68]	; (800201c <SystemInit+0x48>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	2101      	movs	r1, #1
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	480f      	ldr	r0, [pc, #60]	; (8002020 <SystemInit+0x4c>)
 8001fe2:	4002      	ands	r2, r0
 8001fe4:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	480e      	ldr	r0, [pc, #56]	; (8002024 <SystemInit+0x50>)
 8001fea:	4002      	ands	r2, r0
 8001fec:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	480d      	ldr	r0, [pc, #52]	; (8002028 <SystemInit+0x54>)
 8001ff2:	4002      	ands	r2, r0
 8001ff4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	480c      	ldr	r0, [pc, #48]	; (800202c <SystemInit+0x58>)
 8001ffa:	4002      	ands	r2, r0
 8001ffc:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8001ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002000:	200f      	movs	r0, #15
 8002002:	4382      	bics	r2, r0
 8002004:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8002006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002008:	4809      	ldr	r0, [pc, #36]	; (8002030 <SystemInit+0x5c>)
 800200a:	4002      	ands	r2, r0
 800200c:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800200e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002010:	438a      	bics	r2, r1
 8002012:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]

}
 8002018:	4770      	bx	lr
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	40021000 	.word	0x40021000
 8002020:	08ffb80c 	.word	0x08ffb80c
 8002024:	fef6ffff 	.word	0xfef6ffff
 8002028:	fffbffff 	.word	0xfffbffff
 800202c:	ffc0ffff 	.word	0xffc0ffff
 8002030:	fffffeec 	.word	0xfffffeec

08002034 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{

}
 8002034:	4770      	bx	lr

08002036 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002036:	b510      	push	{r4, lr}
	if(huart->pRxBuffPtr[PAYLOAD_POS] == SHORT_PRESS_ACK)
 8002038:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800203a:	791b      	ldrb	r3, [r3, #4]
 800203c:	2bf1      	cmp	r3, #241	; 0xf1
 800203e:	d003      	beq.n	8002048 <HAL_UART_RxCpltCallback+0x12>
	{

	}
	else if(huart->pRxBuffPtr[PAYLOAD_POS] == MIDDLE_PRESS_ACK)
 8002040:	2bf2      	cmp	r3, #242	; 0xf2
 8002042:	d002      	beq.n	800204a <HAL_UART_RxCpltCallback+0x14>
	{
		Set_CurrentPowState(READY_OFF);
	}
	else if(huart->pRxBuffPtr[PAYLOAD_POS] == MIDDLE_PRESS_CANCEL_ACK)
 8002044:	2bff      	cmp	r3, #255	; 0xff
 8002046:	d004      	beq.n	8002052 <HAL_UART_RxCpltCallback+0x1c>
	}
	else
	{

	}
}
 8002048:	bd10      	pop	{r4, pc}
		Set_CurrentPowState(READY_OFF);
 800204a:	2002      	movs	r0, #2
 800204c:	f7ff fce0 	bl	8001a10 <Set_CurrentPowState>
 8002050:	e7fa      	b.n	8002048 <HAL_UART_RxCpltCallback+0x12>
		Set_CurrentPowState(ON);
 8002052:	2003      	movs	r0, #3
 8002054:	f7ff fcdc 	bl	8001a10 <Set_CurrentPowState>
}
 8002058:	e7f6      	b.n	8002048 <HAL_UART_RxCpltCallback+0x12>
	...

0800205c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800205c:	480d      	ldr	r0, [pc, #52]	; (8002094 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800205e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002060:	480d      	ldr	r0, [pc, #52]	; (8002098 <LoopForever+0x6>)
  ldr r1, =_edata
 8002062:	490e      	ldr	r1, [pc, #56]	; (800209c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002064:	4a0e      	ldr	r2, [pc, #56]	; (80020a0 <LoopForever+0xe>)
  movs r3, #0
 8002066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002068:	e002      	b.n	8002070 <LoopCopyDataInit>

0800206a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800206a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800206c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800206e:	3304      	adds	r3, #4

08002070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002074:	d3f9      	bcc.n	800206a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002076:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002078:	4c0b      	ldr	r4, [pc, #44]	; (80020a8 <LoopForever+0x16>)
  movs r3, #0
 800207a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800207c:	e001      	b.n	8002082 <LoopFillZerobss>

0800207e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800207e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002080:	3204      	adds	r2, #4

08002082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002084:	d3fb      	bcc.n	800207e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002086:	f7ff ffa5 	bl	8001fd4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800208a:	f000 f811 	bl	80020b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800208e:	f7ff fd15 	bl	8001abc <main>

08002092 <LoopForever>:

LoopForever:
    b LoopForever
 8002092:	e7fe      	b.n	8002092 <LoopForever>
  ldr   r0, =_estack
 8002094:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800209c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80020a0:	08002160 	.word	0x08002160
  ldr r2, =_sbss
 80020a4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80020a8:	2000012c 	.word	0x2000012c

080020ac <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020ac:	e7fe      	b.n	80020ac <DMA1_Channel1_IRQHandler>
	...

080020b0 <__libc_init_array>:
 80020b0:	b570      	push	{r4, r5, r6, lr}
 80020b2:	2600      	movs	r6, #0
 80020b4:	4d0c      	ldr	r5, [pc, #48]	; (80020e8 <__libc_init_array+0x38>)
 80020b6:	4c0d      	ldr	r4, [pc, #52]	; (80020ec <__libc_init_array+0x3c>)
 80020b8:	1b64      	subs	r4, r4, r5
 80020ba:	10a4      	asrs	r4, r4, #2
 80020bc:	42a6      	cmp	r6, r4
 80020be:	d109      	bne.n	80020d4 <__libc_init_array+0x24>
 80020c0:	2600      	movs	r6, #0
 80020c2:	f000 f821 	bl	8002108 <_init>
 80020c6:	4d0a      	ldr	r5, [pc, #40]	; (80020f0 <__libc_init_array+0x40>)
 80020c8:	4c0a      	ldr	r4, [pc, #40]	; (80020f4 <__libc_init_array+0x44>)
 80020ca:	1b64      	subs	r4, r4, r5
 80020cc:	10a4      	asrs	r4, r4, #2
 80020ce:	42a6      	cmp	r6, r4
 80020d0:	d105      	bne.n	80020de <__libc_init_array+0x2e>
 80020d2:	bd70      	pop	{r4, r5, r6, pc}
 80020d4:	00b3      	lsls	r3, r6, #2
 80020d6:	58eb      	ldr	r3, [r5, r3]
 80020d8:	4798      	blx	r3
 80020da:	3601      	adds	r6, #1
 80020dc:	e7ee      	b.n	80020bc <__libc_init_array+0xc>
 80020de:	00b3      	lsls	r3, r6, #2
 80020e0:	58eb      	ldr	r3, [r5, r3]
 80020e2:	4798      	blx	r3
 80020e4:	3601      	adds	r6, #1
 80020e6:	e7f2      	b.n	80020ce <__libc_init_array+0x1e>
 80020e8:	08002158 	.word	0x08002158
 80020ec:	08002158 	.word	0x08002158
 80020f0:	08002158 	.word	0x08002158
 80020f4:	0800215c 	.word	0x0800215c

080020f8 <memset>:
 80020f8:	0003      	movs	r3, r0
 80020fa:	1812      	adds	r2, r2, r0
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d100      	bne.n	8002102 <memset+0xa>
 8002100:	4770      	bx	lr
 8002102:	7019      	strb	r1, [r3, #0]
 8002104:	3301      	adds	r3, #1
 8002106:	e7f9      	b.n	80020fc <memset+0x4>

08002108 <_init>:
 8002108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800210a:	46c0      	nop			; (mov r8, r8)
 800210c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800210e:	bc08      	pop	{r3}
 8002110:	469e      	mov	lr, r3
 8002112:	4770      	bx	lr

08002114 <_fini>:
 8002114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800211a:	bc08      	pop	{r3}
 800211c:	469e      	mov	lr, r3
 800211e:	4770      	bx	lr
