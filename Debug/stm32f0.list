
stm32f0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037d4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003894  08003894  00013894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038cc  080038cc  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  080038cc  080038cc  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038cc  080038cc  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038cc  080038cc  000138cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038d0  080038d0  000138d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  080038d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000008  080038dc  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080038dc  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   000125bb  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ab9  00000000  00000000  000325eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009d0  00000000  00000000  000350a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000898  00000000  00000000  00035a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000f627  00000000  00000000  00036310  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c349  00000000  00000000  00045937  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004aa80  00000000  00000000  00051c80  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009c700  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000204c  00000000  00000000  0009c77c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000008 	.word	0x20000008
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800387c 	.word	0x0800387c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000000c 	.word	0x2000000c
 8000104:	0800387c 	.word	0x0800387c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_Init+0x24>)
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2001      	movs	r0, #1
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f003 f8db 	bl	80033f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f001 fbe8 	bl	8001a24 <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 fd7d 	bl	8000d62 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 fd51 	bl	8000d18 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000040 	.word	0x20000040

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	20000040 	.word	0x20000040

080002ac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80002b4:	230f      	movs	r3, #15
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	2200      	movs	r2, #0
 80002ba:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80002bc:	2300      	movs	r3, #0
 80002be:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d101      	bne.n	80002ca <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80002c6:	2301      	movs	r3, #1
 80002c8:	e124      	b.n	8000514 <HAL_ADC_Init+0x268>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d10a      	bne.n	80002e8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	2200      	movs	r2, #0
 80002d6:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2240      	movs	r2, #64	; 0x40
 80002dc:	2100      	movs	r1, #0
 80002de:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	0018      	movs	r0, r3
 80002e4:	f003 f8b0 	bl	8003448 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ec:	2210      	movs	r2, #16
 80002ee:	4013      	ands	r3, r2
 80002f0:	d000      	beq.n	80002f4 <HAL_ADC_Init+0x48>
 80002f2:	e102      	b.n	80004fa <HAL_ADC_Init+0x24e>
 80002f4:	230f      	movs	r3, #15
 80002f6:	18fb      	adds	r3, r7, r3
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d000      	beq.n	8000300 <HAL_ADC_Init+0x54>
 80002fe:	e0fc      	b.n	80004fa <HAL_ADC_Init+0x24e>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	2204      	movs	r2, #4
 8000308:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800030a:	d000      	beq.n	800030e <HAL_ADC_Init+0x62>
 800030c:	e0f5      	b.n	80004fa <HAL_ADC_Init+0x24e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000312:	4a82      	ldr	r2, [pc, #520]	; (800051c <HAL_ADC_Init+0x270>)
 8000314:	4013      	ands	r3, r2
 8000316:	2202      	movs	r2, #2
 8000318:	431a      	orrs	r2, r3
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	2203      	movs	r2, #3
 8000326:	4013      	ands	r3, r2
 8000328:	2b01      	cmp	r3, #1
 800032a:	d112      	bne.n	8000352 <HAL_ADC_Init+0xa6>
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	2201      	movs	r2, #1
 8000334:	4013      	ands	r3, r2
 8000336:	2b01      	cmp	r3, #1
 8000338:	d009      	beq.n	800034e <HAL_ADC_Init+0xa2>
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	68da      	ldr	r2, [r3, #12]
 8000340:	2380      	movs	r3, #128	; 0x80
 8000342:	021b      	lsls	r3, r3, #8
 8000344:	401a      	ands	r2, r3
 8000346:	2380      	movs	r3, #128	; 0x80
 8000348:	021b      	lsls	r3, r3, #8
 800034a:	429a      	cmp	r2, r3
 800034c:	d101      	bne.n	8000352 <HAL_ADC_Init+0xa6>
 800034e:	2301      	movs	r3, #1
 8000350:	e000      	b.n	8000354 <HAL_ADC_Init+0xa8>
 8000352:	2300      	movs	r3, #0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d116      	bne.n	8000386 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	68db      	ldr	r3, [r3, #12]
 800035e:	2218      	movs	r2, #24
 8000360:	4393      	bics	r3, r2
 8000362:	0019      	movs	r1, r3
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	689a      	ldr	r2, [r3, #8]
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	430a      	orrs	r2, r1
 800036e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	691b      	ldr	r3, [r3, #16]
 8000376:	009b      	lsls	r3, r3, #2
 8000378:	0899      	lsrs	r1, r3, #2
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685a      	ldr	r2, [r3, #4]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	430a      	orrs	r2, r1
 8000384:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	68da      	ldr	r2, [r3, #12]
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4963      	ldr	r1, [pc, #396]	; (8000520 <HAL_ADC_Init+0x274>)
 8000392:	400a      	ands	r2, r1
 8000394:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	69db      	ldr	r3, [r3, #28]
 80003a0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80003a2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	6a1b      	ldr	r3, [r3, #32]
 80003a8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80003aa:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d002      	beq.n	80003ba <HAL_ADC_Init+0x10e>
 80003b4:	2380      	movs	r3, #128	; 0x80
 80003b6:	015b      	lsls	r3, r3, #5
 80003b8:	e000      	b.n	80003bc <HAL_ADC_Init+0x110>
 80003ba:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80003bc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                   |
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80003c2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	691b      	ldr	r3, [r3, #16]
 80003c8:	2b02      	cmp	r3, #2
 80003ca:	d101      	bne.n	80003d0 <HAL_ADC_Init+0x124>
 80003cc:	2304      	movs	r3, #4
 80003ce:	e000      	b.n	80003d2 <HAL_ADC_Init+0x126>
 80003d0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                   |
 80003d2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d8:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80003da:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80003dc:	68ba      	ldr	r2, [r7, #8]
 80003de:	4313      	orrs	r3, r2
 80003e0:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d115      	bne.n	8000416 <HAL_ADC_Init+0x16a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	6a1b      	ldr	r3, [r3, #32]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d105      	bne.n	80003fe <HAL_ADC_Init+0x152>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80003f2:	68bb      	ldr	r3, [r7, #8]
 80003f4:	2280      	movs	r2, #128	; 0x80
 80003f6:	0252      	lsls	r2, r2, #9
 80003f8:	4313      	orrs	r3, r2
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	e00b      	b.n	8000416 <HAL_ADC_Init+0x16a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000402:	2220      	movs	r2, #32
 8000404:	431a      	orrs	r2, r3
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800040e:	2201      	movs	r2, #1
 8000410:	431a      	orrs	r2, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800041a:	23c2      	movs	r3, #194	; 0xc2
 800041c:	33ff      	adds	r3, #255	; 0xff
 800041e:	429a      	cmp	r2, r3
 8000420:	d007      	beq.n	8000432 <HAL_ADC_Init+0x186>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                    hadc->Init.ExternalTrigConvEdge );
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800042a:	4313      	orrs	r3, r2
 800042c:	68ba      	ldr	r2, [r7, #8]
 800042e:	4313      	orrs	r3, r2
 8000430:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	68d9      	ldr	r1, [r3, #12]
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	68ba      	ldr	r2, [r7, #8]
 800043e:	430a      	orrs	r2, r1
 8000440:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000446:	2380      	movs	r3, #128	; 0x80
 8000448:	055b      	lsls	r3, r3, #21
 800044a:	429a      	cmp	r2, r3
 800044c:	d01b      	beq.n	8000486 <HAL_ADC_Init+0x1da>
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000452:	2b01      	cmp	r3, #1
 8000454:	d017      	beq.n	8000486 <HAL_ADC_Init+0x1da>
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800045a:	2b02      	cmp	r3, #2
 800045c:	d013      	beq.n	8000486 <HAL_ADC_Init+0x1da>
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000462:	2b03      	cmp	r3, #3
 8000464:	d00f      	beq.n	8000486 <HAL_ADC_Init+0x1da>
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800046a:	2b04      	cmp	r3, #4
 800046c:	d00b      	beq.n	8000486 <HAL_ADC_Init+0x1da>
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000472:	2b05      	cmp	r3, #5
 8000474:	d007      	beq.n	8000486 <HAL_ADC_Init+0x1da>
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800047a:	2b06      	cmp	r3, #6
 800047c:	d003      	beq.n	8000486 <HAL_ADC_Init+0x1da>
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000482:	2b07      	cmp	r3, #7
 8000484:	d112      	bne.n	80004ac <HAL_ADC_Init+0x200>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	695a      	ldr	r2, [r3, #20]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2107      	movs	r1, #7
 8000492:	438a      	bics	r2, r1
 8000494:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	6959      	ldr	r1, [r3, #20]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80004a0:	2207      	movs	r2, #7
 80004a2:	401a      	ands	r2, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	430a      	orrs	r2, r1
 80004aa:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	68db      	ldr	r3, [r3, #12]
 80004b2:	4a1c      	ldr	r2, [pc, #112]	; (8000524 <HAL_ADC_Init+0x278>)
 80004b4:	4013      	ands	r3, r2
 80004b6:	68ba      	ldr	r2, [r7, #8]
 80004b8:	429a      	cmp	r2, r3
 80004ba:	d10b      	bne.n	80004d4 <HAL_ADC_Init+0x228>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2200      	movs	r2, #0
 80004c0:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004c6:	2203      	movs	r2, #3
 80004c8:	4393      	bics	r3, r2
 80004ca:	2201      	movs	r2, #1
 80004cc:	431a      	orrs	r2, r3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	645a      	str	r2, [r3, #68]	; 0x44
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80004d2:	e01c      	b.n	800050e <HAL_ADC_Init+0x262>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004d8:	2212      	movs	r2, #18
 80004da:	4393      	bics	r3, r2
 80004dc:	2210      	movs	r2, #16
 80004de:	431a      	orrs	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004e8:	2201      	movs	r2, #1
 80004ea:	431a      	orrs	r2, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 80004f0:	230f      	movs	r3, #15
 80004f2:	18fb      	adds	r3, r7, r3
 80004f4:	2201      	movs	r2, #1
 80004f6:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80004f8:	e009      	b.n	800050e <HAL_ADC_Init+0x262>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004fe:	2210      	movs	r2, #16
 8000500:	431a      	orrs	r2, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	645a      	str	r2, [r3, #68]	; 0x44
        
    tmp_hal_status = HAL_ERROR;
 8000506:	230f      	movs	r3, #15
 8000508:	18fb      	adds	r3, r7, r3
 800050a:	2201      	movs	r2, #1
 800050c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800050e:	230f      	movs	r3, #15
 8000510:	18fb      	adds	r3, r7, r3
 8000512:	781b      	ldrb	r3, [r3, #0]
}
 8000514:	0018      	movs	r0, r3
 8000516:	46bd      	mov	sp, r7
 8000518:	b004      	add	sp, #16
 800051a:	bd80      	pop	{r7, pc}
 800051c:	fffffefd 	.word	0xfffffefd
 8000520:	fffe0219 	.word	0xfffe0219
 8000524:	833fffe7 	.word	0x833fffe7

08000528 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000528:	b590      	push	{r4, r7, lr}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000530:	230f      	movs	r3, #15
 8000532:	18fb      	adds	r3, r7, r3
 8000534:	2200      	movs	r2, #0
 8000536:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	2204      	movs	r2, #4
 8000540:	4013      	ands	r3, r2
 8000542:	d138      	bne.n	80005b6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2240      	movs	r2, #64	; 0x40
 8000548:	5c9b      	ldrb	r3, [r3, r2]
 800054a:	2b01      	cmp	r3, #1
 800054c:	d101      	bne.n	8000552 <HAL_ADC_Start+0x2a>
 800054e:	2302      	movs	r3, #2
 8000550:	e038      	b.n	80005c4 <HAL_ADC_Start+0x9c>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2240      	movs	r2, #64	; 0x40
 8000556:	2101      	movs	r1, #1
 8000558:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d007      	beq.n	8000572 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000562:	230f      	movs	r3, #15
 8000564:	18fc      	adds	r4, r7, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	0018      	movs	r0, r3
 800056a:	f000 fa03 	bl	8000974 <ADC_Enable>
 800056e:	0003      	movs	r3, r0
 8000570:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000572:	230f      	movs	r3, #15
 8000574:	18fb      	adds	r3, r7, r3
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d120      	bne.n	80005be <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000580:	4a12      	ldr	r2, [pc, #72]	; (80005cc <HAL_ADC_Start+0xa4>)
 8000582:	4013      	ands	r3, r2
 8000584:	2280      	movs	r2, #128	; 0x80
 8000586:	0052      	lsls	r2, r2, #1
 8000588:	431a      	orrs	r2, r3
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2200      	movs	r2, #0
 8000592:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	2240      	movs	r2, #64	; 0x40
 8000598:	2100      	movs	r1, #0
 800059a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	221c      	movs	r2, #28
 80005a2:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	689a      	ldr	r2, [r3, #8]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2104      	movs	r1, #4
 80005b0:	430a      	orrs	r2, r1
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	e003      	b.n	80005be <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80005b6:	230f      	movs	r3, #15
 80005b8:	18fb      	adds	r3, r7, r3
 80005ba:	2202      	movs	r2, #2
 80005bc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80005be:	230f      	movs	r3, #15
 80005c0:	18fb      	adds	r3, r7, r3
 80005c2:	781b      	ldrb	r3, [r3, #0]
}
 80005c4:	0018      	movs	r0, r3
 80005c6:	46bd      	mov	sp, r7
 80005c8:	b005      	add	sp, #20
 80005ca:	bd90      	pop	{r4, r7, pc}
 80005cc:	fffff0fe 	.word	0xfffff0fe

080005d0 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 80005d0:	b5b0      	push	{r4, r5, r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005d8:	230f      	movs	r3, #15
 80005da:	18fb      	adds	r3, r7, r3
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2240      	movs	r2, #64	; 0x40
 80005e4:	5c9b      	ldrb	r3, [r3, r2]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d101      	bne.n	80005ee <HAL_ADC_Stop+0x1e>
 80005ea:	2302      	movs	r3, #2
 80005ec:	e02a      	b.n	8000644 <HAL_ADC_Stop+0x74>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2240      	movs	r2, #64	; 0x40
 80005f2:	2101      	movs	r1, #1
 80005f4:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80005f6:	250f      	movs	r5, #15
 80005f8:	197c      	adds	r4, r7, r5
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	0018      	movs	r0, r3
 80005fe:	f000 fa9e 	bl	8000b3e <ADC_ConversionStop>
 8000602:	0003      	movs	r3, r0
 8000604:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000606:	197b      	adds	r3, r7, r5
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d113      	bne.n	8000636 <HAL_ADC_Stop+0x66>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800060e:	250f      	movs	r5, #15
 8000610:	197c      	adds	r4, r7, r5
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	0018      	movs	r0, r3
 8000616:	f000 fa29 	bl	8000a6c <ADC_Disable>
 800061a:	0003      	movs	r3, r0
 800061c:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800061e:	197b      	adds	r3, r7, r5
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d107      	bne.n	8000636 <HAL_ADC_Stop+0x66>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800062a:	4a08      	ldr	r2, [pc, #32]	; (800064c <HAL_ADC_Stop+0x7c>)
 800062c:	4013      	ands	r3, r2
 800062e:	2201      	movs	r2, #1
 8000630:	431a      	orrs	r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2240      	movs	r2, #64	; 0x40
 800063a:	2100      	movs	r1, #0
 800063c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800063e:	230f      	movs	r3, #15
 8000640:	18fb      	adds	r3, r7, r3
 8000642:	781b      	ldrb	r3, [r3, #0]
}
 8000644:	0018      	movs	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	b004      	add	sp, #16
 800064a:	bdb0      	pop	{r4, r5, r7, pc}
 800064c:	fffffefe 	.word	0xfffffefe

08000650 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	2b08      	cmp	r3, #8
 8000660:	d102      	bne.n	8000668 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8000662:	2308      	movs	r3, #8
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	e013      	b.n	8000690 <HAL_ADC_PollForConversion+0x40>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	68db      	ldr	r3, [r3, #12]
 800066e:	2201      	movs	r2, #1
 8000670:	4013      	ands	r3, r2
 8000672:	d00b      	beq.n	800068c <HAL_ADC_PollForConversion+0x3c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000678:	2220      	movs	r2, #32
 800067a:	431a      	orrs	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2240      	movs	r2, #64	; 0x40
 8000684:	2100      	movs	r1, #0
 8000686:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8000688:	2301      	movs	r3, #1
 800068a:	e06b      	b.n	8000764 <HAL_ADC_PollForConversion+0x114>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800068c:	230c      	movs	r3, #12
 800068e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000690:	f7ff fe02 	bl	8000298 <HAL_GetTick>
 8000694:	0003      	movs	r3, r0
 8000696:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000698:	e019      	b.n	80006ce <HAL_ADC_PollForConversion+0x7e>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	3301      	adds	r3, #1
 800069e:	d016      	beq.n	80006ce <HAL_ADC_PollForConversion+0x7e>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80006a0:	683b      	ldr	r3, [r7, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d007      	beq.n	80006b6 <HAL_ADC_PollForConversion+0x66>
 80006a6:	f7ff fdf7 	bl	8000298 <HAL_GetTick>
 80006aa:	0002      	movs	r2, r0
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	1ad3      	subs	r3, r2, r3
 80006b0:	683a      	ldr	r2, [r7, #0]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d20b      	bcs.n	80006ce <HAL_ADC_PollForConversion+0x7e>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ba:	2204      	movs	r2, #4
 80006bc:	431a      	orrs	r2, r3
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2240      	movs	r2, #64	; 0x40
 80006c6:	2100      	movs	r1, #0
 80006c8:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80006ca:	2303      	movs	r3, #3
 80006cc:	e04a      	b.n	8000764 <HAL_ADC_PollForConversion+0x114>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	68fa      	ldr	r2, [r7, #12]
 80006d6:	4013      	ands	r3, r2
 80006d8:	d0df      	beq.n	800069a <HAL_ADC_PollForConversion+0x4a>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006de:	2280      	movs	r2, #128	; 0x80
 80006e0:	0092      	lsls	r2, r2, #2
 80006e2:	431a      	orrs	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	68da      	ldr	r2, [r3, #12]
 80006ee:	23c0      	movs	r3, #192	; 0xc0
 80006f0:	011b      	lsls	r3, r3, #4
 80006f2:	4013      	ands	r3, r2
 80006f4:	d12d      	bne.n	8000752 <HAL_ADC_PollForConversion+0x102>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6a1b      	ldr	r3, [r3, #32]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d129      	bne.n	8000752 <HAL_ADC_PollForConversion+0x102>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2208      	movs	r2, #8
 8000706:	4013      	ands	r3, r2
 8000708:	2b08      	cmp	r3, #8
 800070a:	d122      	bne.n	8000752 <HAL_ADC_PollForConversion+0x102>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	2204      	movs	r2, #4
 8000714:	4013      	ands	r3, r2
 8000716:	d110      	bne.n	800073a <HAL_ADC_PollForConversion+0xea>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	685a      	ldr	r2, [r3, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	210c      	movs	r1, #12
 8000724:	438a      	bics	r2, r1
 8000726:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072c:	4a0f      	ldr	r2, [pc, #60]	; (800076c <HAL_ADC_PollForConversion+0x11c>)
 800072e:	4013      	ands	r3, r2
 8000730:	2201      	movs	r2, #1
 8000732:	431a      	orrs	r2, r3
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	645a      	str	r2, [r3, #68]	; 0x44
 8000738:	e00b      	b.n	8000752 <HAL_ADC_PollForConversion+0x102>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073e:	2220      	movs	r2, #32
 8000740:	431a      	orrs	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800074a:	2201      	movs	r2, #1
 800074c:	431a      	orrs	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	649a      	str	r2, [r3, #72]	; 0x48
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	699b      	ldr	r3, [r3, #24]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d103      	bne.n	8000762 <HAL_ADC_PollForConversion+0x112>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	220c      	movs	r2, #12
 8000760:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000762:	2300      	movs	r3, #0
}
 8000764:	0018      	movs	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	b004      	add	sp, #16
 800076a:	bd80      	pop	{r7, pc}
 800076c:	fffffefe 	.word	0xfffffefe

08000770 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800077e:	0018      	movs	r0, r3
 8000780:	46bd      	mov	sp, r7
 8000782:	b002      	add	sp, #8
 8000784:	bd80      	pop	{r7, pc}
	...

08000788 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000792:	230f      	movs	r3, #15
 8000794:	18fb      	adds	r3, r7, r3
 8000796:	2200      	movs	r2, #0
 8000798:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007a2:	2380      	movs	r3, #128	; 0x80
 80007a4:	055b      	lsls	r3, r3, #21
 80007a6:	429a      	cmp	r2, r3
 80007a8:	d011      	beq.n	80007ce <HAL_ADC_ConfigChannel+0x46>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d00d      	beq.n	80007ce <HAL_ADC_ConfigChannel+0x46>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007b6:	2b02      	cmp	r3, #2
 80007b8:	d009      	beq.n	80007ce <HAL_ADC_ConfigChannel+0x46>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007be:	2b03      	cmp	r3, #3
 80007c0:	d005      	beq.n	80007ce <HAL_ADC_ConfigChannel+0x46>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	d001      	beq.n	80007ce <HAL_ADC_ConfigChannel+0x46>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2240      	movs	r2, #64	; 0x40
 80007d2:	5c9b      	ldrb	r3, [r3, r2]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d101      	bne.n	80007dc <HAL_ADC_ConfigChannel+0x54>
 80007d8:	2302      	movs	r3, #2
 80007da:	e0bb      	b.n	8000954 <HAL_ADC_ConfigChannel+0x1cc>
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2240      	movs	r2, #64	; 0x40
 80007e0:	2101      	movs	r1, #1
 80007e2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	2204      	movs	r2, #4
 80007ec:	4013      	ands	r3, r2
 80007ee:	d000      	beq.n	80007f2 <HAL_ADC_ConfigChannel+0x6a>
 80007f0:	e09f      	b.n	8000932 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	4a59      	ldr	r2, [pc, #356]	; (800095c <HAL_ADC_ConfigChannel+0x1d4>)
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d100      	bne.n	80007fe <HAL_ADC_ConfigChannel+0x76>
 80007fc:	e077      	b.n	80008ee <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2201      	movs	r2, #1
 800080a:	409a      	lsls	r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	430a      	orrs	r2, r1
 8000812:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	055b      	lsls	r3, r3, #21
 800081c:	429a      	cmp	r2, r3
 800081e:	d037      	beq.n	8000890 <HAL_ADC_ConfigChannel+0x108>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000824:	2b01      	cmp	r3, #1
 8000826:	d033      	beq.n	8000890 <HAL_ADC_ConfigChannel+0x108>
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800082c:	2b02      	cmp	r3, #2
 800082e:	d02f      	beq.n	8000890 <HAL_ADC_ConfigChannel+0x108>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000834:	2b03      	cmp	r3, #3
 8000836:	d02b      	beq.n	8000890 <HAL_ADC_ConfigChannel+0x108>
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800083c:	2b04      	cmp	r3, #4
 800083e:	d027      	beq.n	8000890 <HAL_ADC_ConfigChannel+0x108>
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000844:	2b05      	cmp	r3, #5
 8000846:	d023      	beq.n	8000890 <HAL_ADC_ConfigChannel+0x108>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800084c:	2b06      	cmp	r3, #6
 800084e:	d01f      	beq.n	8000890 <HAL_ADC_ConfigChannel+0x108>
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000854:	2b07      	cmp	r3, #7
 8000856:	d01b      	beq.n	8000890 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	689a      	ldr	r2, [r3, #8]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	695b      	ldr	r3, [r3, #20]
 8000862:	2107      	movs	r1, #7
 8000864:	400b      	ands	r3, r1
 8000866:	429a      	cmp	r2, r3
 8000868:	d012      	beq.n	8000890 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	695a      	ldr	r2, [r3, #20]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2107      	movs	r1, #7
 8000876:	438a      	bics	r2, r1
 8000878:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	6959      	ldr	r1, [r3, #20]
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	689b      	ldr	r3, [r3, #8]
 8000884:	2207      	movs	r2, #7
 8000886:	401a      	ands	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	430a      	orrs	r2, r1
 800088e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b10      	cmp	r3, #16
 8000896:	d003      	beq.n	80008a0 <HAL_ADC_ConfigChannel+0x118>
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	2b11      	cmp	r3, #17
 800089e:	d152      	bne.n	8000946 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80008a0:	4b2f      	ldr	r3, [pc, #188]	; (8000960 <HAL_ADC_ConfigChannel+0x1d8>)
 80008a2:	6819      	ldr	r1, [r3, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	2b10      	cmp	r3, #16
 80008aa:	d102      	bne.n	80008b2 <HAL_ADC_ConfigChannel+0x12a>
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	041b      	lsls	r3, r3, #16
 80008b0:	e001      	b.n	80008b6 <HAL_ADC_ConfigChannel+0x12e>
 80008b2:	2380      	movs	r3, #128	; 0x80
 80008b4:	03db      	lsls	r3, r3, #15
 80008b6:	4a2a      	ldr	r2, [pc, #168]	; (8000960 <HAL_ADC_ConfigChannel+0x1d8>)
 80008b8:	430b      	orrs	r3, r1
 80008ba:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2b10      	cmp	r3, #16
 80008c2:	d140      	bne.n	8000946 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80008c4:	4b27      	ldr	r3, [pc, #156]	; (8000964 <HAL_ADC_ConfigChannel+0x1dc>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4927      	ldr	r1, [pc, #156]	; (8000968 <HAL_ADC_ConfigChannel+0x1e0>)
 80008ca:	0018      	movs	r0, r3
 80008cc:	f7ff fc1c 	bl	8000108 <__udivsi3>
 80008d0:	0003      	movs	r3, r0
 80008d2:	001a      	movs	r2, r3
 80008d4:	0013      	movs	r3, r2
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	189b      	adds	r3, r3, r2
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80008de:	e002      	b.n	80008e6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	3b01      	subs	r3, #1
 80008e4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d1f9      	bne.n	80008e0 <HAL_ADC_ConfigChannel+0x158>
 80008ec:	e02b      	b.n	8000946 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	2101      	movs	r1, #1
 80008fa:	4099      	lsls	r1, r3
 80008fc:	000b      	movs	r3, r1
 80008fe:	43d9      	mvns	r1, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	400a      	ands	r2, r1
 8000906:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2b10      	cmp	r3, #16
 800090e:	d003      	beq.n	8000918 <HAL_ADC_ConfigChannel+0x190>
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2b11      	cmp	r3, #17
 8000916:	d116      	bne.n	8000946 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <HAL_ADC_ConfigChannel+0x1d8>)
 800091a:	6819      	ldr	r1, [r3, #0]
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b10      	cmp	r3, #16
 8000922:	d101      	bne.n	8000928 <HAL_ADC_ConfigChannel+0x1a0>
 8000924:	4a11      	ldr	r2, [pc, #68]	; (800096c <HAL_ADC_ConfigChannel+0x1e4>)
 8000926:	e000      	b.n	800092a <HAL_ADC_ConfigChannel+0x1a2>
 8000928:	4a11      	ldr	r2, [pc, #68]	; (8000970 <HAL_ADC_ConfigChannel+0x1e8>)
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <HAL_ADC_ConfigChannel+0x1d8>)
 800092c:	400a      	ands	r2, r1
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	e009      	b.n	8000946 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	2220      	movs	r2, #32
 8000938:	431a      	orrs	r2, r3
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 800093e:	230f      	movs	r3, #15
 8000940:	18fb      	adds	r3, r7, r3
 8000942:	2201      	movs	r2, #1
 8000944:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2240      	movs	r2, #64	; 0x40
 800094a:	2100      	movs	r1, #0
 800094c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800094e:	230f      	movs	r3, #15
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	781b      	ldrb	r3, [r3, #0]
}
 8000954:	0018      	movs	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	b004      	add	sp, #16
 800095a:	bd80      	pop	{r7, pc}
 800095c:	00001001 	.word	0x00001001
 8000960:	40012708 	.word	0x40012708
 8000964:	20000004 	.word	0x20000004
 8000968:	000f4240 	.word	0x000f4240
 800096c:	ff7fffff 	.word	0xff7fffff
 8000970:	ffbfffff 	.word	0xffbfffff

08000974 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800097c:	2300      	movs	r3, #0
 800097e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000980:	2300      	movs	r3, #0
 8000982:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	689b      	ldr	r3, [r3, #8]
 800098a:	2203      	movs	r2, #3
 800098c:	4013      	ands	r3, r2
 800098e:	2b01      	cmp	r3, #1
 8000990:	d112      	bne.n	80009b8 <ADC_Enable+0x44>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2201      	movs	r2, #1
 800099a:	4013      	ands	r3, r2
 800099c:	2b01      	cmp	r3, #1
 800099e:	d009      	beq.n	80009b4 <ADC_Enable+0x40>
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	68da      	ldr	r2, [r3, #12]
 80009a6:	2380      	movs	r3, #128	; 0x80
 80009a8:	021b      	lsls	r3, r3, #8
 80009aa:	401a      	ands	r2, r3
 80009ac:	2380      	movs	r3, #128	; 0x80
 80009ae:	021b      	lsls	r3, r3, #8
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d101      	bne.n	80009b8 <ADC_Enable+0x44>
 80009b4:	2301      	movs	r3, #1
 80009b6:	e000      	b.n	80009ba <ADC_Enable+0x46>
 80009b8:	2300      	movs	r3, #0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d14b      	bne.n	8000a56 <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	4a26      	ldr	r2, [pc, #152]	; (8000a60 <ADC_Enable+0xec>)
 80009c6:	4013      	ands	r3, r2
 80009c8:	d00d      	beq.n	80009e6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ce:	2210      	movs	r2, #16
 80009d0:	431a      	orrs	r2, r3
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	645a      	str	r2, [r3, #68]	; 0x44
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009da:	2201      	movs	r2, #1
 80009dc:	431a      	orrs	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	e038      	b.n	8000a58 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	689a      	ldr	r2, [r3, #8]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2101      	movs	r1, #1
 80009f2:	430a      	orrs	r2, r1
 80009f4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80009f6:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <ADC_Enable+0xf0>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	491b      	ldr	r1, [pc, #108]	; (8000a68 <ADC_Enable+0xf4>)
 80009fc:	0018      	movs	r0, r3
 80009fe:	f7ff fb83 	bl	8000108 <__udivsi3>
 8000a02:	0003      	movs	r3, r0
 8000a04:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000a06:	e002      	b.n	8000a0e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d1f9      	bne.n	8000a08 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8000a14:	f7ff fc40 	bl	8000298 <HAL_GetTick>
 8000a18:	0003      	movs	r3, r0
 8000a1a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000a1c:	e014      	b.n	8000a48 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000a1e:	f7ff fc3b 	bl	8000298 <HAL_GetTick>
 8000a22:	0002      	movs	r2, r0
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	1ad3      	subs	r3, r2, r3
 8000a28:	2b02      	cmp	r3, #2
 8000a2a:	d90d      	bls.n	8000a48 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a30:	2210      	movs	r2, #16
 8000a32:	431a      	orrs	r2, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	431a      	orrs	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8000a44:	2301      	movs	r3, #1
 8000a46:	e007      	b.n	8000a58 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2201      	movs	r2, #1
 8000a50:	4013      	ands	r3, r2
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	d1e3      	bne.n	8000a1e <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	0018      	movs	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	b004      	add	sp, #16
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	80000017 	.word	0x80000017
 8000a64:	20000004 	.word	0x20000004
 8000a68:	000f4240 	.word	0x000f4240

08000a6c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	2203      	movs	r2, #3
 8000a80:	4013      	ands	r3, r2
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d112      	bne.n	8000aac <ADC_Disable+0x40>
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4013      	ands	r3, r2
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d009      	beq.n	8000aa8 <ADC_Disable+0x3c>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	68da      	ldr	r2, [r3, #12]
 8000a9a:	2380      	movs	r3, #128	; 0x80
 8000a9c:	021b      	lsls	r3, r3, #8
 8000a9e:	401a      	ands	r2, r3
 8000aa0:	2380      	movs	r3, #128	; 0x80
 8000aa2:	021b      	lsls	r3, r3, #8
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	d101      	bne.n	8000aac <ADC_Disable+0x40>
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e000      	b.n	8000aae <ADC_Disable+0x42>
 8000aac:	2300      	movs	r3, #0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d040      	beq.n	8000b34 <ADC_Disable+0xc8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	2205      	movs	r2, #5
 8000aba:	4013      	ands	r3, r2
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d110      	bne.n	8000ae2 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	689a      	ldr	r2, [r3, #8]
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	2102      	movs	r1, #2
 8000acc:	430a      	orrs	r2, r1
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ad8:	f7ff fbde 	bl	8000298 <HAL_GetTick>
 8000adc:	0003      	movs	r3, r0
 8000ade:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000ae0:	e022      	b.n	8000b28 <ADC_Disable+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ae6:	2210      	movs	r2, #16
 8000ae8:	431a      	orrs	r2, r3
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	645a      	str	r2, [r3, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000af2:	2201      	movs	r2, #1
 8000af4:	431a      	orrs	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	649a      	str	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e01b      	b.n	8000b36 <ADC_Disable+0xca>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000afe:	f7ff fbcb 	bl	8000298 <HAL_GetTick>
 8000b02:	0002      	movs	r2, r0
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d90d      	bls.n	8000b28 <ADC_Disable+0xbc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b10:	2210      	movs	r2, #16
 8000b12:	431a      	orrs	r2, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	431a      	orrs	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	e006      	b.n	8000b36 <ADC_Disable+0xca>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	689b      	ldr	r3, [r3, #8]
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4013      	ands	r3, r2
 8000b32:	d1e4      	bne.n	8000afe <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	0018      	movs	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	b004      	add	sp, #16
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b084      	sub	sp, #16
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	689b      	ldr	r3, [r3, #8]
 8000b50:	2204      	movs	r2, #4
 8000b52:	4013      	ands	r3, r2
 8000b54:	d033      	beq.n	8000bbe <ADC_ConversionStop+0x80>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	2204      	movs	r2, #4
 8000b5e:	4013      	ands	r3, r2
 8000b60:	d00d      	beq.n	8000b7e <ADC_ConversionStop+0x40>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	2202      	movs	r2, #2
 8000b6a:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000b6c:	d107      	bne.n	8000b7e <ADC_ConversionStop+0x40>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	689a      	ldr	r2, [r3, #8]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2110      	movs	r1, #16
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000b7e:	f7ff fb8b 	bl	8000298 <HAL_GetTick>
 8000b82:	0003      	movs	r3, r0
 8000b84:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000b86:	e014      	b.n	8000bb2 <ADC_ConversionStop+0x74>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000b88:	f7ff fb86 	bl	8000298 <HAL_GetTick>
 8000b8c:	0002      	movs	r2, r0
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d90d      	bls.n	8000bb2 <ADC_ConversionStop+0x74>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9a:	2210      	movs	r2, #16
 8000b9c:	431a      	orrs	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	431a      	orrs	r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e006      	b.n	8000bc0 <ADC_ConversionStop+0x82>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	2204      	movs	r2, #4
 8000bba:	4013      	ands	r3, r2
 8000bbc:	d1e4      	bne.n	8000b88 <ADC_ConversionStop+0x4a>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000bbe:	2300      	movs	r3, #0
}
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b004      	add	sp, #16
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	0002      	movs	r2, r0
 8000bd0:	1dfb      	adds	r3, r7, #7
 8000bd2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	001a      	movs	r2, r3
 8000bda:	231f      	movs	r3, #31
 8000bdc:	401a      	ands	r2, r3
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <NVIC_EnableIRQ+0x28>)
 8000be0:	2101      	movs	r1, #1
 8000be2:	4091      	lsls	r1, r2
 8000be4:	000a      	movs	r2, r1
 8000be6:	601a      	str	r2, [r3, #0]
}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b002      	add	sp, #8
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	e000e100 	.word	0xe000e100

08000bf4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	0002      	movs	r2, r0
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b7f      	cmp	r3, #127	; 0x7f
 8000c08:	d932      	bls.n	8000c70 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c0a:	4a2f      	ldr	r2, [pc, #188]	; (8000cc8 <NVIC_SetPriority+0xd4>)
 8000c0c:	1dfb      	adds	r3, r7, #7
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	0019      	movs	r1, r3
 8000c12:	230f      	movs	r3, #15
 8000c14:	400b      	ands	r3, r1
 8000c16:	3b08      	subs	r3, #8
 8000c18:	089b      	lsrs	r3, r3, #2
 8000c1a:	3306      	adds	r3, #6
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	18d3      	adds	r3, r2, r3
 8000c20:	3304      	adds	r3, #4
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	1dfa      	adds	r2, r7, #7
 8000c26:	7812      	ldrb	r2, [r2, #0]
 8000c28:	0011      	movs	r1, r2
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	400a      	ands	r2, r1
 8000c2e:	00d2      	lsls	r2, r2, #3
 8000c30:	21ff      	movs	r1, #255	; 0xff
 8000c32:	4091      	lsls	r1, r2
 8000c34:	000a      	movs	r2, r1
 8000c36:	43d2      	mvns	r2, r2
 8000c38:	401a      	ands	r2, r3
 8000c3a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	019b      	lsls	r3, r3, #6
 8000c40:	22ff      	movs	r2, #255	; 0xff
 8000c42:	401a      	ands	r2, r3
 8000c44:	1dfb      	adds	r3, r7, #7
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	0018      	movs	r0, r3
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	4003      	ands	r3, r0
 8000c4e:	00db      	lsls	r3, r3, #3
 8000c50:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c52:	481d      	ldr	r0, [pc, #116]	; (8000cc8 <NVIC_SetPriority+0xd4>)
 8000c54:	1dfb      	adds	r3, r7, #7
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	001c      	movs	r4, r3
 8000c5a:	230f      	movs	r3, #15
 8000c5c:	4023      	ands	r3, r4
 8000c5e:	3b08      	subs	r3, #8
 8000c60:	089b      	lsrs	r3, r3, #2
 8000c62:	430a      	orrs	r2, r1
 8000c64:	3306      	adds	r3, #6
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	18c3      	adds	r3, r0, r3
 8000c6a:	3304      	adds	r3, #4
 8000c6c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c6e:	e027      	b.n	8000cc0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c70:	4a16      	ldr	r2, [pc, #88]	; (8000ccc <NVIC_SetPriority+0xd8>)
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	b25b      	sxtb	r3, r3
 8000c78:	089b      	lsrs	r3, r3, #2
 8000c7a:	33c0      	adds	r3, #192	; 0xc0
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	589b      	ldr	r3, [r3, r2]
 8000c80:	1dfa      	adds	r2, r7, #7
 8000c82:	7812      	ldrb	r2, [r2, #0]
 8000c84:	0011      	movs	r1, r2
 8000c86:	2203      	movs	r2, #3
 8000c88:	400a      	ands	r2, r1
 8000c8a:	00d2      	lsls	r2, r2, #3
 8000c8c:	21ff      	movs	r1, #255	; 0xff
 8000c8e:	4091      	lsls	r1, r2
 8000c90:	000a      	movs	r2, r1
 8000c92:	43d2      	mvns	r2, r2
 8000c94:	401a      	ands	r2, r3
 8000c96:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	019b      	lsls	r3, r3, #6
 8000c9c:	22ff      	movs	r2, #255	; 0xff
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	1dfb      	adds	r3, r7, #7
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	4003      	ands	r3, r0
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cae:	4807      	ldr	r0, [pc, #28]	; (8000ccc <NVIC_SetPriority+0xd8>)
 8000cb0:	1dfb      	adds	r3, r7, #7
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	b25b      	sxtb	r3, r3
 8000cb6:	089b      	lsrs	r3, r3, #2
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	33c0      	adds	r3, #192	; 0xc0
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	501a      	str	r2, [r3, r0]
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	b003      	add	sp, #12
 8000cc6:	bd90      	pop	{r4, r7, pc}
 8000cc8:	e000ed00 	.word	0xe000ed00
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	4a0c      	ldr	r2, [pc, #48]	; (8000d10 <SysTick_Config+0x40>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d901      	bls.n	8000ce6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e010      	b.n	8000d08 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <SysTick_Config+0x44>)
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	3a01      	subs	r2, #1
 8000cec:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cee:	2301      	movs	r3, #1
 8000cf0:	425b      	negs	r3, r3
 8000cf2:	2103      	movs	r1, #3
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f7ff ff7d 	bl	8000bf4 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <SysTick_Config+0x44>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <SysTick_Config+0x44>)
 8000d02:	2207      	movs	r2, #7
 8000d04:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	0018      	movs	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b002      	add	sp, #8
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	00ffffff 	.word	0x00ffffff
 8000d14:	e000e010 	.word	0xe000e010

08000d18 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	210f      	movs	r1, #15
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	1c02      	adds	r2, r0, #0
 8000d28:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	b25b      	sxtb	r3, r3
 8000d32:	0011      	movs	r1, r2
 8000d34:	0018      	movs	r0, r3
 8000d36:	f7ff ff5d 	bl	8000bf4 <NVIC_SetPriority>
}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b004      	add	sp, #16
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	0002      	movs	r2, r0
 8000d4a:	1dfb      	adds	r3, r7, #7
 8000d4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d4e:	1dfb      	adds	r3, r7, #7
 8000d50:	781b      	ldrb	r3, [r3, #0]
 8000d52:	b25b      	sxtb	r3, r3
 8000d54:	0018      	movs	r0, r3
 8000d56:	f7ff ff37 	bl	8000bc8 <NVIC_EnableIRQ>
}
 8000d5a:	46c0      	nop			; (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b002      	add	sp, #8
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b082      	sub	sp, #8
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff ffaf 	bl	8000cd0 <SysTick_Config>
 8000d72:	0003      	movs	r3, r0
}
 8000d74:	0018      	movs	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	b002      	add	sp, #8
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and initialize the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if(hcrc == NULL)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e041      	b.n	8000e12 <HAL_CRC_Init+0x96>
  }
  
  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if(hcrc->State == HAL_CRC_STATE_RESET)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	7f5b      	ldrb	r3, [r3, #29]
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d106      	bne.n	8000da6 <HAL_CRC_Init+0x2a>
  {   
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	0018      	movs	r0, r3
 8000da2:	f002 fbb7 	bl	8003514 <HAL_CRC_MspInit>
  }
  
  hcrc->State = HAL_CRC_STATE_BUSY; 
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2202      	movs	r2, #2
 8000daa:	775a      	strb	r2, [r3, #29]
  /* Extended initialization: if programmable polynomial feature is 
     applicable to device, set default or non-default generating 
     polynomial according to hcrc->Init parameters.
     If feature is non-applicable to device in use, HAL_CRCEx_Init straight 
     away reports HAL_OK. */
  if (HAL_CRCEx_Init(hcrc) != HAL_OK)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	0018      	movs	r0, r3
 8000db0:	f000 f833 	bl	8000e1a <HAL_CRCEx_Init>
 8000db4:	1e03      	subs	r3, r0, #0
 8000db6:	d001      	beq.n	8000dbc <HAL_CRC_Init+0x40>
  {
    return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e02a      	b.n	8000e12 <HAL_CRC_Init+0x96>
  }
  
  /* check whether or not non-default CRC initial value has been 
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	795b      	ldrb	r3, [r3, #5]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d105      	bne.n	8000dd0 <HAL_CRC_Init+0x54>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);  
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4252      	negs	r2, r2
 8000dcc:	611a      	str	r2, [r3, #16]
 8000dce:	e004      	b.n	8000dda <HAL_CRC_Init+0x5e>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	6912      	ldr	r2, [r2, #16]
 8000dd8:	611a      	str	r2, [r3, #16]
  }
  

  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode); 
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	2260      	movs	r2, #96	; 0x60
 8000de2:	4393      	bics	r3, r2
 8000de4:	0019      	movs	r1, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	695a      	ldr	r2, [r3, #20]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	430a      	orrs	r2, r1
 8000df0:	609a      	str	r2, [r3, #8]
  
  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode)); 
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);  
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	2280      	movs	r2, #128	; 0x80
 8000dfa:	4393      	bics	r3, r2
 8000dfc:	0019      	movs	r1, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	699a      	ldr	r2, [r3, #24]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	430a      	orrs	r2, r1
 8000e08:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	775a      	strb	r2, [r3, #29]
  
  /* Return function status */
  return HAL_OK;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	0018      	movs	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b002      	add	sp, #8
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_CRCEx_Init>:
  * @brief  Extended initialization to set generating polynomial
  * @param  hcrc CRC handle             
  * @retval HAL status
  */             
HAL_StatusTypeDef HAL_CRCEx_Init(CRC_HandleTypeDef *hcrc)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b082      	sub	sp, #8
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
      return HAL_ERROR;
    }
  }
#endif /* defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F091xC) || defined (STM32F098xx) */    

   return HAL_OK;
 8000e22:	2300      	movs	r3, #0
}
 8000e24:	0018      	movs	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	b002      	add	sp, #8
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e34:	230f      	movs	r3, #15
 8000e36:	18fb      	adds	r3, r7, r3
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2221      	movs	r2, #33	; 0x21
 8000e40:	5c9b      	ldrb	r3, [r3, r2]
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	2b02      	cmp	r3, #2
 8000e46:	d007      	beq.n	8000e58 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2204      	movs	r2, #4
 8000e4c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e4e:	230f      	movs	r3, #15
 8000e50:	18fb      	adds	r3, r7, r3
 8000e52:	2201      	movs	r2, #1
 8000e54:	701a      	strb	r2, [r3, #0]
 8000e56:	e028      	b.n	8000eaa <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	210e      	movs	r1, #14
 8000e64:	438a      	bics	r2, r1
 8000e66:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2101      	movs	r1, #1
 8000e74:	438a      	bics	r2, r1
 8000e76:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e80:	2101      	movs	r1, #1
 8000e82:	4091      	lsls	r1, r2
 8000e84:	000a      	movs	r2, r1
 8000e86:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2221      	movs	r2, #33	; 0x21
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2220      	movs	r2, #32
 8000e94:	2100      	movs	r1, #0
 8000e96:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d004      	beq.n	8000eaa <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	0010      	movs	r0, r2
 8000ea8:	4798      	blx	r3
    } 
  }
  return status;
 8000eaa:	230f      	movs	r3, #15
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	781b      	ldrb	r3, [r3, #0]
}
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b004      	add	sp, #16
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000ece:	e14f      	b.n	8001170 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	4091      	lsls	r1, r2
 8000eda:	000a      	movs	r2, r1
 8000edc:	4013      	ands	r3, r2
 8000ede:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d100      	bne.n	8000ee8 <HAL_GPIO_Init+0x30>
 8000ee6:	e140      	b.n	800116a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x40>
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2b12      	cmp	r3, #18
 8000ef6:	d123      	bne.n	8000f40 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	08da      	lsrs	r2, r3, #3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3208      	adds	r2, #8
 8000f00:	0092      	lsls	r2, r2, #2
 8000f02:	58d3      	ldr	r3, [r2, r3]
 8000f04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	2207      	movs	r2, #7
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	220f      	movs	r2, #15
 8000f10:	409a      	lsls	r2, r3
 8000f12:	0013      	movs	r3, r2
 8000f14:	43da      	mvns	r2, r3
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	691a      	ldr	r2, [r3, #16]
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	2107      	movs	r1, #7
 8000f24:	400b      	ands	r3, r1
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	409a      	lsls	r2, r3
 8000f2a:	0013      	movs	r3, r2
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	08da      	lsrs	r2, r3, #3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3208      	adds	r2, #8
 8000f3a:	0092      	lsls	r2, r2, #2
 8000f3c:	6939      	ldr	r1, [r7, #16]
 8000f3e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	409a      	lsls	r2, r3
 8000f4e:	0013      	movs	r3, r2
 8000f50:	43da      	mvns	r2, r3
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	409a      	lsls	r2, r3
 8000f66:	0013      	movs	r3, r2
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d00b      	beq.n	8000f94 <HAL_GPIO_Init+0xdc>
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d007      	beq.n	8000f94 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f88:	2b11      	cmp	r3, #17
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b12      	cmp	r3, #18
 8000f92:	d130      	bne.n	8000ff6 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	409a      	lsls	r2, r3
 8000fa2:	0013      	movs	r3, r2
 8000fa4:	43da      	mvns	r2, r3
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	68da      	ldr	r2, [r3, #12]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	409a      	lsls	r2, r3
 8000fb6:	0013      	movs	r3, r2
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000fca:	2201      	movs	r2, #1
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	409a      	lsls	r2, r3
 8000fd0:	0013      	movs	r3, r2
 8000fd2:	43da      	mvns	r2, r3
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	091b      	lsrs	r3, r3, #4
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	0013      	movs	r3, r2
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	2203      	movs	r2, #3
 8001002:	409a      	lsls	r2, r3
 8001004:	0013      	movs	r3, r2
 8001006:	43da      	mvns	r2, r3
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	4013      	ands	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	409a      	lsls	r2, r3
 8001018:	0013      	movs	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685a      	ldr	r2, [r3, #4]
 800102a:	2380      	movs	r3, #128	; 0x80
 800102c:	055b      	lsls	r3, r3, #21
 800102e:	4013      	ands	r3, r2
 8001030:	d100      	bne.n	8001034 <HAL_GPIO_Init+0x17c>
 8001032:	e09a      	b.n	800116a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001034:	4b54      	ldr	r3, [pc, #336]	; (8001188 <HAL_GPIO_Init+0x2d0>)
 8001036:	699a      	ldr	r2, [r3, #24]
 8001038:	4b53      	ldr	r3, [pc, #332]	; (8001188 <HAL_GPIO_Init+0x2d0>)
 800103a:	2101      	movs	r1, #1
 800103c:	430a      	orrs	r2, r1
 800103e:	619a      	str	r2, [r3, #24]
 8001040:	4b51      	ldr	r3, [pc, #324]	; (8001188 <HAL_GPIO_Init+0x2d0>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	2201      	movs	r2, #1
 8001046:	4013      	ands	r3, r2
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 800104c:	4a4f      	ldr	r2, [pc, #316]	; (800118c <HAL_GPIO_Init+0x2d4>)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	3302      	adds	r3, #2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	589b      	ldr	r3, [r3, r2]
 8001058:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	2203      	movs	r2, #3
 800105e:	4013      	ands	r3, r2
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	220f      	movs	r2, #15
 8001064:	409a      	lsls	r2, r3
 8001066:	0013      	movs	r3, r2
 8001068:	43da      	mvns	r2, r3
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	2390      	movs	r3, #144	; 0x90
 8001074:	05db      	lsls	r3, r3, #23
 8001076:	429a      	cmp	r2, r3
 8001078:	d013      	beq.n	80010a2 <HAL_GPIO_Init+0x1ea>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a44      	ldr	r2, [pc, #272]	; (8001190 <HAL_GPIO_Init+0x2d8>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d00d      	beq.n	800109e <HAL_GPIO_Init+0x1e6>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	4a43      	ldr	r2, [pc, #268]	; (8001194 <HAL_GPIO_Init+0x2dc>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d007      	beq.n	800109a <HAL_GPIO_Init+0x1e2>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a42      	ldr	r2, [pc, #264]	; (8001198 <HAL_GPIO_Init+0x2e0>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d101      	bne.n	8001096 <HAL_GPIO_Init+0x1de>
 8001092:	2303      	movs	r3, #3
 8001094:	e006      	b.n	80010a4 <HAL_GPIO_Init+0x1ec>
 8001096:	2305      	movs	r3, #5
 8001098:	e004      	b.n	80010a4 <HAL_GPIO_Init+0x1ec>
 800109a:	2302      	movs	r3, #2
 800109c:	e002      	b.n	80010a4 <HAL_GPIO_Init+0x1ec>
 800109e:	2301      	movs	r3, #1
 80010a0:	e000      	b.n	80010a4 <HAL_GPIO_Init+0x1ec>
 80010a2:	2300      	movs	r3, #0
 80010a4:	697a      	ldr	r2, [r7, #20]
 80010a6:	2103      	movs	r1, #3
 80010a8:	400a      	ands	r2, r1
 80010aa:	0092      	lsls	r2, r2, #2
 80010ac:	4093      	lsls	r3, r2
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80010b4:	4935      	ldr	r1, [pc, #212]	; (800118c <HAL_GPIO_Init+0x2d4>)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	089b      	lsrs	r3, r3, #2
 80010ba:	3302      	adds	r3, #2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010c2:	4b36      	ldr	r3, [pc, #216]	; (800119c <HAL_GPIO_Init+0x2e4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	43da      	mvns	r2, r3
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4013      	ands	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685a      	ldr	r2, [r3, #4]
 80010d6:	2380      	movs	r3, #128	; 0x80
 80010d8:	025b      	lsls	r3, r3, #9
 80010da:	4013      	ands	r3, r2
 80010dc:	d003      	beq.n	80010e6 <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010e6:	4b2d      	ldr	r3, [pc, #180]	; (800119c <HAL_GPIO_Init+0x2e4>)
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80010ec:	4b2b      	ldr	r3, [pc, #172]	; (800119c <HAL_GPIO_Init+0x2e4>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	43da      	mvns	r2, r3
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	029b      	lsls	r3, r3, #10
 8001104:	4013      	ands	r3, r2
 8001106:	d003      	beq.n	8001110 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	4313      	orrs	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001110:	4b22      	ldr	r3, [pc, #136]	; (800119c <HAL_GPIO_Init+0x2e4>)
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <HAL_GPIO_Init+0x2e4>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	43da      	mvns	r2, r3
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	2380      	movs	r3, #128	; 0x80
 800112c:	035b      	lsls	r3, r3, #13
 800112e:	4013      	ands	r3, r2
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	4313      	orrs	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <HAL_GPIO_Init+0x2e4>)
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001140:	4b16      	ldr	r3, [pc, #88]	; (800119c <HAL_GPIO_Init+0x2e4>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	43da      	mvns	r2, r3
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	039b      	lsls	r3, r3, #14
 8001158:	4013      	ands	r3, r2
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	4313      	orrs	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001164:	4b0d      	ldr	r3, [pc, #52]	; (800119c <HAL_GPIO_Init+0x2e4>)
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	3301      	adds	r3, #1
 800116e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	40da      	lsrs	r2, r3
 8001178:	1e13      	subs	r3, r2, #0
 800117a:	d000      	beq.n	800117e <HAL_GPIO_Init+0x2c6>
 800117c:	e6a8      	b.n	8000ed0 <HAL_GPIO_Init+0x18>
  } 
}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	46bd      	mov	sp, r7
 8001182:	b006      	add	sp, #24
 8001184:	bd80      	pop	{r7, pc}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	40021000 	.word	0x40021000
 800118c:	40010000 	.word	0x40010000
 8001190:	48000400 	.word	0x48000400
 8001194:	48000800 	.word	0x48000800
 8001198:	48000c00 	.word	0x48000c00
 800119c:	40010400 	.word	0x40010400

080011a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2201      	movs	r2, #1
 80011b2:	4013      	ands	r3, r2
 80011b4:	d100      	bne.n	80011b8 <HAL_RCC_OscConfig+0x18>
 80011b6:	e08d      	b.n	80012d4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011b8:	4bc3      	ldr	r3, [pc, #780]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	220c      	movs	r2, #12
 80011be:	4013      	ands	r3, r2
 80011c0:	2b04      	cmp	r3, #4
 80011c2:	d00e      	beq.n	80011e2 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011c4:	4bc0      	ldr	r3, [pc, #768]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	220c      	movs	r2, #12
 80011ca:	4013      	ands	r3, r2
 80011cc:	2b08      	cmp	r3, #8
 80011ce:	d116      	bne.n	80011fe <HAL_RCC_OscConfig+0x5e>
 80011d0:	4bbd      	ldr	r3, [pc, #756]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	025b      	lsls	r3, r3, #9
 80011d8:	401a      	ands	r2, r3
 80011da:	2380      	movs	r3, #128	; 0x80
 80011dc:	025b      	lsls	r3, r3, #9
 80011de:	429a      	cmp	r2, r3
 80011e0:	d10d      	bne.n	80011fe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e2:	4bb9      	ldr	r3, [pc, #740]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	2380      	movs	r3, #128	; 0x80
 80011e8:	029b      	lsls	r3, r3, #10
 80011ea:	4013      	ands	r3, r2
 80011ec:	d100      	bne.n	80011f0 <HAL_RCC_OscConfig+0x50>
 80011ee:	e070      	b.n	80012d2 <HAL_RCC_OscConfig+0x132>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d000      	beq.n	80011fa <HAL_RCC_OscConfig+0x5a>
 80011f8:	e06b      	b.n	80012d2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e2b6      	b.n	800176c <HAL_RCC_OscConfig+0x5cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d107      	bne.n	8001216 <HAL_RCC_OscConfig+0x76>
 8001206:	4bb0      	ldr	r3, [pc, #704]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	4baf      	ldr	r3, [pc, #700]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 800120c:	2180      	movs	r1, #128	; 0x80
 800120e:	0249      	lsls	r1, r1, #9
 8001210:	430a      	orrs	r2, r1
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	e02f      	b.n	8001276 <HAL_RCC_OscConfig+0xd6>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10c      	bne.n	8001238 <HAL_RCC_OscConfig+0x98>
 800121e:	4baa      	ldr	r3, [pc, #680]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4ba9      	ldr	r3, [pc, #676]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 8001224:	49a9      	ldr	r1, [pc, #676]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 8001226:	400a      	ands	r2, r1
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	4ba7      	ldr	r3, [pc, #668]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	4ba6      	ldr	r3, [pc, #664]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 8001230:	49a7      	ldr	r1, [pc, #668]	; (80014d0 <HAL_RCC_OscConfig+0x330>)
 8001232:	400a      	ands	r2, r1
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	e01e      	b.n	8001276 <HAL_RCC_OscConfig+0xd6>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b05      	cmp	r3, #5
 800123e:	d10e      	bne.n	800125e <HAL_RCC_OscConfig+0xbe>
 8001240:	4ba1      	ldr	r3, [pc, #644]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4ba0      	ldr	r3, [pc, #640]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 8001246:	2180      	movs	r1, #128	; 0x80
 8001248:	02c9      	lsls	r1, r1, #11
 800124a:	430a      	orrs	r2, r1
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	4b9e      	ldr	r3, [pc, #632]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	4b9d      	ldr	r3, [pc, #628]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 8001254:	2180      	movs	r1, #128	; 0x80
 8001256:	0249      	lsls	r1, r1, #9
 8001258:	430a      	orrs	r2, r1
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	e00b      	b.n	8001276 <HAL_RCC_OscConfig+0xd6>
 800125e:	4b9a      	ldr	r3, [pc, #616]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	4b99      	ldr	r3, [pc, #612]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 8001264:	4999      	ldr	r1, [pc, #612]	; (80014cc <HAL_RCC_OscConfig+0x32c>)
 8001266:	400a      	ands	r2, r1
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	4b97      	ldr	r3, [pc, #604]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4b96      	ldr	r3, [pc, #600]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 8001270:	4997      	ldr	r1, [pc, #604]	; (80014d0 <HAL_RCC_OscConfig+0x330>)
 8001272:	400a      	ands	r2, r1
 8001274:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d014      	beq.n	80012a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127e:	f7ff f80b 	bl	8000298 <HAL_GetTick>
 8001282:	0003      	movs	r3, r0
 8001284:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001288:	f7ff f806 	bl	8000298 <HAL_GetTick>
 800128c:	0002      	movs	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b64      	cmp	r3, #100	; 0x64
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e268      	b.n	800176c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129a:	4b8b      	ldr	r3, [pc, #556]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	2380      	movs	r3, #128	; 0x80
 80012a0:	029b      	lsls	r3, r3, #10
 80012a2:	4013      	ands	r3, r2
 80012a4:	d0f0      	beq.n	8001288 <HAL_RCC_OscConfig+0xe8>
 80012a6:	e015      	b.n	80012d4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a8:	f7fe fff6 	bl	8000298 <HAL_GetTick>
 80012ac:	0003      	movs	r3, r0
 80012ae:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012b2:	f7fe fff1 	bl	8000298 <HAL_GetTick>
 80012b6:	0002      	movs	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b64      	cmp	r3, #100	; 0x64
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e253      	b.n	800176c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012c4:	4b80      	ldr	r3, [pc, #512]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	2380      	movs	r3, #128	; 0x80
 80012ca:	029b      	lsls	r3, r3, #10
 80012cc:	4013      	ands	r3, r2
 80012ce:	d1f0      	bne.n	80012b2 <HAL_RCC_OscConfig+0x112>
 80012d0:	e000      	b.n	80012d4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2202      	movs	r2, #2
 80012da:	4013      	ands	r3, r2
 80012dc:	d100      	bne.n	80012e0 <HAL_RCC_OscConfig+0x140>
 80012de:	e069      	b.n	80013b4 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012e0:	4b79      	ldr	r3, [pc, #484]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	220c      	movs	r2, #12
 80012e6:	4013      	ands	r3, r2
 80012e8:	d00b      	beq.n	8001302 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012ea:	4b77      	ldr	r3, [pc, #476]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	220c      	movs	r2, #12
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b08      	cmp	r3, #8
 80012f4:	d11c      	bne.n	8001330 <HAL_RCC_OscConfig+0x190>
 80012f6:	4b74      	ldr	r3, [pc, #464]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	025b      	lsls	r3, r3, #9
 80012fe:	4013      	ands	r3, r2
 8001300:	d116      	bne.n	8001330 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001302:	4b71      	ldr	r3, [pc, #452]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2202      	movs	r2, #2
 8001308:	4013      	ands	r3, r2
 800130a:	d005      	beq.n	8001318 <HAL_RCC_OscConfig+0x178>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d001      	beq.n	8001318 <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e229      	b.n	800176c <HAL_RCC_OscConfig+0x5cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001318:	4b6b      	ldr	r3, [pc, #428]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	22f8      	movs	r2, #248	; 0xf8
 800131e:	4393      	bics	r3, r2
 8001320:	0019      	movs	r1, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	691b      	ldr	r3, [r3, #16]
 8001326:	00da      	lsls	r2, r3, #3
 8001328:	4b67      	ldr	r3, [pc, #412]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 800132a:	430a      	orrs	r2, r1
 800132c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132e:	e041      	b.n	80013b4 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d024      	beq.n	8001382 <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001338:	4b63      	ldr	r3, [pc, #396]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b62      	ldr	r3, [pc, #392]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 800133e:	2101      	movs	r1, #1
 8001340:	430a      	orrs	r2, r1
 8001342:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001344:	f7fe ffa8 	bl	8000298 <HAL_GetTick>
 8001348:	0003      	movs	r3, r0
 800134a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134c:	e008      	b.n	8001360 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800134e:	f7fe ffa3 	bl	8000298 <HAL_GetTick>
 8001352:	0002      	movs	r2, r0
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	2b02      	cmp	r3, #2
 800135a:	d901      	bls.n	8001360 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e205      	b.n	800176c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001360:	4b59      	ldr	r3, [pc, #356]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2202      	movs	r2, #2
 8001366:	4013      	ands	r3, r2
 8001368:	d0f1      	beq.n	800134e <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800136a:	4b57      	ldr	r3, [pc, #348]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	22f8      	movs	r2, #248	; 0xf8
 8001370:	4393      	bics	r3, r2
 8001372:	0019      	movs	r1, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	00da      	lsls	r2, r3, #3
 800137a:	4b53      	ldr	r3, [pc, #332]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 800137c:	430a      	orrs	r2, r1
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	e018      	b.n	80013b4 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001382:	4b51      	ldr	r3, [pc, #324]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	4b50      	ldr	r3, [pc, #320]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 8001388:	2101      	movs	r1, #1
 800138a:	438a      	bics	r2, r1
 800138c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138e:	f7fe ff83 	bl	8000298 <HAL_GetTick>
 8001392:	0003      	movs	r3, r0
 8001394:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001398:	f7fe ff7e 	bl	8000298 <HAL_GetTick>
 800139c:	0002      	movs	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e1e0      	b.n	800176c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013aa:	4b47      	ldr	r3, [pc, #284]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2202      	movs	r2, #2
 80013b0:	4013      	ands	r3, r2
 80013b2:	d1f1      	bne.n	8001398 <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2208      	movs	r2, #8
 80013ba:	4013      	ands	r3, r2
 80013bc:	d036      	beq.n	800142c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69db      	ldr	r3, [r3, #28]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d019      	beq.n	80013fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013c6:	4b40      	ldr	r3, [pc, #256]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 80013c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ca:	4b3f      	ldr	r3, [pc, #252]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 80013cc:	2101      	movs	r1, #1
 80013ce:	430a      	orrs	r2, r1
 80013d0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d2:	f7fe ff61 	bl	8000298 <HAL_GetTick>
 80013d6:	0003      	movs	r3, r0
 80013d8:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013dc:	f7fe ff5c 	bl	8000298 <HAL_GetTick>
 80013e0:	0002      	movs	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e1be      	b.n	800176c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ee:	4b36      	ldr	r3, [pc, #216]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 80013f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f2:	2202      	movs	r2, #2
 80013f4:	4013      	ands	r3, r2
 80013f6:	d0f1      	beq.n	80013dc <HAL_RCC_OscConfig+0x23c>
 80013f8:	e018      	b.n	800142c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013fa:	4b33      	ldr	r3, [pc, #204]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 80013fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013fe:	4b32      	ldr	r3, [pc, #200]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 8001400:	2101      	movs	r1, #1
 8001402:	438a      	bics	r2, r1
 8001404:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001406:	f7fe ff47 	bl	8000298 <HAL_GetTick>
 800140a:	0003      	movs	r3, r0
 800140c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001410:	f7fe ff42 	bl	8000298 <HAL_GetTick>
 8001414:	0002      	movs	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e1a4      	b.n	800176c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001422:	4b29      	ldr	r3, [pc, #164]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 8001424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001426:	2202      	movs	r2, #2
 8001428:	4013      	ands	r3, r2
 800142a:	d1f1      	bne.n	8001410 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2204      	movs	r2, #4
 8001432:	4013      	ands	r3, r2
 8001434:	d100      	bne.n	8001438 <HAL_RCC_OscConfig+0x298>
 8001436:	e0b5      	b.n	80015a4 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001438:	2317      	movs	r3, #23
 800143a:	18fb      	adds	r3, r7, r3
 800143c:	2200      	movs	r2, #0
 800143e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001440:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 8001442:	69da      	ldr	r2, [r3, #28]
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	055b      	lsls	r3, r3, #21
 8001448:	4013      	ands	r3, r2
 800144a:	d111      	bne.n	8001470 <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 800144e:	69da      	ldr	r2, [r3, #28]
 8001450:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 8001452:	2180      	movs	r1, #128	; 0x80
 8001454:	0549      	lsls	r1, r1, #21
 8001456:	430a      	orrs	r2, r1
 8001458:	61da      	str	r2, [r3, #28]
 800145a:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 800145c:	69da      	ldr	r2, [r3, #28]
 800145e:	2380      	movs	r3, #128	; 0x80
 8001460:	055b      	lsls	r3, r3, #21
 8001462:	4013      	ands	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001468:	2317      	movs	r3, #23
 800146a:	18fb      	adds	r3, r7, r3
 800146c:	2201      	movs	r2, #1
 800146e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <HAL_RCC_OscConfig+0x334>)
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4013      	ands	r3, r2
 800147a:	d11a      	bne.n	80014b2 <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800147c:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_RCC_OscConfig+0x334>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <HAL_RCC_OscConfig+0x334>)
 8001482:	2180      	movs	r1, #128	; 0x80
 8001484:	0049      	lsls	r1, r1, #1
 8001486:	430a      	orrs	r2, r1
 8001488:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800148a:	f7fe ff05 	bl	8000298 <HAL_GetTick>
 800148e:	0003      	movs	r3, r0
 8001490:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001492:	e008      	b.n	80014a6 <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001494:	f7fe ff00 	bl	8000298 <HAL_GetTick>
 8001498:	0002      	movs	r2, r0
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	2b64      	cmp	r3, #100	; 0x64
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e162      	b.n	800176c <HAL_RCC_OscConfig+0x5cc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a6:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <HAL_RCC_OscConfig+0x334>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	4013      	ands	r3, r2
 80014b0:	d0f0      	beq.n	8001494 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d10e      	bne.n	80014d8 <HAL_RCC_OscConfig+0x338>
 80014ba:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 80014bc:	6a1a      	ldr	r2, [r3, #32]
 80014be:	4b02      	ldr	r3, [pc, #8]	; (80014c8 <HAL_RCC_OscConfig+0x328>)
 80014c0:	2101      	movs	r1, #1
 80014c2:	430a      	orrs	r2, r1
 80014c4:	621a      	str	r2, [r3, #32]
 80014c6:	e035      	b.n	8001534 <HAL_RCC_OscConfig+0x394>
 80014c8:	40021000 	.word	0x40021000
 80014cc:	fffeffff 	.word	0xfffeffff
 80014d0:	fffbffff 	.word	0xfffbffff
 80014d4:	40007000 	.word	0x40007000
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d10c      	bne.n	80014fa <HAL_RCC_OscConfig+0x35a>
 80014e0:	4ba4      	ldr	r3, [pc, #656]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 80014e2:	6a1a      	ldr	r2, [r3, #32]
 80014e4:	4ba3      	ldr	r3, [pc, #652]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 80014e6:	2101      	movs	r1, #1
 80014e8:	438a      	bics	r2, r1
 80014ea:	621a      	str	r2, [r3, #32]
 80014ec:	4ba1      	ldr	r3, [pc, #644]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 80014ee:	6a1a      	ldr	r2, [r3, #32]
 80014f0:	4ba0      	ldr	r3, [pc, #640]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 80014f2:	2104      	movs	r1, #4
 80014f4:	438a      	bics	r2, r1
 80014f6:	621a      	str	r2, [r3, #32]
 80014f8:	e01c      	b.n	8001534 <HAL_RCC_OscConfig+0x394>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	2b05      	cmp	r3, #5
 8001500:	d10c      	bne.n	800151c <HAL_RCC_OscConfig+0x37c>
 8001502:	4b9c      	ldr	r3, [pc, #624]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 8001504:	6a1a      	ldr	r2, [r3, #32]
 8001506:	4b9b      	ldr	r3, [pc, #620]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 8001508:	2104      	movs	r1, #4
 800150a:	430a      	orrs	r2, r1
 800150c:	621a      	str	r2, [r3, #32]
 800150e:	4b99      	ldr	r3, [pc, #612]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 8001510:	6a1a      	ldr	r2, [r3, #32]
 8001512:	4b98      	ldr	r3, [pc, #608]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 8001514:	2101      	movs	r1, #1
 8001516:	430a      	orrs	r2, r1
 8001518:	621a      	str	r2, [r3, #32]
 800151a:	e00b      	b.n	8001534 <HAL_RCC_OscConfig+0x394>
 800151c:	4b95      	ldr	r3, [pc, #596]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 800151e:	6a1a      	ldr	r2, [r3, #32]
 8001520:	4b94      	ldr	r3, [pc, #592]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 8001522:	2101      	movs	r1, #1
 8001524:	438a      	bics	r2, r1
 8001526:	621a      	str	r2, [r3, #32]
 8001528:	4b92      	ldr	r3, [pc, #584]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 800152a:	6a1a      	ldr	r2, [r3, #32]
 800152c:	4b91      	ldr	r3, [pc, #580]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 800152e:	2104      	movs	r1, #4
 8001530:	438a      	bics	r2, r1
 8001532:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d014      	beq.n	8001566 <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153c:	f7fe feac 	bl	8000298 <HAL_GetTick>
 8001540:	0003      	movs	r3, r0
 8001542:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001544:	e009      	b.n	800155a <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001546:	f7fe fea7 	bl	8000298 <HAL_GetTick>
 800154a:	0002      	movs	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	4a89      	ldr	r2, [pc, #548]	; (8001778 <HAL_RCC_OscConfig+0x5d8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e108      	b.n	800176c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800155a:	4b86      	ldr	r3, [pc, #536]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	2202      	movs	r2, #2
 8001560:	4013      	ands	r3, r2
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_OscConfig+0x3a6>
 8001564:	e013      	b.n	800158e <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001566:	f7fe fe97 	bl	8000298 <HAL_GetTick>
 800156a:	0003      	movs	r3, r0
 800156c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800156e:	e009      	b.n	8001584 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001570:	f7fe fe92 	bl	8000298 <HAL_GetTick>
 8001574:	0002      	movs	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	4a7f      	ldr	r2, [pc, #508]	; (8001778 <HAL_RCC_OscConfig+0x5d8>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e0f3      	b.n	800176c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001584:	4b7b      	ldr	r3, [pc, #492]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	2202      	movs	r2, #2
 800158a:	4013      	ands	r3, r2
 800158c:	d1f0      	bne.n	8001570 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800158e:	2317      	movs	r3, #23
 8001590:	18fb      	adds	r3, r7, r3
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d105      	bne.n	80015a4 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001598:	4b76      	ldr	r3, [pc, #472]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 800159a:	69da      	ldr	r2, [r3, #28]
 800159c:	4b75      	ldr	r3, [pc, #468]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 800159e:	4977      	ldr	r1, [pc, #476]	; (800177c <HAL_RCC_OscConfig+0x5dc>)
 80015a0:	400a      	ands	r2, r1
 80015a2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2210      	movs	r2, #16
 80015aa:	4013      	ands	r3, r2
 80015ac:	d063      	beq.n	8001676 <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	695b      	ldr	r3, [r3, #20]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d12a      	bne.n	800160c <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80015b6:	4b6f      	ldr	r3, [pc, #444]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 80015b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ba:	4b6e      	ldr	r3, [pc, #440]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 80015bc:	2104      	movs	r1, #4
 80015be:	430a      	orrs	r2, r1
 80015c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80015c2:	4b6c      	ldr	r3, [pc, #432]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 80015c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015c6:	4b6b      	ldr	r3, [pc, #428]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 80015c8:	2101      	movs	r1, #1
 80015ca:	430a      	orrs	r2, r1
 80015cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ce:	f7fe fe63 	bl	8000298 <HAL_GetTick>
 80015d2:	0003      	movs	r3, r0
 80015d4:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015d8:	f7fe fe5e 	bl	8000298 <HAL_GetTick>
 80015dc:	0002      	movs	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e0c0      	b.n	800176c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80015ea:	4b62      	ldr	r3, [pc, #392]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 80015ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ee:	2202      	movs	r2, #2
 80015f0:	4013      	ands	r3, r2
 80015f2:	d0f1      	beq.n	80015d8 <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015f4:	4b5f      	ldr	r3, [pc, #380]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 80015f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f8:	22f8      	movs	r2, #248	; 0xf8
 80015fa:	4393      	bics	r3, r2
 80015fc:	0019      	movs	r1, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	00da      	lsls	r2, r3, #3
 8001604:	4b5b      	ldr	r3, [pc, #364]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 8001606:	430a      	orrs	r2, r1
 8001608:	635a      	str	r2, [r3, #52]	; 0x34
 800160a:	e034      	b.n	8001676 <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	3305      	adds	r3, #5
 8001612:	d111      	bne.n	8001638 <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001614:	4b57      	ldr	r3, [pc, #348]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 8001616:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001618:	4b56      	ldr	r3, [pc, #344]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 800161a:	2104      	movs	r1, #4
 800161c:	438a      	bics	r2, r1
 800161e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001620:	4b54      	ldr	r3, [pc, #336]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 8001622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001624:	22f8      	movs	r2, #248	; 0xf8
 8001626:	4393      	bics	r3, r2
 8001628:	0019      	movs	r1, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	00da      	lsls	r2, r3, #3
 8001630:	4b50      	ldr	r3, [pc, #320]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 8001632:	430a      	orrs	r2, r1
 8001634:	635a      	str	r2, [r3, #52]	; 0x34
 8001636:	e01e      	b.n	8001676 <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001638:	4b4e      	ldr	r3, [pc, #312]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 800163a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800163c:	4b4d      	ldr	r3, [pc, #308]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 800163e:	2104      	movs	r1, #4
 8001640:	430a      	orrs	r2, r1
 8001642:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001644:	4b4b      	ldr	r3, [pc, #300]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 8001646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001648:	4b4a      	ldr	r3, [pc, #296]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 800164a:	2101      	movs	r1, #1
 800164c:	438a      	bics	r2, r1
 800164e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001650:	f7fe fe22 	bl	8000298 <HAL_GetTick>
 8001654:	0003      	movs	r3, r0
 8001656:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800165a:	f7fe fe1d 	bl	8000298 <HAL_GetTick>
 800165e:	0002      	movs	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e07f      	b.n	800176c <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800166c:	4b41      	ldr	r3, [pc, #260]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 800166e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001670:	2202      	movs	r2, #2
 8001672:	4013      	ands	r3, r2
 8001674:	d1f1      	bne.n	800165a <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d100      	bne.n	8001680 <HAL_RCC_OscConfig+0x4e0>
 800167e:	e074      	b.n	800176a <HAL_RCC_OscConfig+0x5ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001680:	4b3c      	ldr	r3, [pc, #240]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	220c      	movs	r2, #12
 8001686:	4013      	ands	r3, r2
 8001688:	2b08      	cmp	r3, #8
 800168a:	d100      	bne.n	800168e <HAL_RCC_OscConfig+0x4ee>
 800168c:	e06b      	b.n	8001766 <HAL_RCC_OscConfig+0x5c6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d14c      	bne.n	8001730 <HAL_RCC_OscConfig+0x590>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001696:	4b37      	ldr	r3, [pc, #220]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	4b36      	ldr	r3, [pc, #216]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 800169c:	4938      	ldr	r1, [pc, #224]	; (8001780 <HAL_RCC_OscConfig+0x5e0>)
 800169e:	400a      	ands	r2, r1
 80016a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a2:	f7fe fdf9 	bl	8000298 <HAL_GetTick>
 80016a6:	0003      	movs	r3, r0
 80016a8:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016ac:	f7fe fdf4 	bl	8000298 <HAL_GetTick>
 80016b0:	0002      	movs	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e056      	b.n	800176c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016be:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	049b      	lsls	r3, r3, #18
 80016c6:	4013      	ands	r3, r2
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016ca:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 80016cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ce:	220f      	movs	r2, #15
 80016d0:	4393      	bics	r3, r2
 80016d2:	0019      	movs	r1, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d8:	4b26      	ldr	r3, [pc, #152]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 80016da:	430a      	orrs	r2, r1
 80016dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80016de:	4b25      	ldr	r3, [pc, #148]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	4a28      	ldr	r2, [pc, #160]	; (8001784 <HAL_RCC_OscConfig+0x5e4>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	0019      	movs	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	431a      	orrs	r2, r3
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 80016f4:	430a      	orrs	r2, r1
 80016f6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016f8:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 80016fe:	2180      	movs	r1, #128	; 0x80
 8001700:	0449      	lsls	r1, r1, #17
 8001702:	430a      	orrs	r2, r1
 8001704:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001706:	f7fe fdc7 	bl	8000298 <HAL_GetTick>
 800170a:	0003      	movs	r3, r0
 800170c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x582>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001710:	f7fe fdc2 	bl	8000298 <HAL_GetTick>
 8001714:	0002      	movs	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e024      	b.n	800176c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	2380      	movs	r3, #128	; 0x80
 8001728:	049b      	lsls	r3, r3, #18
 800172a:	4013      	ands	r3, r2
 800172c:	d0f0      	beq.n	8001710 <HAL_RCC_OscConfig+0x570>
 800172e:	e01c      	b.n	800176a <HAL_RCC_OscConfig+0x5ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001730:	4b10      	ldr	r3, [pc, #64]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 8001736:	4912      	ldr	r1, [pc, #72]	; (8001780 <HAL_RCC_OscConfig+0x5e0>)
 8001738:	400a      	ands	r2, r1
 800173a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7fe fdac 	bl	8000298 <HAL_GetTick>
 8001740:	0003      	movs	r3, r0
 8001742:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001744:	e008      	b.n	8001758 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001746:	f7fe fda7 	bl	8000298 <HAL_GetTick>
 800174a:	0002      	movs	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d901      	bls.n	8001758 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001754:	2303      	movs	r3, #3
 8001756:	e009      	b.n	800176c <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_RCC_OscConfig+0x5d4>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	049b      	lsls	r3, r3, #18
 8001760:	4013      	ands	r3, r2
 8001762:	d1f0      	bne.n	8001746 <HAL_RCC_OscConfig+0x5a6>
 8001764:	e001      	b.n	800176a <HAL_RCC_OscConfig+0x5ca>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <HAL_RCC_OscConfig+0x5cc>
    }
  }
  
  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	0018      	movs	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	b006      	add	sp, #24
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40021000 	.word	0x40021000
 8001778:	00001388 	.word	0x00001388
 800177c:	efffffff 	.word	0xefffffff
 8001780:	feffffff 	.word	0xfeffffff
 8001784:	ffc2ffff 	.word	0xffc2ffff

08001788 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001796:	4b6a      	ldr	r3, [pc, #424]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2201      	movs	r2, #1
 800179c:	4013      	ands	r3, r2
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d911      	bls.n	80017c8 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a4:	4b66      	ldr	r3, [pc, #408]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2201      	movs	r2, #1
 80017aa:	4393      	bics	r3, r2
 80017ac:	0019      	movs	r1, r3
 80017ae:	4b64      	ldr	r3, [pc, #400]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017b6:	4b62      	ldr	r3, [pc, #392]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2201      	movs	r2, #1
 80017bc:	4013      	ands	r3, r2
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0b6      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2202      	movs	r2, #2
 80017ce:	4013      	ands	r3, r2
 80017d0:	d009      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017d2:	4b5c      	ldr	r3, [pc, #368]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	22f0      	movs	r2, #240	; 0xf0
 80017d8:	4393      	bics	r3, r2
 80017da:	0019      	movs	r1, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	4b58      	ldr	r3, [pc, #352]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	430a      	orrs	r2, r1
 80017e4:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2201      	movs	r2, #1
 80017ec:	4013      	ands	r3, r2
 80017ee:	d100      	bne.n	80017f2 <HAL_RCC_ClockConfig+0x6a>
 80017f0:	e067      	b.n	80018c2 <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d107      	bne.n	800180a <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017fa:	4b52      	ldr	r3, [pc, #328]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	2380      	movs	r3, #128	; 0x80
 8001800:	029b      	lsls	r3, r3, #10
 8001802:	4013      	ands	r3, r2
 8001804:	d114      	bne.n	8001830 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e095      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001812:	4b4c      	ldr	r3, [pc, #304]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	049b      	lsls	r3, r3, #18
 800181a:	4013      	ands	r3, r2
 800181c:	d108      	bne.n	8001830 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e089      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001822:	4b48      	ldr	r3, [pc, #288]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2202      	movs	r2, #2
 8001828:	4013      	ands	r3, r2
 800182a:	d101      	bne.n	8001830 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e082      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001830:	4b44      	ldr	r3, [pc, #272]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2203      	movs	r2, #3
 8001836:	4393      	bics	r3, r2
 8001838:	0019      	movs	r1, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	4b41      	ldr	r3, [pc, #260]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	430a      	orrs	r2, r1
 8001842:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001844:	f7fe fd28 	bl	8000298 <HAL_GetTick>
 8001848:	0003      	movs	r3, r0
 800184a:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d111      	bne.n	8001878 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001854:	e009      	b.n	800186a <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001856:	f7fe fd1f 	bl	8000298 <HAL_GetTick>
 800185a:	0002      	movs	r2, r0
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	4a39      	ldr	r2, [pc, #228]	; (8001948 <HAL_RCC_ClockConfig+0x1c0>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d901      	bls.n	800186a <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e065      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800186a:	4b36      	ldr	r3, [pc, #216]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	220c      	movs	r2, #12
 8001870:	4013      	ands	r3, r2
 8001872:	2b04      	cmp	r3, #4
 8001874:	d1ef      	bne.n	8001856 <HAL_RCC_ClockConfig+0xce>
 8001876:	e024      	b.n	80018c2 <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d11b      	bne.n	80018b8 <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001880:	e009      	b.n	8001896 <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001882:	f7fe fd09 	bl	8000298 <HAL_GetTick>
 8001886:	0002      	movs	r2, r0
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	4a2e      	ldr	r2, [pc, #184]	; (8001948 <HAL_RCC_ClockConfig+0x1c0>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e04f      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001896:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	220c      	movs	r2, #12
 800189c:	4013      	ands	r3, r2
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d1ef      	bne.n	8001882 <HAL_RCC_ClockConfig+0xfa>
 80018a2:	e00e      	b.n	80018c2 <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a4:	f7fe fcf8 	bl	8000298 <HAL_GetTick>
 80018a8:	0002      	movs	r2, r0
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	4a26      	ldr	r2, [pc, #152]	; (8001948 <HAL_RCC_ClockConfig+0x1c0>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e03e      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018b8:	4b22      	ldr	r3, [pc, #136]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	220c      	movs	r2, #12
 80018be:	4013      	ands	r3, r2
 80018c0:	d1f0      	bne.n	80018a4 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80018c2:	4b1f      	ldr	r3, [pc, #124]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2201      	movs	r2, #1
 80018c8:	4013      	ands	r3, r2
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d211      	bcs.n	80018f4 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d0:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2201      	movs	r2, #1
 80018d6:	4393      	bics	r3, r2
 80018d8:	0019      	movs	r1, r3
 80018da:	4b19      	ldr	r3, [pc, #100]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018e2:	4b17      	ldr	r3, [pc, #92]	; (8001940 <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2201      	movs	r2, #1
 80018e8:	4013      	ands	r3, r2
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e020      	b.n	8001936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2204      	movs	r2, #4
 80018fa:	4013      	ands	r3, r2
 80018fc:	d009      	beq.n	8001912 <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	4a12      	ldr	r2, [pc, #72]	; (800194c <HAL_RCC_ClockConfig+0x1c4>)
 8001904:	4013      	ands	r3, r2
 8001906:	0019      	movs	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	4b0d      	ldr	r3, [pc, #52]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	430a      	orrs	r2, r1
 8001910:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001912:	f000 f821 	bl	8001958 <HAL_RCC_GetSysClockFreq>
 8001916:	0001      	movs	r1, r0
 8001918:	4b0a      	ldr	r3, [pc, #40]	; (8001944 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	220f      	movs	r2, #15
 8001920:	4013      	ands	r3, r2
 8001922:	4a0b      	ldr	r2, [pc, #44]	; (8001950 <HAL_RCC_ClockConfig+0x1c8>)
 8001924:	5cd3      	ldrb	r3, [r2, r3]
 8001926:	000a      	movs	r2, r1
 8001928:	40da      	lsrs	r2, r3
 800192a:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <HAL_RCC_ClockConfig+0x1cc>)
 800192c:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800192e:	2001      	movs	r0, #1
 8001930:	f7fe fc8a 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	0018      	movs	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	b004      	add	sp, #16
 800193c:	bd80      	pop	{r7, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	40022000 	.word	0x40022000
 8001944:	40021000 	.word	0x40021000
 8001948:	00001388 	.word	0x00001388
 800194c:	fffff8ff 	.word	0xfffff8ff
 8001950:	080038b4 	.word	0x080038b4
 8001954:	20000004 	.word	0x20000004

08001958 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001958:	b590      	push	{r4, r7, lr}
 800195a:	b08f      	sub	sp, #60	; 0x3c
 800195c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800195e:	2314      	movs	r3, #20
 8001960:	18fb      	adds	r3, r7, r3
 8001962:	4a2b      	ldr	r2, [pc, #172]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001964:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001966:	c313      	stmia	r3!, {r0, r1, r4}
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	4a29      	ldr	r2, [pc, #164]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001970:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001972:	c313      	stmia	r3!, {r0, r1, r4}
 8001974:	6812      	ldr	r2, [r2, #0]
 8001976:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800197c:	2300      	movs	r3, #0
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001980:	2300      	movs	r3, #0
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
 8001984:	2300      	movs	r3, #0
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800198c:	4b22      	ldr	r3, [pc, #136]	; (8001a18 <HAL_RCC_GetSysClockFreq+0xc0>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001994:	220c      	movs	r2, #12
 8001996:	4013      	ands	r3, r2
 8001998:	2b04      	cmp	r3, #4
 800199a:	d002      	beq.n	80019a2 <HAL_RCC_GetSysClockFreq+0x4a>
 800199c:	2b08      	cmp	r3, #8
 800199e:	d003      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0x50>
 80019a0:	e02d      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019a2:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xc4>)
 80019a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019a6:	e02d      	b.n	8001a04 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80019a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019aa:	0c9b      	lsrs	r3, r3, #18
 80019ac:	220f      	movs	r2, #15
 80019ae:	4013      	ands	r3, r2
 80019b0:	2214      	movs	r2, #20
 80019b2:	18ba      	adds	r2, r7, r2
 80019b4:	5cd3      	ldrb	r3, [r2, r3]
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80019b8:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <HAL_RCC_GetSysClockFreq+0xc0>)
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	220f      	movs	r2, #15
 80019be:	4013      	ands	r3, r2
 80019c0:	1d3a      	adds	r2, r7, #4
 80019c2:	5cd3      	ldrb	r3, [r2, r3]
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80019c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019c8:	2380      	movs	r3, #128	; 0x80
 80019ca:	025b      	lsls	r3, r3, #9
 80019cc:	4013      	ands	r3, r2
 80019ce:	d009      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80019d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019d2:	4812      	ldr	r0, [pc, #72]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xc4>)
 80019d4:	f7fe fb98 	bl	8000108 <__udivsi3>
 80019d8:	0003      	movs	r3, r0
 80019da:	001a      	movs	r2, r3
 80019dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019de:	4353      	muls	r3, r2
 80019e0:	637b      	str	r3, [r7, #52]	; 0x34
 80019e2:	e009      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80019e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019e6:	000a      	movs	r2, r1
 80019e8:	0152      	lsls	r2, r2, #5
 80019ea:	1a52      	subs	r2, r2, r1
 80019ec:	0193      	lsls	r3, r2, #6
 80019ee:	1a9b      	subs	r3, r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	185b      	adds	r3, r3, r1
 80019f4:	021b      	lsls	r3, r3, #8
 80019f6:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80019f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80019fc:	e002      	b.n	8001a04 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001a00:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001a02:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001a06:	0018      	movs	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	b00f      	add	sp, #60	; 0x3c
 8001a0c:	bd90      	pop	{r4, r7, pc}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	08003894 	.word	0x08003894
 8001a14:	080038a4 	.word	0x080038a4
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	017d7840 	.word	0x017d7840
 8001a20:	007a1200 	.word	0x007a1200

08001a24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a28:	4b02      	ldr	r3, [pc, #8]	; (8001a34 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
}
 8001a2c:	0018      	movs	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	20000004 	.word	0x20000004

08001a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001a3c:	f7ff fff2 	bl	8001a24 <HAL_RCC_GetHCLKFreq>
 8001a40:	0001      	movs	r1, r0
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	0a1b      	lsrs	r3, r3, #8
 8001a48:	2207      	movs	r2, #7
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	4a04      	ldr	r2, [pc, #16]	; (8001a60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a4e:	5cd3      	ldrb	r3, [r2, r3]
 8001a50:	40d9      	lsrs	r1, r3
 8001a52:	000b      	movs	r3, r1
}    
 8001a54:	0018      	movs	r0, r3
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	080038c4 	.word	0x080038c4

08001a64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	025b      	lsls	r3, r3, #9
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d100      	bne.n	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001a80:	e08f      	b.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001a82:	2317      	movs	r3, #23
 8001a84:	18fb      	adds	r3, r7, r3
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a8a:	4b57      	ldr	r3, [pc, #348]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a8c:	69da      	ldr	r2, [r3, #28]
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	055b      	lsls	r3, r3, #21
 8001a92:	4013      	ands	r3, r2
 8001a94:	d111      	bne.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a96:	4b54      	ldr	r3, [pc, #336]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a98:	69da      	ldr	r2, [r3, #28]
 8001a9a:	4b53      	ldr	r3, [pc, #332]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001a9c:	2180      	movs	r1, #128	; 0x80
 8001a9e:	0549      	lsls	r1, r1, #21
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	61da      	str	r2, [r3, #28]
 8001aa4:	4b50      	ldr	r3, [pc, #320]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001aa6:	69da      	ldr	r2, [r3, #28]
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	055b      	lsls	r3, r3, #21
 8001aac:	4013      	ands	r3, r2
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab2:	2317      	movs	r3, #23
 8001ab4:	18fb      	adds	r3, r7, r3
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aba:	4b4c      	ldr	r3, [pc, #304]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d11a      	bne.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac6:	4b49      	ldr	r3, [pc, #292]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4b48      	ldr	r3, [pc, #288]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001acc:	2180      	movs	r1, #128	; 0x80
 8001ace:	0049      	lsls	r1, r1, #1
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad4:	f7fe fbe0 	bl	8000298 <HAL_GetTick>
 8001ad8:	0003      	movs	r3, r0
 8001ada:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001adc:	e008      	b.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ade:	f7fe fbdb 	bl	8000298 <HAL_GetTick>
 8001ae2:	0002      	movs	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b64      	cmp	r3, #100	; 0x64
 8001aea:	d901      	bls.n	8001af0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e077      	b.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af0:	4b3e      	ldr	r3, [pc, #248]	; (8001bec <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	2380      	movs	r3, #128	; 0x80
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	4013      	ands	r3, r2
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001afc:	4b3a      	ldr	r3, [pc, #232]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001afe:	6a1a      	ldr	r2, [r3, #32]
 8001b00:	23c0      	movs	r3, #192	; 0xc0
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4013      	ands	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d034      	beq.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	23c0      	movs	r3, #192	; 0xc0
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4013      	ands	r3, r2
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d02c      	beq.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b1e:	4b32      	ldr	r3, [pc, #200]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	4a33      	ldr	r2, [pc, #204]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b28:	4b2f      	ldr	r3, [pc, #188]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b2a:	6a1a      	ldr	r2, [r3, #32]
 8001b2c:	4b2e      	ldr	r3, [pc, #184]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b2e:	2180      	movs	r1, #128	; 0x80
 8001b30:	0249      	lsls	r1, r1, #9
 8001b32:	430a      	orrs	r2, r1
 8001b34:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b36:	4b2c      	ldr	r3, [pc, #176]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b38:	6a1a      	ldr	r2, [r3, #32]
 8001b3a:	4b2b      	ldr	r3, [pc, #172]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b3c:	492d      	ldr	r1, [pc, #180]	; (8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001b3e:	400a      	ands	r2, r1
 8001b40:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b42:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	d013      	beq.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b50:	f7fe fba2 	bl	8000298 <HAL_GetTick>
 8001b54:	0003      	movs	r3, r0
 8001b56:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b58:	e009      	b.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b5a:	f7fe fb9d 	bl	8000298 <HAL_GetTick>
 8001b5e:	0002      	movs	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	4a24      	ldr	r2, [pc, #144]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e038      	b.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b6e:	4b1e      	ldr	r3, [pc, #120]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	2202      	movs	r2, #2
 8001b74:	4013      	ands	r3, r2
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b78:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	4a1c      	ldr	r2, [pc, #112]	; (8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	0019      	movs	r1, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685a      	ldr	r2, [r3, #4]
 8001b86:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b8c:	2317      	movs	r3, #23
 8001b8e:	18fb      	adds	r3, r7, r3
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d105      	bne.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b96:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b98:	69da      	ldr	r2, [r3, #28]
 8001b9a:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001b9c:	4917      	ldr	r1, [pc, #92]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001b9e:	400a      	ands	r2, r1
 8001ba0:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d009      	beq.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	4393      	bics	r3, r2
 8001bb4:	0019      	movs	r1, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d009      	beq.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	2210      	movs	r2, #16
 8001bd0:	4393      	bics	r3, r2
 8001bd2:	0019      	movs	r1, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	4b03      	ldr	r3, [pc, #12]	; (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	0018      	movs	r0, r3
 8001be2:	46bd      	mov	sp, r7
 8001be4:	b006      	add	sp, #24
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40007000 	.word	0x40007000
 8001bf0:	fffffcff 	.word	0xfffffcff
 8001bf4:	fffeffff 	.word	0xfffeffff
 8001bf8:	00001388 	.word	0x00001388
 8001bfc:	efffffff 	.word	0xefffffff

08001c00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e047      	b.n	8001ca2 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2269      	movs	r2, #105	; 0x69
 8001c16:	5c9b      	ldrb	r3, [r3, r2]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d107      	bne.n	8001c2e <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2268      	movs	r2, #104	; 0x68
 8001c22:	2100      	movs	r1, #0
 8001c24:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	0018      	movs	r0, r3
 8001c2a:	f001 fc91 	bl	8003550 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2269      	movs	r2, #105	; 0x69
 8001c32:	2124      	movs	r1, #36	; 0x24
 8001c34:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2101      	movs	r1, #1
 8001c42:	438a      	bics	r2, r1
 8001c44:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	0018      	movs	r0, r3
 8001c4a:	f000 fa15 	bl	8002078 <UART_SetConfig>
 8001c4e:	0003      	movs	r3, r0
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d101      	bne.n	8001c58 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e024      	b.n	8001ca2 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	0018      	movs	r0, r3
 8001c64:	f000 fb66 	bl	8002334 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	490e      	ldr	r1, [pc, #56]	; (8001cac <HAL_UART_Init+0xac>)
 8001c74:	400a      	ands	r2, r1
 8001c76:	605a      	str	r2, [r3, #4]
#endif
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2108      	movs	r1, #8
 8001c84:	438a      	bics	r2, r1
 8001c86:	609a      	str	r2, [r3, #8]
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2101      	movs	r1, #1
 8001c94:	430a      	orrs	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	f000 fbfe 	bl	800249c <UART_CheckIdleState>
 8001ca0:	0003      	movs	r3, r0
}
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b002      	add	sp, #8
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	46c0      	nop			; (mov r8, r8)
 8001cac:	fffff7ff 	.word	0xfffff7ff

08001cb0 <HAL_UART_Transmit_IT>:
  *         (as sent data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	1dbb      	adds	r3, r7, #6
 8001cbc:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2269      	movs	r2, #105	; 0x69
 8001cc2:	5c9b      	ldrb	r3, [r3, r2]
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b20      	cmp	r3, #32
 8001cc8:	d145      	bne.n	8001d56 <HAL_UART_Transmit_IT+0xa6>
  {
    if((pData == NULL ) || (Size == 0U))
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_UART_Transmit_IT+0x28>
 8001cd0:	1dbb      	adds	r3, r7, #6
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e03d      	b.n	8001d58 <HAL_UART_Transmit_IT+0xa8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be filled into TDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	015b      	lsls	r3, r3, #5
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d109      	bne.n	8001cfc <HAL_UART_Transmit_IT+0x4c>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d105      	bne.n	8001cfc <HAL_UART_Transmit_IT+0x4c>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d001      	beq.n	8001cfc <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e02d      	b.n	8001d58 <HAL_UART_Transmit_IT+0xa8>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2268      	movs	r2, #104	; 0x68
 8001d00:	5c9b      	ldrb	r3, [r3, r2]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <HAL_UART_Transmit_IT+0x5a>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e026      	b.n	8001d58 <HAL_UART_Transmit_IT+0xa8>
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2268      	movs	r2, #104	; 0x68
 8001d0e:	2101      	movs	r1, #1
 8001d10:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr = pData;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize = Size;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1dba      	adds	r2, r7, #6
 8001d1c:	2150      	movs	r1, #80	; 0x50
 8001d1e:	8812      	ldrh	r2, [r2, #0]
 8001d20:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1dba      	adds	r2, r7, #6
 8001d26:	2152      	movs	r1, #82	; 0x52
 8001d28:	8812      	ldrh	r2, [r2, #0]
 8001d2a:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2269      	movs	r2, #105	; 0x69
 8001d36:	2121      	movs	r1, #33	; 0x21
 8001d38:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2268      	movs	r2, #104	; 0x68
 8001d3e:	2100      	movs	r1, #0
 8001d40:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Transmit Data Register Empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2180      	movs	r1, #128	; 0x80
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	e000      	b.n	8001d58 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8001d56:	2302      	movs	r3, #2
  }
}
 8001d58:	0018      	movs	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b004      	add	sp, #16
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_UART_Receive_IT>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	1dbb      	adds	r3, r7, #6
 8001d6c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	226a      	movs	r2, #106	; 0x6a
 8001d72:	5c9b      	ldrb	r3, [r3, r2]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b20      	cmp	r3, #32
 8001d78:	d000      	beq.n	8001d7c <HAL_UART_Receive_IT+0x1c>
 8001d7a:	e073      	b.n	8001e64 <HAL_UART_Receive_IT+0x104>
  {
    if((pData == NULL ) || (Size == 0U))
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_UART_Receive_IT+0x2a>
 8001d82:	1dbb      	adds	r3, r7, #6
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d101      	bne.n	8001d8e <HAL_UART_Receive_IT+0x2e>
    {
      return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e06b      	b.n	8001e66 <HAL_UART_Receive_IT+0x106>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be received from RDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	689a      	ldr	r2, [r3, #8]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	015b      	lsls	r3, r3, #5
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d109      	bne.n	8001dae <HAL_UART_Receive_IT+0x4e>
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d105      	bne.n	8001dae <HAL_UART_Receive_IT+0x4e>
    {
      if((((uint32_t)pData)&1U) != 0U)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2201      	movs	r2, #1
 8001da6:	4013      	ands	r3, r2
 8001da8:	d001      	beq.n	8001dae <HAL_UART_Receive_IT+0x4e>
      {
        return  HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e05b      	b.n	8001e66 <HAL_UART_Receive_IT+0x106>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2268      	movs	r2, #104	; 0x68
 8001db2:	5c9b      	ldrb	r3, [r3, r2]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_UART_Receive_IT+0x5c>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e054      	b.n	8001e66 <HAL_UART_Receive_IT+0x106>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2268      	movs	r2, #104	; 0x68
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	1dba      	adds	r2, r7, #6
 8001dce:	2158      	movs	r1, #88	; 0x58
 8001dd0:	8812      	ldrh	r2, [r2, #0]
 8001dd2:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	1dba      	adds	r2, r7, #6
 8001dd8:	215a      	movs	r1, #90	; 0x5a
 8001dda:	8812      	ldrh	r2, [r2, #0]
 8001ddc:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	015b      	lsls	r3, r3, #5
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d10d      	bne.n	8001e06 <HAL_UART_Receive_IT+0xa6>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d104      	bne.n	8001dfc <HAL_UART_Receive_IT+0x9c>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	225c      	movs	r2, #92	; 0x5c
 8001df6:	491e      	ldr	r1, [pc, #120]	; (8001e70 <HAL_UART_Receive_IT+0x110>)
 8001df8:	5299      	strh	r1, [r3, r2]
 8001dfa:	e015      	b.n	8001e28 <HAL_UART_Receive_IT+0xc8>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	225c      	movs	r2, #92	; 0x5c
 8001e00:	21ff      	movs	r1, #255	; 0xff
 8001e02:	5299      	strh	r1, [r3, r2]
 8001e04:	e010      	b.n	8001e28 <HAL_UART_Receive_IT+0xc8>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d10c      	bne.n	8001e28 <HAL_UART_Receive_IT+0xc8>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d104      	bne.n	8001e20 <HAL_UART_Receive_IT+0xc0>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	225c      	movs	r2, #92	; 0x5c
 8001e1a:	21ff      	movs	r1, #255	; 0xff
 8001e1c:	5299      	strh	r1, [r3, r2]
 8001e1e:	e003      	b.n	8001e28 <HAL_UART_Receive_IT+0xc8>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	225c      	movs	r2, #92	; 0x5c
 8001e24:	217f      	movs	r1, #127	; 0x7f
 8001e26:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	226a      	movs	r2, #106	; 0x6a
 8001e32:	2122      	movs	r1, #34	; 0x22
 8001e34:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2268      	movs	r2, #104	; 0x68
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2101      	movs	r1, #1
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	609a      	str	r2, [r3, #8]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2190      	movs	r1, #144	; 0x90
 8001e5a:	0049      	lsls	r1, r1, #1
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001e60:	2300      	movs	r3, #0
 8001e62:	e000      	b.n	8001e66 <HAL_UART_Receive_IT+0x106>
  }
  else
  {
    return HAL_BUSY;
 8001e64:	2302      	movs	r3, #2
  }
}
 8001e66:	0018      	movs	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	b004      	add	sp, #16
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	000001ff 	.word	0x000001ff

08001e74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	220f      	movs	r2, #15
 8001e90:	4013      	ands	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10c      	bne.n	8001eb4 <HAL_UART_IRQHandler+0x40>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d008      	beq.n	8001eb4 <HAL_UART_IRQHandler+0x40>
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d004      	beq.n	8001eb4 <HAL_UART_IRQHandler+0x40>
    {
      UART_Receive_IT(huart);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	0018      	movs	r0, r3
 8001eae:	f000 fbb3 	bl	8002618 <UART_Receive_IT>
      return;
 8001eb2:	e0d3      	b.n	800205c <HAL_UART_IRQHandler+0x1e8>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	60bb      	str	r3, [r7, #8]
  if(   (errorflags != RESET)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d100      	bne.n	8001ec4 <HAL_UART_IRQHandler+0x50>
 8001ec2:	e0af      	b.n	8002024 <HAL_UART_IRQHandler+0x1b0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d105      	bne.n	8001ed8 <HAL_UART_IRQHandler+0x64>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	2390      	movs	r3, #144	; 0x90
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d100      	bne.n	8001ed8 <HAL_UART_IRQHandler+0x64>
 8001ed6:	e0a5      	b.n	8002024 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	2201      	movs	r2, #1
 8001edc:	4013      	ands	r3, r2
 8001ede:	d00e      	beq.n	8001efe <HAL_UART_IRQHandler+0x8a>
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d009      	beq.n	8001efe <HAL_UART_IRQHandler+0x8a>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	431a      	orrs	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	2202      	movs	r2, #2
 8001f02:	4013      	ands	r3, r2
 8001f04:	d00d      	beq.n	8001f22 <HAL_UART_IRQHandler+0xae>
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d009      	beq.n	8001f22 <HAL_UART_IRQHandler+0xae>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2202      	movs	r2, #2
 8001f14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f1a:	2204      	movs	r2, #4
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2204      	movs	r2, #4
 8001f26:	4013      	ands	r3, r2
 8001f28:	d00d      	beq.n	8001f46 <HAL_UART_IRQHandler+0xd2>
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d009      	beq.n	8001f46 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2204      	movs	r2, #4
 8001f38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f3e:	2202      	movs	r2, #2
 8001f40:	431a      	orrs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	2208      	movs	r2, #8
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d011      	beq.n	8001f72 <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	2220      	movs	r2, #32
 8001f52:	4013      	ands	r3, r2
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8001f54:	d103      	bne.n	8001f5e <HAL_UART_IRQHandler+0xea>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d009      	beq.n	8001f72 <HAL_UART_IRQHandler+0xfe>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2208      	movs	r2, #8
 8001f64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f6a:	2208      	movs	r2, #8
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d100      	bne.n	8001f7c <HAL_UART_IRQHandler+0x108>
 8001f7a:	e06e      	b.n	800205a <HAL_UART_IRQHandler+0x1e6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	2220      	movs	r2, #32
 8001f80:	4013      	ands	r3, r2
 8001f82:	d007      	beq.n	8001f94 <HAL_UART_IRQHandler+0x120>
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	2220      	movs	r2, #32
 8001f88:	4013      	ands	r3, r2
 8001f8a:	d003      	beq.n	8001f94 <HAL_UART_IRQHandler+0x120>
      {
        UART_Receive_IT(huart);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f000 fb42 	bl	8002618 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f98:	2208      	movs	r2, #8
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d105      	bne.n	8001faa <HAL_UART_IRQHandler+0x136>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2240      	movs	r2, #64	; 0x40
 8001fa6:	4013      	ands	r3, r2
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001fa8:	d032      	beq.n	8002010 <HAL_UART_IRQHandler+0x19c>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	0018      	movs	r0, r3
 8001fae:	f000 fa8d 	bl	80024cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689b      	ldr	r3, [r3, #8]
 8001fb8:	2240      	movs	r2, #64	; 0x40
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d023      	beq.n	8002006 <HAL_UART_IRQHandler+0x192>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2140      	movs	r1, #64	; 0x40
 8001fca:	438a      	bics	r2, r1
 8001fcc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d012      	beq.n	8001ffc <HAL_UART_IRQHandler+0x188>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fda:	4a22      	ldr	r2, [pc, #136]	; (8002064 <HAL_UART_IRQHandler+0x1f0>)
 8001fdc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	f7fe ff22 	bl	8000e2c <HAL_DMA_Abort_IT>
 8001fe8:	1e03      	subs	r3, r0, #0
 8001fea:	d019      	beq.n	8002020 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ff0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ff6:	0018      	movs	r0, r3
 8001ff8:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ffa:	e011      	b.n	8002020 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	0018      	movs	r0, r3
 8002000:	f000 f832 	bl	8002068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002004:	e00c      	b.n	8002020 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	0018      	movs	r0, r3
 800200a:	f000 f82d 	bl	8002068 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800200e:	e007      	b.n	8002020 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	0018      	movs	r0, r3
 8002014:	f000 f828 	bl	8002068 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 800201e:	e01c      	b.n	800205a <HAL_UART_IRQHandler+0x1e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002020:	46c0      	nop			; (mov r8, r8)
    return;
 8002022:	e01a      	b.n	800205a <HAL_UART_IRQHandler+0x1e6>
    return;
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	2280      	movs	r2, #128	; 0x80
 8002028:	4013      	ands	r3, r2
 800202a:	d008      	beq.n	800203e <HAL_UART_IRQHandler+0x1ca>
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	2280      	movs	r2, #128	; 0x80
 8002030:	4013      	ands	r3, r2
 8002032:	d004      	beq.n	800203e <HAL_UART_IRQHandler+0x1ca>
  {
    UART_Transmit_IT(huart);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	0018      	movs	r0, r3
 8002038:	f000 fa7d 	bl	8002536 <UART_Transmit_IT>
    return;
 800203c:	e00e      	b.n	800205c <HAL_UART_IRQHandler+0x1e8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	2240      	movs	r2, #64	; 0x40
 8002042:	4013      	ands	r3, r2
 8002044:	d00a      	beq.n	800205c <HAL_UART_IRQHandler+0x1e8>
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	2240      	movs	r2, #64	; 0x40
 800204a:	4013      	ands	r3, r2
 800204c:	d006      	beq.n	800205c <HAL_UART_IRQHandler+0x1e8>
  {
    UART_EndTransmit_IT(huart);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	0018      	movs	r0, r3
 8002052:	f000 fac7 	bl	80025e4 <UART_EndTransmit_IT>
    return;
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	e000      	b.n	800205c <HAL_UART_IRQHandler+0x1e8>
    return;
 800205a:	46c0      	nop			; (mov r8, r8)
  }

}
 800205c:	46bd      	mov	sp, r7
 800205e:	b006      	add	sp, #24
 8002060:	bd80      	pop	{r7, pc}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	08002509 	.word	0x08002509

08002068 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002070:	46c0      	nop			; (mov r8, r8)
 8002072:	46bd      	mov	sp, r7
 8002074:	b002      	add	sp, #8
 8002076:	bd80      	pop	{r7, pc}

08002078 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002078:	b590      	push	{r4, r7, lr}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002084:	2317      	movs	r3, #23
 8002086:	18fb      	adds	r3, r7, r3
 8002088:	2210      	movs	r2, #16
 800208a:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 800208c:	230a      	movs	r3, #10
 800208e:	18fb      	adds	r3, r7, r3
 8002090:	2200      	movs	r2, #0
 8002092:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8002094:	2314      	movs	r3, #20
 8002096:	18fb      	adds	r3, r7, r3
 8002098:	2200      	movs	r2, #0
 800209a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 800209c:	2313      	movs	r3, #19
 800209e:	18fb      	adds	r3, r7, r3
 80020a0:	2200      	movs	r2, #0
 80020a2:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	431a      	orrs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69db      	ldr	r3, [r3, #28]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a96      	ldr	r2, [pc, #600]	; (800231c <UART_SetConfig+0x2a4>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	0019      	movs	r1, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	4a91      	ldr	r2, [pc, #580]	; (8002320 <UART_SetConfig+0x2a8>)
 80020da:	4013      	ands	r3, r2
 80020dc:	0019      	movs	r1, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699a      	ldr	r2, [r3, #24]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	4a89      	ldr	r2, [pc, #548]	; (8002324 <UART_SetConfig+0x2ac>)
 80020fe:	4013      	ands	r3, r2
 8002100:	0019      	movs	r1, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	430a      	orrs	r2, r1
 800210a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800210c:	4b86      	ldr	r3, [pc, #536]	; (8002328 <UART_SetConfig+0x2b0>)
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	2203      	movs	r2, #3
 8002112:	4013      	ands	r3, r2
 8002114:	2b01      	cmp	r3, #1
 8002116:	d00f      	beq.n	8002138 <UART_SetConfig+0xc0>
 8002118:	d304      	bcc.n	8002124 <UART_SetConfig+0xac>
 800211a:	2b02      	cmp	r3, #2
 800211c:	d011      	beq.n	8002142 <UART_SetConfig+0xca>
 800211e:	2b03      	cmp	r3, #3
 8002120:	d005      	beq.n	800212e <UART_SetConfig+0xb6>
 8002122:	e013      	b.n	800214c <UART_SetConfig+0xd4>
 8002124:	2317      	movs	r3, #23
 8002126:	18fb      	adds	r3, r7, r3
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
 800212c:	e012      	b.n	8002154 <UART_SetConfig+0xdc>
 800212e:	2317      	movs	r3, #23
 8002130:	18fb      	adds	r3, r7, r3
 8002132:	2202      	movs	r2, #2
 8002134:	701a      	strb	r2, [r3, #0]
 8002136:	e00d      	b.n	8002154 <UART_SetConfig+0xdc>
 8002138:	2317      	movs	r3, #23
 800213a:	18fb      	adds	r3, r7, r3
 800213c:	2204      	movs	r2, #4
 800213e:	701a      	strb	r2, [r3, #0]
 8002140:	e008      	b.n	8002154 <UART_SetConfig+0xdc>
 8002142:	2317      	movs	r3, #23
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	2208      	movs	r2, #8
 8002148:	701a      	strb	r2, [r3, #0]
 800214a:	e003      	b.n	8002154 <UART_SetConfig+0xdc>
 800214c:	2317      	movs	r3, #23
 800214e:	18fb      	adds	r3, r7, r3
 8002150:	2210      	movs	r2, #16
 8002152:	701a      	strb	r2, [r3, #0]
 8002154:	46c0      	nop			; (mov r8, r8)
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69da      	ldr	r2, [r3, #28]
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	021b      	lsls	r3, r3, #8
 800215e:	429a      	cmp	r2, r3
 8002160:	d000      	beq.n	8002164 <UART_SetConfig+0xec>
 8002162:	e077      	b.n	8002254 <UART_SetConfig+0x1dc>
  {
    switch (clocksource)
 8002164:	2317      	movs	r3, #23
 8002166:	18fb      	adds	r3, r7, r3
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d01c      	beq.n	80021a8 <UART_SetConfig+0x130>
 800216e:	dc02      	bgt.n	8002176 <UART_SetConfig+0xfe>
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <UART_SetConfig+0x108>
 8002174:	e04f      	b.n	8002216 <UART_SetConfig+0x19e>
 8002176:	2b04      	cmp	r3, #4
 8002178:	d027      	beq.n	80021ca <UART_SetConfig+0x152>
 800217a:	2b08      	cmp	r3, #8
 800217c:	d039      	beq.n	80021f2 <UART_SetConfig+0x17a>
 800217e:	e04a      	b.n	8002216 <UART_SetConfig+0x19e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002180:	f7ff fc5a 	bl	8001a38 <HAL_RCC_GetPCLK1Freq>
 8002184:	0003      	movs	r3, r0
 8002186:	005a      	lsls	r2, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	085b      	lsrs	r3, r3, #1
 800218e:	18d2      	adds	r2, r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	0019      	movs	r1, r3
 8002196:	0010      	movs	r0, r2
 8002198:	f7fd ffb6 	bl	8000108 <__udivsi3>
 800219c:	0003      	movs	r3, r0
 800219e:	001a      	movs	r2, r3
 80021a0:	2314      	movs	r3, #20
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	801a      	strh	r2, [r3, #0]
        break;
 80021a6:	e03b      	b.n	8002220 <UART_SetConfig+0x1a8>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	085b      	lsrs	r3, r3, #1
 80021ae:	4a5f      	ldr	r2, [pc, #380]	; (800232c <UART_SetConfig+0x2b4>)
 80021b0:	189a      	adds	r2, r3, r2
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	0019      	movs	r1, r3
 80021b8:	0010      	movs	r0, r2
 80021ba:	f7fd ffa5 	bl	8000108 <__udivsi3>
 80021be:	0003      	movs	r3, r0
 80021c0:	001a      	movs	r2, r3
 80021c2:	2314      	movs	r3, #20
 80021c4:	18fb      	adds	r3, r7, r3
 80021c6:	801a      	strh	r2, [r3, #0]
        break;
 80021c8:	e02a      	b.n	8002220 <UART_SetConfig+0x1a8>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80021ca:	f7ff fbc5 	bl	8001958 <HAL_RCC_GetSysClockFreq>
 80021ce:	0003      	movs	r3, r0
 80021d0:	005a      	lsls	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	085b      	lsrs	r3, r3, #1
 80021d8:	18d2      	adds	r2, r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	0019      	movs	r1, r3
 80021e0:	0010      	movs	r0, r2
 80021e2:	f7fd ff91 	bl	8000108 <__udivsi3>
 80021e6:	0003      	movs	r3, r0
 80021e8:	001a      	movs	r2, r3
 80021ea:	2314      	movs	r3, #20
 80021ec:	18fb      	adds	r3, r7, r3
 80021ee:	801a      	strh	r2, [r3, #0]
        break;
 80021f0:	e016      	b.n	8002220 <UART_SetConfig+0x1a8>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	085b      	lsrs	r3, r3, #1
 80021f8:	2280      	movs	r2, #128	; 0x80
 80021fa:	0252      	lsls	r2, r2, #9
 80021fc:	189a      	adds	r2, r3, r2
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	0019      	movs	r1, r3
 8002204:	0010      	movs	r0, r2
 8002206:	f7fd ff7f 	bl	8000108 <__udivsi3>
 800220a:	0003      	movs	r3, r0
 800220c:	001a      	movs	r2, r3
 800220e:	2314      	movs	r3, #20
 8002210:	18fb      	adds	r3, r7, r3
 8002212:	801a      	strh	r2, [r3, #0]
        break;
 8002214:	e004      	b.n	8002220 <UART_SetConfig+0x1a8>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002216:	2313      	movs	r3, #19
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	2201      	movs	r2, #1
 800221c:	701a      	strb	r2, [r3, #0]
        break;
 800221e:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002220:	200a      	movs	r0, #10
 8002222:	183b      	adds	r3, r7, r0
 8002224:	2414      	movs	r4, #20
 8002226:	193a      	adds	r2, r7, r4
 8002228:	8812      	ldrh	r2, [r2, #0]
 800222a:	210f      	movs	r1, #15
 800222c:	438a      	bics	r2, r1
 800222e:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002230:	193b      	adds	r3, r7, r4
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	105b      	asrs	r3, r3, #1
 8002236:	b29b      	uxth	r3, r3
 8002238:	2207      	movs	r2, #7
 800223a:	4013      	ands	r3, r2
 800223c:	b299      	uxth	r1, r3
 800223e:	183b      	adds	r3, r7, r0
 8002240:	183a      	adds	r2, r7, r0
 8002242:	8812      	ldrh	r2, [r2, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	183a      	adds	r2, r7, r0
 800224e:	8812      	ldrh	r2, [r2, #0]
 8002250:	60da      	str	r2, [r3, #12]
 8002252:	e05b      	b.n	800230c <UART_SetConfig+0x294>
  }
  else
  {
    switch (clocksource)
 8002254:	2317      	movs	r3, #23
 8002256:	18fb      	adds	r3, r7, r3
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d01b      	beq.n	8002296 <UART_SetConfig+0x21e>
 800225e:	dc02      	bgt.n	8002266 <UART_SetConfig+0x1ee>
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <UART_SetConfig+0x1f8>
 8002264:	e04d      	b.n	8002302 <UART_SetConfig+0x28a>
 8002266:	2b04      	cmp	r3, #4
 8002268:	d026      	beq.n	80022b8 <UART_SetConfig+0x240>
 800226a:	2b08      	cmp	r3, #8
 800226c:	d037      	beq.n	80022de <UART_SetConfig+0x266>
 800226e:	e048      	b.n	8002302 <UART_SetConfig+0x28a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002270:	f7ff fbe2 	bl	8001a38 <HAL_RCC_GetPCLK1Freq>
 8002274:	0002      	movs	r2, r0
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	085b      	lsrs	r3, r3, #1
 800227c:	18d2      	adds	r2, r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	0019      	movs	r1, r3
 8002284:	0010      	movs	r0, r2
 8002286:	f7fd ff3f 	bl	8000108 <__udivsi3>
 800228a:	0003      	movs	r3, r0
 800228c:	b29a      	uxth	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	60da      	str	r2, [r3, #12]
        break;
 8002294:	e03a      	b.n	800230c <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	085b      	lsrs	r3, r3, #1
 800229c:	4a24      	ldr	r2, [pc, #144]	; (8002330 <UART_SetConfig+0x2b8>)
 800229e:	189a      	adds	r2, r3, r2
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	0019      	movs	r1, r3
 80022a6:	0010      	movs	r0, r2
 80022a8:	f7fd ff2e 	bl	8000108 <__udivsi3>
 80022ac:	0003      	movs	r3, r0
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60da      	str	r2, [r3, #12]
        break;
 80022b6:	e029      	b.n	800230c <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80022b8:	f7ff fb4e 	bl	8001958 <HAL_RCC_GetSysClockFreq>
 80022bc:	0002      	movs	r2, r0
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	085b      	lsrs	r3, r3, #1
 80022c4:	18d2      	adds	r2, r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	0019      	movs	r1, r3
 80022cc:	0010      	movs	r0, r2
 80022ce:	f7fd ff1b 	bl	8000108 <__udivsi3>
 80022d2:	0003      	movs	r3, r0
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	60da      	str	r2, [r3, #12]
        break;
 80022dc:	e016      	b.n	800230c <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	085b      	lsrs	r3, r3, #1
 80022e4:	2280      	movs	r2, #128	; 0x80
 80022e6:	0212      	lsls	r2, r2, #8
 80022e8:	189a      	adds	r2, r3, r2
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	0019      	movs	r1, r3
 80022f0:	0010      	movs	r0, r2
 80022f2:	f7fd ff09 	bl	8000108 <__udivsi3>
 80022f6:	0003      	movs	r3, r0
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	60da      	str	r2, [r3, #12]
        break;
 8002300:	e004      	b.n	800230c <UART_SetConfig+0x294>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002302:	2313      	movs	r3, #19
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	2201      	movs	r2, #1
 8002308:	701a      	strb	r2, [r3, #0]
        break;
 800230a:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 800230c:	2313      	movs	r3, #19
 800230e:	18fb      	adds	r3, r7, r3
 8002310:	781b      	ldrb	r3, [r3, #0]

}
 8002312:	0018      	movs	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	b007      	add	sp, #28
 8002318:	bd90      	pop	{r4, r7, pc}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	ffff69f3 	.word	0xffff69f3
 8002320:	ffffcfff 	.word	0xffffcfff
 8002324:	fffff4ff 	.word	0xfffff4ff
 8002328:	40021000 	.word	0x40021000
 800232c:	00f42400 	.word	0x00f42400
 8002330:	007a1200 	.word	0x007a1200

08002334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002340:	2201      	movs	r2, #1
 8002342:	4013      	ands	r3, r2
 8002344:	d00b      	beq.n	800235e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4a4a      	ldr	r2, [pc, #296]	; (8002478 <UART_AdvFeatureConfig+0x144>)
 800234e:	4013      	ands	r3, r2
 8002350:	0019      	movs	r1, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	430a      	orrs	r2, r1
 800235c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002362:	2202      	movs	r2, #2
 8002364:	4013      	ands	r3, r2
 8002366:	d00b      	beq.n	8002380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	4a43      	ldr	r2, [pc, #268]	; (800247c <UART_AdvFeatureConfig+0x148>)
 8002370:	4013      	ands	r3, r2
 8002372:	0019      	movs	r1, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	2204      	movs	r2, #4
 8002386:	4013      	ands	r3, r2
 8002388:	d00b      	beq.n	80023a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	4a3b      	ldr	r2, [pc, #236]	; (8002480 <UART_AdvFeatureConfig+0x14c>)
 8002392:	4013      	ands	r3, r2
 8002394:	0019      	movs	r1, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a6:	2208      	movs	r2, #8
 80023a8:	4013      	ands	r3, r2
 80023aa:	d00b      	beq.n	80023c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	4a34      	ldr	r2, [pc, #208]	; (8002484 <UART_AdvFeatureConfig+0x150>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	0019      	movs	r1, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	2210      	movs	r2, #16
 80023ca:	4013      	ands	r3, r2
 80023cc:	d00b      	beq.n	80023e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4a2c      	ldr	r2, [pc, #176]	; (8002488 <UART_AdvFeatureConfig+0x154>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	0019      	movs	r1, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	2220      	movs	r2, #32
 80023ec:	4013      	ands	r3, r2
 80023ee:	d00b      	beq.n	8002408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	4a25      	ldr	r2, [pc, #148]	; (800248c <UART_AdvFeatureConfig+0x158>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	0019      	movs	r1, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	430a      	orrs	r2, r1
 8002406:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	2240      	movs	r2, #64	; 0x40
 800240e:	4013      	ands	r3, r2
 8002410:	d01d      	beq.n	800244e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	4a1d      	ldr	r2, [pc, #116]	; (8002490 <UART_AdvFeatureConfig+0x15c>)
 800241a:	4013      	ands	r3, r2
 800241c:	0019      	movs	r1, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	035b      	lsls	r3, r3, #13
 8002432:	429a      	cmp	r2, r3
 8002434:	d10b      	bne.n	800244e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4a15      	ldr	r2, [pc, #84]	; (8002494 <UART_AdvFeatureConfig+0x160>)
 800243e:	4013      	ands	r3, r2
 8002440:	0019      	movs	r1, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	2280      	movs	r2, #128	; 0x80
 8002454:	4013      	ands	r3, r2
 8002456:	d00b      	beq.n	8002470 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	4a0e      	ldr	r2, [pc, #56]	; (8002498 <UART_AdvFeatureConfig+0x164>)
 8002460:	4013      	ands	r3, r2
 8002462:	0019      	movs	r1, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	605a      	str	r2, [r3, #4]
  }
}
 8002470:	46c0      	nop			; (mov r8, r8)
 8002472:	46bd      	mov	sp, r7
 8002474:	b002      	add	sp, #8
 8002476:	bd80      	pop	{r7, pc}
 8002478:	fffdffff 	.word	0xfffdffff
 800247c:	fffeffff 	.word	0xfffeffff
 8002480:	fffbffff 	.word	0xfffbffff
 8002484:	ffff7fff 	.word	0xffff7fff
 8002488:	ffffefff 	.word	0xffffefff
 800248c:	ffffdfff 	.word	0xffffdfff
 8002490:	ffefffff 	.word	0xffefffff
 8002494:	ff9fffff 	.word	0xff9fffff
 8002498:	fff7ffff 	.word	0xfff7ffff

0800249c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2269      	movs	r2, #105	; 0x69
 80024ae:	2120      	movs	r1, #32
 80024b0:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	226a      	movs	r2, #106	; 0x6a
 80024b6:	2120      	movs	r1, #32
 80024b8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2268      	movs	r2, #104	; 0x68
 80024be:	2100      	movs	r1, #0
 80024c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b002      	add	sp, #8
 80024ca:	bd80      	pop	{r7, pc}

080024cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4909      	ldr	r1, [pc, #36]	; (8002504 <UART_EndRxTransfer+0x38>)
 80024e0:	400a      	ands	r2, r1
 80024e2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2101      	movs	r1, #1
 80024f0:	438a      	bics	r2, r1
 80024f2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	226a      	movs	r2, #106	; 0x6a
 80024f8:	2120      	movs	r1, #32
 80024fa:	5499      	strb	r1, [r3, r2]
}
 80024fc:	46c0      	nop			; (mov r8, r8)
 80024fe:	46bd      	mov	sp, r7
 8002500:	b002      	add	sp, #8
 8002502:	bd80      	pop	{r7, pc}
 8002504:	fffffedf 	.word	0xfffffedf

08002508 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	225a      	movs	r2, #90	; 0x5a
 800251a:	2100      	movs	r1, #0
 800251c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2252      	movs	r2, #82	; 0x52
 8002522:	2100      	movs	r1, #0
 8002524:	5299      	strh	r1, [r3, r2]

  HAL_UART_ErrorCallback(huart);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	0018      	movs	r0, r3
 800252a:	f7ff fd9d 	bl	8002068 <HAL_UART_ErrorCallback>
}
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	46bd      	mov	sp, r7
 8002532:	b004      	add	sp, #16
 8002534:	bd80      	pop	{r7, pc}

08002536 <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b084      	sub	sp, #16
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2269      	movs	r2, #105	; 0x69
 8002542:	5c9b      	ldrb	r3, [r3, r2]
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b21      	cmp	r3, #33	; 0x21
 8002548:	d147      	bne.n	80025da <UART_Transmit_IT+0xa4>
  {
    if(huart->TxXferCount == 0U)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2252      	movs	r2, #82	; 0x52
 800254e:	5a9b      	ldrh	r3, [r3, r2]
 8002550:	b29b      	uxth	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d111      	bne.n	800257a <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2180      	movs	r1, #128	; 0x80
 8002562:	438a      	bics	r2, r1
 8002564:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2140      	movs	r1, #64	; 0x40
 8002572:	430a      	orrs	r2, r1
 8002574:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	e030      	b.n	80025dc <UART_Transmit_IT+0xa6>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	2380      	movs	r3, #128	; 0x80
 8002580:	015b      	lsls	r3, r3, #5
 8002582:	429a      	cmp	r2, r3
 8002584:	d114      	bne.n	80025b0 <UART_Transmit_IT+0x7a>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d110      	bne.n	80025b0 <UART_Transmit_IT+0x7a>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002592:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	881a      	ldrh	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	05d2      	lsls	r2, r2, #23
 800259e:	0dd2      	lsrs	r2, r2, #23
 80025a0:	b292      	uxth	r2, r2
 80025a2:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a8:	1c9a      	adds	r2, r3, #2
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	64da      	str	r2, [r3, #76]	; 0x4c
 80025ae:	e009      	b.n	80025c4 <UART_Transmit_IT+0x8e>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b4:	1c59      	adds	r1, r3, #1
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	64d1      	str	r1, [r2, #76]	; 0x4c
 80025ba:	781a      	ldrb	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	b292      	uxth	r2, r2
 80025c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      huart->TxXferCount--;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2252      	movs	r2, #82	; 0x52
 80025c8:	5a9b      	ldrh	r3, [r3, r2]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3b01      	subs	r3, #1
 80025ce:	b299      	uxth	r1, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2252      	movs	r2, #82	; 0x52
 80025d4:	5299      	strh	r1, [r3, r2]

      return HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	e000      	b.n	80025dc <UART_Transmit_IT+0xa6>
    }
  }
  else
  {
    return HAL_BUSY;
 80025da:	2302      	movs	r3, #2
  }
}
 80025dc:	0018      	movs	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	b004      	add	sp, #16
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2140      	movs	r1, #64	; 0x40
 80025f8:	438a      	bics	r2, r1
 80025fa:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2269      	movs	r2, #105	; 0x69
 8002600:	2120      	movs	r1, #32
 8002602:	5499      	strb	r1, [r3, r2]

  HAL_UART_TxCpltCallback(huart);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	0018      	movs	r0, r3
 8002608:	f001 f8b8 	bl	800377c <HAL_UART_TxCpltCallback>

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	0018      	movs	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	b002      	add	sp, #8
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 8002620:	230e      	movs	r3, #14
 8002622:	18fb      	adds	r3, r7, r3
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	215c      	movs	r1, #92	; 0x5c
 8002628:	5a52      	ldrh	r2, [r2, r1]
 800262a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	226a      	movs	r2, #106	; 0x6a
 8002630:	5c9b      	ldrb	r3, [r3, r2]
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b22      	cmp	r3, #34	; 0x22
 8002636:	d15b      	bne.n	80026f0 <UART_Receive_IT+0xd8>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	230c      	movs	r3, #12
 800263e:	18fb      	adds	r3, r7, r3
 8002640:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8002642:	801a      	strh	r2, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	2380      	movs	r3, #128	; 0x80
 800264a:	015b      	lsls	r3, r3, #5
 800264c:	429a      	cmp	r2, r3
 800264e:	d116      	bne.n	800267e <UART_Receive_IT+0x66>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	691b      	ldr	r3, [r3, #16]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d112      	bne.n	800267e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265c:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 800265e:	230c      	movs	r3, #12
 8002660:	18fb      	adds	r3, r7, r3
 8002662:	220e      	movs	r2, #14
 8002664:	18ba      	adds	r2, r7, r2
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	8812      	ldrh	r2, [r2, #0]
 800266a:	4013      	ands	r3, r2
 800266c:	b29a      	uxth	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002676:	1c9a      	adds	r2, r3, #2
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	655a      	str	r2, [r3, #84]	; 0x54
 800267c:	e010      	b.n	80026a0 <UART_Receive_IT+0x88>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800267e:	230c      	movs	r3, #12
 8002680:	18fb      	adds	r3, r7, r3
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	b2d9      	uxtb	r1, r3
 8002686:	230e      	movs	r3, #14
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	881b      	ldrh	r3, [r3, #0]
 800268c:	b2d8      	uxtb	r0, r3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002692:	1c5c      	adds	r4, r3, #1
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6554      	str	r4, [r2, #84]	; 0x54
 8002698:	0002      	movs	r2, r0
 800269a:	400a      	ands	r2, r1
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	225a      	movs	r2, #90	; 0x5a
 80026a4:	5a9b      	ldrh	r3, [r3, r2]
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	3b01      	subs	r3, #1
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	215a      	movs	r1, #90	; 0x5a
 80026b0:	1c18      	adds	r0, r3, #0
 80026b2:	5250      	strh	r0, [r2, r1]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d119      	bne.n	80026ec <UART_Receive_IT+0xd4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4912      	ldr	r1, [pc, #72]	; (800270c <UART_Receive_IT+0xf4>)
 80026c4:	400a      	ands	r2, r1
 80026c6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2101      	movs	r1, #1
 80026d4:	438a      	bics	r2, r1
 80026d6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	226a      	movs	r2, #106	; 0x6a
 80026dc:	2120      	movs	r1, #32
 80026de:	5499      	strb	r1, [r3, r2]

      HAL_UART_RxCpltCallback(huart);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	0018      	movs	r0, r3
 80026e4:	f001 f852 	bl	800378c <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	e00a      	b.n	8002702 <UART_Receive_IT+0xea>
    }

    return HAL_OK;
 80026ec:	2300      	movs	r3, #0
 80026ee:	e008      	b.n	8002702 <UART_Receive_IT+0xea>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699a      	ldr	r2, [r3, #24]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2108      	movs	r1, #8
 80026fc:	430a      	orrs	r2, r1
 80026fe:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 8002700:	2302      	movs	r3, #2
  }
}
 8002702:	0018      	movs	r0, r3
 8002704:	46bd      	mov	sp, r7
 8002706:	b005      	add	sp, #20
 8002708:	bd90      	pop	{r4, r7, pc}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	fffffedf 	.word	0xfffffedf

08002710 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6819      	ldr	r1, [r3, #0]
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	435a      	muls	r2, r3
 8002726:	0013      	movs	r3, r2
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	189b      	adds	r3, r3, r2
 800272c:	43db      	mvns	r3, r3
 800272e:	400b      	ands	r3, r1
 8002730:	001a      	movs	r2, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	68b9      	ldr	r1, [r7, #8]
 8002736:	434b      	muls	r3, r1
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	434b      	muls	r3, r1
 800273c:	431a      	orrs	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	601a      	str	r2, [r3, #0]
}
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	46bd      	mov	sp, r7
 8002746:	b004      	add	sp, #16
 8002748:	bd80      	pop	{r7, pc}

0800274a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b084      	sub	sp, #16
 800274e:	af00      	add	r7, sp, #0
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	43d2      	mvns	r2, r2
 800275e:	401a      	ands	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	434b      	muls	r3, r1
 8002766:	431a      	orrs	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	605a      	str	r2, [r3, #4]
}
 800276c:	46c0      	nop			; (mov r8, r8)
 800276e:	46bd      	mov	sp, r7
 8002770:	b004      	add	sp, #16
 8002772:	bd80      	pop	{r7, pc}

08002774 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6899      	ldr	r1, [r3, #8]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	435a      	muls	r2, r3
 800278a:	0013      	movs	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	189b      	adds	r3, r3, r2
 8002790:	43db      	mvns	r3, r3
 8002792:	400b      	ands	r3, r1
 8002794:	001a      	movs	r2, r3
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	434b      	muls	r3, r1
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	434b      	muls	r3, r1
 80027a0:	431a      	orrs	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	609a      	str	r2, [r3, #8]
}
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	46bd      	mov	sp, r7
 80027aa:	b004      	add	sp, #16
 80027ac:	bd80      	pop	{r7, pc}

080027ae <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b084      	sub	sp, #16
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	68d9      	ldr	r1, [r3, #12]
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	68ba      	ldr	r2, [r7, #8]
 80027c2:	435a      	muls	r2, r3
 80027c4:	0013      	movs	r3, r2
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	189b      	adds	r3, r3, r2
 80027ca:	43db      	mvns	r3, r3
 80027cc:	400b      	ands	r3, r1
 80027ce:	001a      	movs	r2, r3
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	68b9      	ldr	r1, [r7, #8]
 80027d4:	434b      	muls	r3, r1
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	434b      	muls	r3, r1
 80027da:	431a      	orrs	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	60da      	str	r2, [r3, #12]
}
 80027e0:	46c0      	nop			; (mov r8, r8)
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b004      	add	sp, #16
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6a19      	ldr	r1, [r3, #32]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	4353      	muls	r3, r2
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	4353      	muls	r3, r2
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	435a      	muls	r2, r3
 8002806:	0013      	movs	r3, r2
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	43db      	mvns	r3, r3
 800280e:	400b      	ands	r3, r1
 8002810:	001a      	movs	r2, r3
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	434b      	muls	r3, r1
 8002818:	68b9      	ldr	r1, [r7, #8]
 800281a:	434b      	muls	r3, r1
 800281c:	68b9      	ldr	r1, [r7, #8]
 800281e:	434b      	muls	r3, r1
 8002820:	6879      	ldr	r1, [r7, #4]
 8002822:	434b      	muls	r3, r1
 8002824:	431a      	orrs	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	46bd      	mov	sp, r7
 800282e:	b004      	add	sp, #16
 8002830:	bd80      	pop	{r7, pc}

08002832 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b084      	sub	sp, #16
 8002836:	af00      	add	r7, sp, #0
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	0a1b      	lsrs	r3, r3, #8
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	0a12      	lsrs	r2, r2, #8
 800284a:	4353      	muls	r3, r2
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	0a12      	lsrs	r2, r2, #8
 8002850:	4353      	muls	r3, r2
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	0a12      	lsrs	r2, r2, #8
 8002856:	435a      	muls	r2, r3
 8002858:	0013      	movs	r3, r2
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	1a9b      	subs	r3, r3, r2
 800285e:	43db      	mvns	r3, r3
 8002860:	400b      	ands	r3, r1
 8002862:	001a      	movs	r2, r3
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	0a1b      	lsrs	r3, r3, #8
 8002868:	68b9      	ldr	r1, [r7, #8]
 800286a:	0a09      	lsrs	r1, r1, #8
 800286c:	434b      	muls	r3, r1
 800286e:	68b9      	ldr	r1, [r7, #8]
 8002870:	0a09      	lsrs	r1, r1, #8
 8002872:	434b      	muls	r3, r1
 8002874:	68b9      	ldr	r1, [r7, #8]
 8002876:	0a09      	lsrs	r1, r1, #8
 8002878:	434b      	muls	r3, r1
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	434b      	muls	r3, r1
 800287e:	431a      	orrs	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8002884:	46c0      	nop			; (mov r8, r8)
 8002886:	46bd      	mov	sp, r7
 8002888:	b004      	add	sp, #16
 800288a:	bd80      	pop	{r7, pc}

0800288c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
  uint32_t currentpin = 0x00000000U;
 800289a:	2300      	movs	r3, #0
 800289c:	60bb      	str	r3, [r7, #8]
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800289e:	e040      	b.n	8002922 <LL_GPIO_Init+0x96>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2101      	movs	r1, #1
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	4091      	lsls	r1, r2
 80028aa:	000a      	movs	r2, r1
 80028ac:	4013      	ands	r3, r2
 80028ae:	60bb      	str	r3, [r7, #8]

    if (currentpin)
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d032      	beq.n	800291c <LL_GPIO_Init+0x90>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	68b9      	ldr	r1, [r7, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	0018      	movs	r0, r3
 80028c0:	f7ff ff26 	bl	8002710 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d003      	beq.n	80028d4 <LL_GPIO_Init+0x48>
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d106      	bne.n	80028e2 <LL_GPIO_Init+0x56>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	68b9      	ldr	r1, [r7, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	0018      	movs	r0, r3
 80028de:	f7ff ff49 	bl	8002774 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	691a      	ldr	r2, [r3, #16]
 80028e6:	68b9      	ldr	r1, [r7, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	0018      	movs	r0, r3
 80028ec:	f7ff ff5f 	bl	80027ae <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d111      	bne.n	800291c <LL_GPIO_Init+0x90>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2bff      	cmp	r3, #255	; 0xff
 80028fc:	d807      	bhi.n	800290e <LL_GPIO_Init+0x82>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	68b9      	ldr	r1, [r7, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	0018      	movs	r0, r3
 8002908:	f7ff ff6e 	bl	80027e8 <LL_GPIO_SetAFPin_0_7>
 800290c:	e006      	b.n	800291c <LL_GPIO_Init+0x90>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	695a      	ldr	r2, [r3, #20]
 8002912:	68b9      	ldr	r1, [r7, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	0018      	movs	r0, r3
 8002918:	f7ff ff8b 	bl	8002832 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	3301      	adds	r3, #1
 8002920:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	40da      	lsrs	r2, r3
 800292a:	1e13      	subs	r3, r2, #0
 800292c:	d1b8      	bne.n	80028a0 <LL_GPIO_Init+0x14>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d003      	beq.n	800293e <LL_GPIO_Init+0xb2>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d107      	bne.n	800294e <LL_GPIO_Init+0xc2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	6819      	ldr	r1, [r3, #0]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	0018      	movs	r0, r3
 800294a:	f7ff fefe 	bl	800274a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800294e:	2301      	movs	r3, #1
}
 8002950:	0018      	movs	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	b004      	add	sp, #16
 8002956:	bd80      	pop	{r7, pc}

08002958 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002960:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <LL_mDelay+0x40>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002966:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	3301      	adds	r3, #1
 800296c:	d00c      	beq.n	8002988 <LL_mDelay+0x30>
  {
    Delay++;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3301      	adds	r3, #1
 8002972:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8002974:	e008      	b.n	8002988 <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002976:	4b08      	ldr	r3, [pc, #32]	; (8002998 <LL_mDelay+0x40>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	2380      	movs	r3, #128	; 0x80
 800297c:	025b      	lsls	r3, r3, #9
 800297e:	4013      	ands	r3, r2
 8002980:	d002      	beq.n	8002988 <LL_mDelay+0x30>
    {
      Delay--;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	3b01      	subs	r3, #1
 8002986:	607b      	str	r3, [r7, #4]
  while (Delay)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f3      	bne.n	8002976 <LL_mDelay+0x1e>
    }
  }
}
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	46bd      	mov	sp, r7
 8002992:	b004      	add	sp, #16
 8002994:	bd80      	pop	{r7, pc}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	e000e010 	.word	0xe000e010

0800299c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	619a      	str	r2, [r3, #24]
}
 80029ac:	46c0      	nop			; (mov r8, r8)
 80029ae:	46bd      	mov	sp, r7
 80029b0:	b002      	add	sp, #8
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <ADC_Check_And_Send>:

extern UART_HandleTypeDef huart1;
extern ADC_HandleTypeDef hadc;

void ADC_Check_And_Send(uint32_t powersts)
{
 80029b4:	b590      	push	{r4, r7, lr}
 80029b6:	b089      	sub	sp, #36	; 0x24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
	uint32_t batt_adc = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	61fb      	str	r3, [r7, #28]
	uint32_t usb_char_adc = 0;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61bb      	str	r3, [r7, #24]
	uint32_t ResultVoltage = 0;
 80029c4:	2300      	movs	r3, #0
 80029c6:	617b      	str	r3, [r7, #20]
	uint32_t batt_vol = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	613b      	str	r3, [r7, #16]
	uint8_t tx_data[6] = {0};
 80029cc:	2108      	movs	r1, #8
 80029ce:	000c      	movs	r4, r1
 80029d0:	187b      	adds	r3, r7, r1
 80029d2:	0018      	movs	r0, r3
 80029d4:	2306      	movs	r3, #6
 80029d6:	001a      	movs	r2, r3
 80029d8:	2100      	movs	r1, #0
 80029da:	f000 ff47 	bl	800386c <memset>

	tx_data[0] = 0x5a;
 80029de:	0021      	movs	r1, r4
 80029e0:	187b      	adds	r3, r7, r1
 80029e2:	225a      	movs	r2, #90	; 0x5a
 80029e4:	701a      	strb	r2, [r3, #0]
	tx_data[1] = 0xa5;
 80029e6:	187b      	adds	r3, r7, r1
 80029e8:	22a5      	movs	r2, #165	; 0xa5
 80029ea:	705a      	strb	r2, [r3, #1]
	tx_data[2] = 2; // msg length
 80029ec:	187b      	adds	r3, r7, r1
 80029ee:	2202      	movs	r2, #2
 80029f0:	709a      	strb	r2, [r3, #2]

	if(powersts != OFF)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d100      	bne.n	80029fa <ADC_Check_And_Send+0x46>
 80029f8:	e092      	b.n	8002b20 <ADC_Check_And_Send+0x16c>
	{
		//HAL_ADC_Start_IT(&hadc);
		HAL_ADC_Start(&hadc);
 80029fa:	4b5f      	ldr	r3, [pc, #380]	; (8002b78 <ADC_Check_And_Send+0x1c4>)
 80029fc:	0018      	movs	r0, r3
 80029fe:	f7fd fd93 	bl	8000528 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 10);
 8002a02:	4b5d      	ldr	r3, [pc, #372]	; (8002b78 <ADC_Check_And_Send+0x1c4>)
 8002a04:	210a      	movs	r1, #10
 8002a06:	0018      	movs	r0, r3
 8002a08:	f7fd fe22 	bl	8000650 <HAL_ADC_PollForConversion>
		usb_char_adc = HAL_ADC_GetValue(&hadc);
 8002a0c:	4b5a      	ldr	r3, [pc, #360]	; (8002b78 <ADC_Check_And_Send+0x1c4>)
 8002a0e:	0018      	movs	r0, r3
 8002a10:	f7fd feae 	bl	8000770 <HAL_ADC_GetValue>
 8002a14:	0003      	movs	r3, r0
 8002a16:	61bb      	str	r3, [r7, #24]
		if(USB_CHARGE_THRESHOLD_VAL <= usb_char_adc)
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	4a58      	ldr	r2, [pc, #352]	; (8002b7c <ADC_Check_And_Send+0x1c8>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d91d      	bls.n	8002a5c <ADC_Check_And_Send+0xa8>
		{
			tx_data[3] = 0; // data_msb
 8002a20:	2408      	movs	r4, #8
 8002a22:	193b      	adds	r3, r7, r4
 8002a24:	2200      	movs	r2, #0
 8002a26:	70da      	strb	r2, [r3, #3]
			tx_data[4] = IS_CHARGING; // data_lsb
 8002a28:	193b      	adds	r3, r7, r4
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	711a      	strb	r2, [r3, #4]
			tx_data[5] = crc8_calculate(tx_data, UART_MSG_LENGTH - 1);
 8002a2e:	193b      	adds	r3, r7, r4
 8002a30:	2105      	movs	r1, #5
 8002a32:	0018      	movs	r0, r3
 8002a34:	f000 f8aa 	bl	8002b8c <crc8_calculate>
 8002a38:	0003      	movs	r3, r0
 8002a3a:	001a      	movs	r2, r3
 8002a3c:	193b      	adds	r3, r7, r4
 8002a3e:	715a      	strb	r2, [r3, #5]
			HAL_UART_Transmit_IT(&huart1, (uint8_t *)tx_data, UART_MSG_LENGTH);
 8002a40:	1939      	adds	r1, r7, r4
 8002a42:	4b4f      	ldr	r3, [pc, #316]	; (8002b80 <ADC_Check_And_Send+0x1cc>)
 8002a44:	2206      	movs	r2, #6
 8002a46:	0018      	movs	r0, r3
 8002a48:	f7ff f932 	bl	8001cb0 <HAL_UART_Transmit_IT>
			while(huart1.gState != HAL_UART_STATE_READY)
 8002a4c:	46c0      	nop			; (mov r8, r8)
 8002a4e:	4b4c      	ldr	r3, [pc, #304]	; (8002b80 <ADC_Check_And_Send+0x1cc>)
 8002a50:	2269      	movs	r2, #105	; 0x69
 8002a52:	5c9b      	ldrb	r3, [r3, r2]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b20      	cmp	r3, #32
 8002a58:	d1f9      	bne.n	8002a4e <ADC_Check_And_Send+0x9a>
 8002a5a:	e01c      	b.n	8002a96 <ADC_Check_And_Send+0xe2>
			}
			//LL_GPIO_ResetOutputPin(BOOST_EN_GPIO_Port, BOOST_EN_Pin);
		}
		else
		{
			tx_data[3] = 0; // data_msb
 8002a5c:	2408      	movs	r4, #8
 8002a5e:	193b      	adds	r3, r7, r4
 8002a60:	2200      	movs	r2, #0
 8002a62:	70da      	strb	r2, [r3, #3]
			tx_data[4] = IS_NOT_CHARGING; // data_lsb
 8002a64:	193b      	adds	r3, r7, r4
 8002a66:	2205      	movs	r2, #5
 8002a68:	711a      	strb	r2, [r3, #4]
			tx_data[5] = crc8_calculate(tx_data, UART_MSG_LENGTH - 1);
 8002a6a:	193b      	adds	r3, r7, r4
 8002a6c:	2105      	movs	r1, #5
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f000 f88c 	bl	8002b8c <crc8_calculate>
 8002a74:	0003      	movs	r3, r0
 8002a76:	001a      	movs	r2, r3
 8002a78:	193b      	adds	r3, r7, r4
 8002a7a:	715a      	strb	r2, [r3, #5]
			HAL_UART_Transmit_IT(&huart1, (uint8_t *)tx_data, UART_MSG_LENGTH);
 8002a7c:	1939      	adds	r1, r7, r4
 8002a7e:	4b40      	ldr	r3, [pc, #256]	; (8002b80 <ADC_Check_And_Send+0x1cc>)
 8002a80:	2206      	movs	r2, #6
 8002a82:	0018      	movs	r0, r3
 8002a84:	f7ff f914 	bl	8001cb0 <HAL_UART_Transmit_IT>
			while(huart1.gState != HAL_UART_STATE_READY)
 8002a88:	46c0      	nop			; (mov r8, r8)
 8002a8a:	4b3d      	ldr	r3, [pc, #244]	; (8002b80 <ADC_Check_And_Send+0x1cc>)
 8002a8c:	2269      	movs	r2, #105	; 0x69
 8002a8e:	5c9b      	ldrb	r3, [r3, r2]
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b20      	cmp	r3, #32
 8002a94:	d1f9      	bne.n	8002a8a <ADC_Check_And_Send+0xd6>
				;
			}
			//LL_GPIO_ResetOutputPin(CHARGE_EN_GPIO_Port, CHARGE_EN_Pin);
		}

		HAL_ADC_PollForConversion(&hadc, 10);
 8002a96:	4b38      	ldr	r3, [pc, #224]	; (8002b78 <ADC_Check_And_Send+0x1c4>)
 8002a98:	210a      	movs	r1, #10
 8002a9a:	0018      	movs	r0, r3
 8002a9c:	f7fd fdd8 	bl	8000650 <HAL_ADC_PollForConversion>
		batt_adc = HAL_ADC_GetValue(&hadc);
 8002aa0:	4b35      	ldr	r3, [pc, #212]	; (8002b78 <ADC_Check_And_Send+0x1c4>)
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f7fd fe64 	bl	8000770 <HAL_ADC_GetValue>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	61fb      	str	r3, [r7, #28]
		ResultVoltage = (batt_adc * 3300) >> 12;
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	4a35      	ldr	r2, [pc, #212]	; (8002b84 <ADC_Check_And_Send+0x1d0>)
 8002ab0:	4353      	muls	r3, r2
 8002ab2:	0b1b      	lsrs	r3, r3, #12
 8002ab4:	617b      	str	r3, [r7, #20]
		batt_vol = ResultVoltage *673 / 523; /*15k+52.3=67.3*/
 8002ab6:	6979      	ldr	r1, [r7, #20]
 8002ab8:	000b      	movs	r3, r1
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	185b      	adds	r3, r3, r1
 8002abe:	00da      	lsls	r2, r3, #3
 8002ac0:	1ad2      	subs	r2, r2, r3
 8002ac2:	0152      	lsls	r2, r2, #5
 8002ac4:	1853      	adds	r3, r2, r1
 8002ac6:	4930      	ldr	r1, [pc, #192]	; (8002b88 <ADC_Check_And_Send+0x1d4>)
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f7fd fb1d 	bl	8000108 <__udivsi3>
 8002ace:	0003      	movs	r3, r0
 8002ad0:	613b      	str	r3, [r7, #16]
		tx_data[3] = (uint8_t)((batt_vol >> 8) &0xFF); // data_msb
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	0a1b      	lsrs	r3, r3, #8
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	2108      	movs	r1, #8
 8002ada:	187b      	adds	r3, r7, r1
 8002adc:	70da      	strb	r2, [r3, #3]
		tx_data[4] = (uint8_t)(batt_vol & 0xFF); // data_lsb
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	187b      	adds	r3, r7, r1
 8002ae4:	711a      	strb	r2, [r3, #4]
		tx_data[5] = crc8_calculate(tx_data, UART_MSG_LENGTH - 1);
 8002ae6:	000c      	movs	r4, r1
 8002ae8:	187b      	adds	r3, r7, r1
 8002aea:	2105      	movs	r1, #5
 8002aec:	0018      	movs	r0, r3
 8002aee:	f000 f84d 	bl	8002b8c <crc8_calculate>
 8002af2:	0003      	movs	r3, r0
 8002af4:	001a      	movs	r2, r3
 8002af6:	0021      	movs	r1, r4
 8002af8:	187b      	adds	r3, r7, r1
 8002afa:	715a      	strb	r2, [r3, #5]
		HAL_UART_Transmit_IT(&huart1, (uint8_t *)tx_data, UART_MSG_LENGTH);
 8002afc:	1879      	adds	r1, r7, r1
 8002afe:	4b20      	ldr	r3, [pc, #128]	; (8002b80 <ADC_Check_And_Send+0x1cc>)
 8002b00:	2206      	movs	r2, #6
 8002b02:	0018      	movs	r0, r3
 8002b04:	f7ff f8d4 	bl	8001cb0 <HAL_UART_Transmit_IT>
		while(huart1.gState != HAL_UART_STATE_READY)
 8002b08:	46c0      	nop			; (mov r8, r8)
 8002b0a:	4b1d      	ldr	r3, [pc, #116]	; (8002b80 <ADC_Check_And_Send+0x1cc>)
 8002b0c:	2269      	movs	r2, #105	; 0x69
 8002b0e:	5c9b      	ldrb	r3, [r3, r2]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	d1f9      	bne.n	8002b0a <ADC_Check_And_Send+0x156>
		{
			;
		}

		HAL_ADC_Stop(&hadc);
 8002b16:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <ADC_Check_And_Send+0x1c4>)
 8002b18:	0018      	movs	r0, r3
 8002b1a:	f7fd fd59 	bl	80005d0 <HAL_ADC_Stop>
		batt_adc = HAL_ADC_GetValue(&hadc);

		HAL_ADC_Stop(&hadc);

	}
}
 8002b1e:	e027      	b.n	8002b70 <ADC_Check_And_Send+0x1bc>
		HAL_ADC_Start(&hadc);
 8002b20:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <ADC_Check_And_Send+0x1c4>)
 8002b22:	0018      	movs	r0, r3
 8002b24:	f7fd fd00 	bl	8000528 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 10);
 8002b28:	4b13      	ldr	r3, [pc, #76]	; (8002b78 <ADC_Check_And_Send+0x1c4>)
 8002b2a:	210a      	movs	r1, #10
 8002b2c:	0018      	movs	r0, r3
 8002b2e:	f7fd fd8f 	bl	8000650 <HAL_ADC_PollForConversion>
		usb_char_adc = HAL_ADC_GetValue(&hadc);
 8002b32:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <ADC_Check_And_Send+0x1c4>)
 8002b34:	0018      	movs	r0, r3
 8002b36:	f7fd fe1b 	bl	8000770 <HAL_ADC_GetValue>
 8002b3a:	0003      	movs	r3, r0
 8002b3c:	61bb      	str	r3, [r7, #24]
		if(USB_CHARGE_THRESHOLD_VAL <= usb_char_adc)
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	4a0e      	ldr	r2, [pc, #56]	; (8002b7c <ADC_Check_And_Send+0x1c8>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d905      	bls.n	8002b52 <ADC_Check_And_Send+0x19e>
		  LL_GPIO_SetOutputPin(CHARGE_EN_GPIO_Port, CHARGE_EN_Pin);
 8002b46:	2390      	movs	r3, #144	; 0x90
 8002b48:	05db      	lsls	r3, r3, #23
 8002b4a:	2140      	movs	r1, #64	; 0x40
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f7ff ff25 	bl	800299c <LL_GPIO_SetOutputPin>
		HAL_ADC_PollForConversion(&hadc, 10);
 8002b52:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <ADC_Check_And_Send+0x1c4>)
 8002b54:	210a      	movs	r1, #10
 8002b56:	0018      	movs	r0, r3
 8002b58:	f7fd fd7a 	bl	8000650 <HAL_ADC_PollForConversion>
		batt_adc = HAL_ADC_GetValue(&hadc);
 8002b5c:	4b06      	ldr	r3, [pc, #24]	; (8002b78 <ADC_Check_And_Send+0x1c4>)
 8002b5e:	0018      	movs	r0, r3
 8002b60:	f7fd fe06 	bl	8000770 <HAL_ADC_GetValue>
 8002b64:	0003      	movs	r3, r0
 8002b66:	61fb      	str	r3, [r7, #28]
		HAL_ADC_Stop(&hadc);
 8002b68:	4b03      	ldr	r3, [pc, #12]	; (8002b78 <ADC_Check_And_Send+0x1c4>)
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f7fd fd30 	bl	80005d0 <HAL_ADC_Stop>
}
 8002b70:	46c0      	nop			; (mov r8, r8)
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b009      	add	sp, #36	; 0x24
 8002b76:	bd90      	pop	{r4, r7, pc}
 8002b78:	200000dc 	.word	0x200000dc
 8002b7c:	00000bb7 	.word	0x00000bb7
 8002b80:	2000006c 	.word	0x2000006c
 8002b84:	00000ce4 	.word	0x00000ce4
 8002b88:	0000020b 	.word	0x0000020b

08002b8c <crc8_calculate>:
 */

#include <stdint.h>

uint8_t crc8_calculate(uint8_t *psrc, uint8_t len)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	000a      	movs	r2, r1
 8002b96:	1cfb      	adds	r3, r7, #3
 8002b98:	701a      	strb	r2, [r3, #0]
  uint8_t crc8_val = 0;
 8002b9a:	230f      	movs	r3, #15
 8002b9c:	18fb      	adds	r3, r7, r3
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	701a      	strb	r2, [r3, #0]
  uint32_t  id;

  for(id = 0; id < len; id++)
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	e00c      	b.n	8002bc2 <crc8_calculate+0x36>
  {
	  crc8_val += psrc[id];
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	18d3      	adds	r3, r2, r3
 8002bae:	7819      	ldrb	r1, [r3, #0]
 8002bb0:	220f      	movs	r2, #15
 8002bb2:	18bb      	adds	r3, r7, r2
 8002bb4:	18ba      	adds	r2, r7, r2
 8002bb6:	7812      	ldrb	r2, [r2, #0]
 8002bb8:	188a      	adds	r2, r1, r2
 8002bba:	701a      	strb	r2, [r3, #0]
  for(id = 0; id < len; id++)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	1cfb      	adds	r3, r7, #3
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d3ed      	bcc.n	8002ba8 <crc8_calculate+0x1c>
  }

  return crc8_val;
 8002bcc:	230f      	movs	r3, #15
 8002bce:	18fb      	adds	r3, r7, r3
 8002bd0:	781b      	ldrb	r3, [r3, #0]
}
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	b004      	add	sp, #16
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <NVIC_EnableIRQ>:
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	0002      	movs	r2, r0
 8002be4:	1dfb      	adds	r3, r7, #7
 8002be6:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002be8:	1dfb      	adds	r3, r7, #7
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	001a      	movs	r2, r3
 8002bee:	231f      	movs	r3, #31
 8002bf0:	401a      	ands	r2, r3
 8002bf2:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <NVIC_EnableIRQ+0x28>)
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	4091      	lsls	r1, r2
 8002bf8:	000a      	movs	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]
}
 8002bfc:	46c0      	nop			; (mov r8, r8)
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b002      	add	sp, #8
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	e000e100 	.word	0xe000e100

08002c08 <LL_GPIO_IsInputPinSet>:
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	425a      	negs	r2, r3
 8002c20:	4153      	adcs	r3, r2
 8002c22:	b2db      	uxtb	r3, r3
}
 8002c24:	0018      	movs	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b002      	add	sp, #8
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <LL_GPIO_SetOutputPin>:
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	619a      	str	r2, [r3, #24]
}
 8002c3c:	46c0      	nop			; (mov r8, r8)
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b002      	add	sp, #8
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c54:	46c0      	nop			; (mov r8, r8)
 8002c56:	46bd      	mov	sp, r7
 8002c58:	b002      	add	sp, #8
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8002c64:	4b07      	ldr	r3, [pc, #28]	; (8002c84 <LL_AHB1_GRP1_EnableClock+0x28>)
 8002c66:	6959      	ldr	r1, [r3, #20]
 8002c68:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <LL_AHB1_GRP1_EnableClock+0x28>)
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002c70:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <LL_AHB1_GRP1_EnableClock+0x28>)
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	4013      	ands	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
}
 8002c7c:	46c0      	nop			; (mov r8, r8)
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b004      	add	sp, #16
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40021000 	.word	0x40021000

08002c88 <Get_Switch_Key_Val>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t Get_Switch_Key_Val(GPIO_TypeDef *GPIOx, uint32_t key)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
	return (LL_GPIO_IsInputPinSet(GPIOx, key) == TRUE) ? POWKEY_DEACTIVE :POWKEY_ACTIVE;
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	0011      	movs	r1, r2
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f7ff ffb5 	bl	8002c08 <LL_GPIO_IsInputPinSet>
 8002c9e:	0003      	movs	r3, r0
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	425a      	negs	r2, r3
 8002ca4:	4153      	adcs	r3, r2
 8002ca6:	b2db      	uxtb	r3, r3
}
 8002ca8:	0018      	movs	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b002      	add	sp, #8
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <Get_CurrentPowState>:

uint8_t Get_CurrentPowState(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
	return current_powerState;
 8002cb4:	4b02      	ldr	r3, [pc, #8]	; (8002cc0 <Get_CurrentPowState+0x10>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
}
 8002cb8:	0018      	movs	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	20000025 	.word	0x20000025

08002cc4 <Set_CurrentPowState>:

void Set_CurrentPowState(uint32_t state)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
	 current_powerState = state;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	4b02      	ldr	r3, [pc, #8]	; (8002cdc <Set_CurrentPowState+0x18>)
 8002cd2:	701a      	strb	r2, [r3, #0]
}
 8002cd4:	46c0      	nop			; (mov r8, r8)
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	b002      	add	sp, #8
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	20000025 	.word	0x20000025

08002ce0 <scan_key>:
//		HAL_ADC_Start_IT(&hadc);
//	}
//}

void scan_key(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
	static uint8_t debounce_time = 1; //10ms

	  if((flag_key & KEY_FIRST_ON) == FALSE)
 8002ce4:	4b86      	ldr	r3, [pc, #536]	; (8002f00 <scan_key+0x220>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	001a      	movs	r2, r3
 8002cea:	2301      	movs	r3, #1
 8002cec:	4013      	ands	r3, r2
 8002cee:	d116      	bne.n	8002d1e <scan_key+0x3e>
	  {
		  if(POWKEY_ACTIVE == Get_Switch_Key_Val(switch_input_GPIO_Port, switch_input_Pin))
 8002cf0:	2390      	movs	r3, #144	; 0x90
 8002cf2:	05db      	lsls	r3, r3, #23
 8002cf4:	2110      	movs	r1, #16
 8002cf6:	0018      	movs	r0, r3
 8002cf8:	f7ff ffc6 	bl	8002c88 <Get_Switch_Key_Val>
 8002cfc:	1e03      	subs	r3, r0, #0
 8002cfe:	d152      	bne.n	8002da6 <scan_key+0xc6>
		  {
			  flag_key |= KEY_FIRST_ON;
 8002d00:	4b7f      	ldr	r3, [pc, #508]	; (8002f00 <scan_key+0x220>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2201      	movs	r2, #1
 8002d06:	4313      	orrs	r3, r2
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	4b7d      	ldr	r3, [pc, #500]	; (8002f00 <scan_key+0x220>)
 8002d0c:	701a      	strb	r2, [r3, #0]
			  flag_key |= KEY_DEBOUNCE_START;
 8002d0e:	4b7c      	ldr	r3, [pc, #496]	; (8002f00 <scan_key+0x220>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2202      	movs	r2, #2
 8002d14:	4313      	orrs	r3, r2
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	4b79      	ldr	r3, [pc, #484]	; (8002f00 <scan_key+0x220>)
 8002d1a:	701a      	strb	r2, [r3, #0]
 8002d1c:	e043      	b.n	8002da6 <scan_key+0xc6>
		  }
	  }
	  else if(flag_key & KEY_DEBOUNCE_START)
 8002d1e:	4b78      	ldr	r3, [pc, #480]	; (8002f00 <scan_key+0x220>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	001a      	movs	r2, r3
 8002d24:	2302      	movs	r3, #2
 8002d26:	4013      	ands	r3, r2
 8002d28:	d01b      	beq.n	8002d62 <scan_key+0x82>
	  {
		  debounce_time--;
 8002d2a:	4b76      	ldr	r3, [pc, #472]	; (8002f04 <scan_key+0x224>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	4b74      	ldr	r3, [pc, #464]	; (8002f04 <scan_key+0x224>)
 8002d34:	701a      	strb	r2, [r3, #0]
		  if(debounce_time == 0)
 8002d36:	4b73      	ldr	r3, [pc, #460]	; (8002f04 <scan_key+0x224>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d133      	bne.n	8002da6 <scan_key+0xc6>
		  {
			  debounce_time = 1;
 8002d3e:	4b71      	ldr	r3, [pc, #452]	; (8002f04 <scan_key+0x224>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	701a      	strb	r2, [r3, #0]
			  flag_key &= ~KEY_DEBOUNCE_START;
 8002d44:	4b6e      	ldr	r3, [pc, #440]	; (8002f00 <scan_key+0x220>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	4393      	bics	r3, r2
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	4b6c      	ldr	r3, [pc, #432]	; (8002f00 <scan_key+0x220>)
 8002d50:	701a      	strb	r2, [r3, #0]
			  flag_key |= KEY_DEBOUNCE_END;
 8002d52:	4b6b      	ldr	r3, [pc, #428]	; (8002f00 <scan_key+0x220>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2204      	movs	r2, #4
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	4b68      	ldr	r3, [pc, #416]	; (8002f00 <scan_key+0x220>)
 8002d5e:	701a      	strb	r2, [r3, #0]
 8002d60:	e021      	b.n	8002da6 <scan_key+0xc6>
		  }
	  }
	  else if(flag_key & KEY_DEBOUNCE_END)
 8002d62:	4b67      	ldr	r3, [pc, #412]	; (8002f00 <scan_key+0x220>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	001a      	movs	r2, r3
 8002d68:	2304      	movs	r3, #4
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d01b      	beq.n	8002da6 <scan_key+0xc6>
	  {

		  if(POWKEY_ACTIVE == Get_Switch_Key_Val(switch_input_GPIO_Port, switch_input_Pin))
 8002d6e:	2390      	movs	r3, #144	; 0x90
 8002d70:	05db      	lsls	r3, r3, #23
 8002d72:	2110      	movs	r1, #16
 8002d74:	0018      	movs	r0, r3
 8002d76:	f7ff ff87 	bl	8002c88 <Get_Switch_Key_Val>
 8002d7a:	1e03      	subs	r3, r0, #0
 8002d7c:	d105      	bne.n	8002d8a <scan_key+0xaa>
		  {
			  u32KeyTimerCnt++;
 8002d7e:	4b62      	ldr	r3, [pc, #392]	; (8002f08 <scan_key+0x228>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	1c5a      	adds	r2, r3, #1
 8002d84:	4b60      	ldr	r3, [pc, #384]	; (8002f08 <scan_key+0x228>)
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	e00d      	b.n	8002da6 <scan_key+0xc6>
		  }
		  else
		  {
			  flag_key &= ~KEY_DEBOUNCE_END;
 8002d8a:	4b5d      	ldr	r3, [pc, #372]	; (8002f00 <scan_key+0x220>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2204      	movs	r2, #4
 8002d90:	4393      	bics	r3, r2
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	4b5a      	ldr	r3, [pc, #360]	; (8002f00 <scan_key+0x220>)
 8002d96:	701a      	strb	r2, [r3, #0]
			  flag_key |= KEY_RELEASED;
 8002d98:	4b59      	ldr	r3, [pc, #356]	; (8002f00 <scan_key+0x220>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2208      	movs	r2, #8
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	4b57      	ldr	r3, [pc, #348]	; (8002f00 <scan_key+0x220>)
 8002da4:	701a      	strb	r2, [r3, #0]
	  else
	  {

	  }

	if((flag_key & KEY_RELEASED) != 0)
 8002da6:	4b56      	ldr	r3, [pc, #344]	; (8002f00 <scan_key+0x220>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	001a      	movs	r2, r3
 8002dac:	2308      	movs	r3, #8
 8002dae:	4013      	ands	r3, r2
 8002db0:	d100      	bne.n	8002db4 <scan_key+0xd4>
 8002db2:	e082      	b.n	8002eba <scan_key+0x1da>
	{
		  if(0 < u32KeyTimerCnt && u32KeyTimerCnt <= SHORT_PRESS_DURATION
 8002db4:	4b54      	ldr	r3, [pc, #336]	; (8002f08 <scan_key+0x228>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d02c      	beq.n	8002e16 <scan_key+0x136>
 8002dbc:	4b52      	ldr	r3, [pc, #328]	; (8002f08 <scan_key+0x228>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b64      	cmp	r3, #100	; 0x64
 8002dc2:	d828      	bhi.n	8002e16 <scan_key+0x136>
				  && ON == current_powerState)
 8002dc4:	4b51      	ldr	r3, [pc, #324]	; (8002f0c <scan_key+0x22c>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d124      	bne.n	8002e16 <scan_key+0x136>
		  {
			  flag_key = 0;
 8002dcc:	4b4c      	ldr	r3, [pc, #304]	; (8002f00 <scan_key+0x220>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	701a      	strb	r2, [r3, #0]
			  u32KeyTimerCnt = 0;
 8002dd2:	4b4d      	ldr	r3, [pc, #308]	; (8002f08 <scan_key+0x228>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
			  Uart_TxData[2] = 1; //key msg
 8002dd8:	4b4d      	ldr	r3, [pc, #308]	; (8002f10 <scan_key+0x230>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	709a      	strb	r2, [r3, #2]
        Uart_TxData[3] = 0; // data_msb
 8002dde:	4b4c      	ldr	r3, [pc, #304]	; (8002f10 <scan_key+0x230>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	70da      	strb	r2, [r3, #3]
			  Uart_TxData[4] = SHORT_PRESS; // data_lsb
 8002de4:	4b4a      	ldr	r3, [pc, #296]	; (8002f10 <scan_key+0x230>)
 8002de6:	2201      	movs	r2, #1
 8002de8:	711a      	strb	r2, [r3, #4]
			  Uart_TxData[5] = crc8_calculate(Uart_TxData, UART_MSG_LENGTH - 1);
 8002dea:	4b49      	ldr	r3, [pc, #292]	; (8002f10 <scan_key+0x230>)
 8002dec:	2105      	movs	r1, #5
 8002dee:	0018      	movs	r0, r3
 8002df0:	f7ff fecc 	bl	8002b8c <crc8_calculate>
 8002df4:	0003      	movs	r3, r0
 8002df6:	001a      	movs	r2, r3
 8002df8:	4b45      	ldr	r3, [pc, #276]	; (8002f10 <scan_key+0x230>)
 8002dfa:	715a      	strb	r2, [r3, #5]
			  HAL_UART_Transmit_IT(&huart1, Uart_TxData, UART_MSG_LENGTH);
 8002dfc:	4944      	ldr	r1, [pc, #272]	; (8002f10 <scan_key+0x230>)
 8002dfe:	4b45      	ldr	r3, [pc, #276]	; (8002f14 <scan_key+0x234>)
 8002e00:	2206      	movs	r2, #6
 8002e02:	0018      	movs	r0, r3
 8002e04:	f7fe ff54 	bl	8001cb0 <HAL_UART_Transmit_IT>
			  HAL_UART_Receive_IT(&huart1, Uart_RxData, UART_MSG_LENGTH);
 8002e08:	4943      	ldr	r1, [pc, #268]	; (8002f18 <scan_key+0x238>)
 8002e0a:	4b42      	ldr	r3, [pc, #264]	; (8002f14 <scan_key+0x234>)
 8002e0c:	2206      	movs	r2, #6
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f7fe ffa6 	bl	8001d60 <HAL_UART_Receive_IT>
 8002e14:	e051      	b.n	8002eba <scan_key+0x1da>
		  }
		  else if(SHORT_PRESS_DURATION < u32KeyTimerCnt && u32KeyTimerCnt <= MIDDLE_PRESS_DURATION)
 8002e16:	4b3c      	ldr	r3, [pc, #240]	; (8002f08 <scan_key+0x228>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	2b64      	cmp	r3, #100	; 0x64
 8002e1c:	d947      	bls.n	8002eae <scan_key+0x1ce>
 8002e1e:	4b3a      	ldr	r3, [pc, #232]	; (8002f08 <scan_key+0x228>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	23c8      	movs	r3, #200	; 0xc8
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d841      	bhi.n	8002eae <scan_key+0x1ce>
		  {
			  u32KeyTimerCnt = 0;
 8002e2a:	4b37      	ldr	r3, [pc, #220]	; (8002f08 <scan_key+0x228>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
			  flag_key = 0;
 8002e30:	4b33      	ldr	r3, [pc, #204]	; (8002f00 <scan_key+0x220>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	701a      	strb	r2, [r3, #0]
	//			  if(/*LL_GPIO_IsOutputPinSet(BOOST_EN_GPIO_Port,BOOST_EN_Pin) &&*/
	//				 LL_GPIO_IsOutputPinSet(CHARGE_EN_GPIO_Port,CHARGE_EN_Pin) &&
	//				 LL_GPIO_IsOutputPinSet(IN2SYS_EN_GPIO_Port,IN2SYS_EN_Pin))
			  if(ON == current_powerState)
 8002e36:	4b35      	ldr	r3, [pc, #212]	; (8002f0c <scan_key+0x22c>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d121      	bne.n	8002e82 <scan_key+0x1a2>
			  {
				  Uart_TxData[2] = 1; //key msg
 8002e3e:	4b34      	ldr	r3, [pc, #208]	; (8002f10 <scan_key+0x230>)
 8002e40:	2201      	movs	r2, #1
 8002e42:	709a      	strb	r2, [r3, #2]
				  Uart_TxData[3] = 0; // data_msb
 8002e44:	4b32      	ldr	r3, [pc, #200]	; (8002f10 <scan_key+0x230>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	70da      	strb	r2, [r3, #3]
				  Uart_TxData[4] = MIDDLE_PRESS; // data_lsb
 8002e4a:	4b31      	ldr	r3, [pc, #196]	; (8002f10 <scan_key+0x230>)
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	711a      	strb	r2, [r3, #4]
				  Uart_TxData[5] = crc8_calculate(Uart_TxData, UART_MSG_LENGTH - 1);
 8002e50:	4b2f      	ldr	r3, [pc, #188]	; (8002f10 <scan_key+0x230>)
 8002e52:	2105      	movs	r1, #5
 8002e54:	0018      	movs	r0, r3
 8002e56:	f7ff fe99 	bl	8002b8c <crc8_calculate>
 8002e5a:	0003      	movs	r3, r0
 8002e5c:	001a      	movs	r2, r3
 8002e5e:	4b2c      	ldr	r3, [pc, #176]	; (8002f10 <scan_key+0x230>)
 8002e60:	715a      	strb	r2, [r3, #5]
				  HAL_UART_Transmit_IT(&huart1, Uart_TxData, UART_MSG_LENGTH);
 8002e62:	492b      	ldr	r1, [pc, #172]	; (8002f10 <scan_key+0x230>)
 8002e64:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <scan_key+0x234>)
 8002e66:	2206      	movs	r2, #6
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f7fe ff21 	bl	8001cb0 <HAL_UART_Transmit_IT>
				  HAL_UART_Receive_IT(&huart1, Uart_RxData, UART_MSG_LENGTH);
 8002e6e:	492a      	ldr	r1, [pc, #168]	; (8002f18 <scan_key+0x238>)
 8002e70:	4b28      	ldr	r3, [pc, #160]	; (8002f14 <scan_key+0x234>)
 8002e72:	2206      	movs	r2, #6
 8002e74:	0018      	movs	r0, r3
 8002e76:	f7fe ff73 	bl	8001d60 <HAL_UART_Receive_IT>
				  Set_CurrentPowState(WAITING_OFF);
 8002e7a:	2001      	movs	r0, #1
 8002e7c:	f7ff ff22 	bl	8002cc4 <Set_CurrentPowState>
			  if(ON == current_powerState)
 8002e80:	e01b      	b.n	8002eba <scan_key+0x1da>
			  }
			  else
			  {
				  /**/
				  LL_GPIO_SetOutputPin(BOOST_EN_GPIO_Port, BOOST_EN_Pin);
 8002e82:	2390      	movs	r3, #144	; 0x90
 8002e84:	05db      	lsls	r3, r3, #23
 8002e86:	2120      	movs	r1, #32
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f7ff fecf 	bl	8002c2c <LL_GPIO_SetOutputPin>

				  /**/
				  LL_GPIO_SetOutputPin(CHARGE_EN_GPIO_Port, CHARGE_EN_Pin);
 8002e8e:	2390      	movs	r3, #144	; 0x90
 8002e90:	05db      	lsls	r3, r3, #23
 8002e92:	2140      	movs	r1, #64	; 0x40
 8002e94:	0018      	movs	r0, r3
 8002e96:	f7ff fec9 	bl	8002c2c <LL_GPIO_SetOutputPin>

				  /**/
				  LL_GPIO_SetOutputPin(IN2SYS_EN_GPIO_Port, IN2SYS_EN_Pin);
 8002e9a:	2390      	movs	r3, #144	; 0x90
 8002e9c:	05db      	lsls	r3, r3, #23
 8002e9e:	2180      	movs	r1, #128	; 0x80
 8002ea0:	0018      	movs	r0, r3
 8002ea2:	f7ff fec3 	bl	8002c2c <LL_GPIO_SetOutputPin>

				  Set_CurrentPowState(ON);
 8002ea6:	2003      	movs	r0, #3
 8002ea8:	f7ff ff0c 	bl	8002cc4 <Set_CurrentPowState>
			  if(ON == current_powerState)
 8002eac:	e005      	b.n	8002eba <scan_key+0x1da>
			  }
		  }
		  else
		  {
			  u32KeyTimerCnt = 0;
 8002eae:	4b16      	ldr	r3, [pc, #88]	; (8002f08 <scan_key+0x228>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
			  flag_key = 0;
 8002eb4:	4b12      	ldr	r3, [pc, #72]	; (8002f00 <scan_key+0x220>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	701a      	strb	r2, [r3, #0]
		  }
	 }
	  if(u32KeyTimerCnt >= LONG_PRESS_DURATION)
 8002eba:	4b13      	ldr	r3, [pc, #76]	; (8002f08 <scan_key+0x228>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a17      	ldr	r2, [pc, #92]	; (8002f1c <scan_key+0x23c>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d91a      	bls.n	8002efa <scan_key+0x21a>
	  {
		  /**/
		  LL_GPIO_ResetOutputPin(BOOST_EN_GPIO_Port, BOOST_EN_Pin);
 8002ec4:	2390      	movs	r3, #144	; 0x90
 8002ec6:	05db      	lsls	r3, r3, #23
 8002ec8:	2120      	movs	r1, #32
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f7ff feba 	bl	8002c44 <LL_GPIO_ResetOutputPin>

		  /**/
		  LL_GPIO_ResetOutputPin(CHARGE_EN_GPIO_Port, CHARGE_EN_Pin);
 8002ed0:	2390      	movs	r3, #144	; 0x90
 8002ed2:	05db      	lsls	r3, r3, #23
 8002ed4:	2140      	movs	r1, #64	; 0x40
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f7ff feb4 	bl	8002c44 <LL_GPIO_ResetOutputPin>

		  /**/
		  LL_GPIO_ResetOutputPin(IN2SYS_EN_GPIO_Port, IN2SYS_EN_Pin);
 8002edc:	2390      	movs	r3, #144	; 0x90
 8002ede:	05db      	lsls	r3, r3, #23
 8002ee0:	2180      	movs	r1, #128	; 0x80
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f7ff feae 	bl	8002c44 <LL_GPIO_ResetOutputPin>

		  Set_CurrentPowState(OFF);
 8002ee8:	2000      	movs	r0, #0
 8002eea:	f7ff feeb 	bl	8002cc4 <Set_CurrentPowState>

		  u32KeyTimerCnt = 0;
 8002eee:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <scan_key+0x228>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
		  flag_key = 0;
 8002ef4:	4b02      	ldr	r3, [pc, #8]	; (8002f00 <scan_key+0x220>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	701a      	strb	r2, [r3, #0]

	  }
}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	20000024 	.word	0x20000024
 8002f04:	20000000 	.word	0x20000000
 8002f08:	20000068 	.word	0x20000068
 8002f0c:	20000025 	.word	0x20000025
 8002f10:	20000028 	.word	0x20000028
 8002f14:	2000006c 	.word	0x2000006c
 8002f18:	20000030 	.word	0x20000030
 8002f1c:	00000257 	.word	0x00000257

08002f20 <time_10ms_proc>:

void time_10ms_proc(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
	scan_key();
 8002f24:	f7ff fedc 	bl	8002ce0 <scan_key>
	  /*After pi excute power off sequence, it sends out ready off state to mcu,which will set
	   *  current_powerState to READY_OFF*/
	  if(current_powerState == READY_OFF)
 8002f28:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <time_10ms_proc+0x40>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d114      	bne.n	8002f5a <time_10ms_proc+0x3a>
	  {
		  /**/
		  LL_GPIO_ResetOutputPin(BOOST_EN_GPIO_Port, BOOST_EN_Pin);
 8002f30:	2390      	movs	r3, #144	; 0x90
 8002f32:	05db      	lsls	r3, r3, #23
 8002f34:	2120      	movs	r1, #32
 8002f36:	0018      	movs	r0, r3
 8002f38:	f7ff fe84 	bl	8002c44 <LL_GPIO_ResetOutputPin>

		  /**/
		  LL_GPIO_ResetOutputPin(CHARGE_EN_GPIO_Port, CHARGE_EN_Pin);
 8002f3c:	2390      	movs	r3, #144	; 0x90
 8002f3e:	05db      	lsls	r3, r3, #23
 8002f40:	2140      	movs	r1, #64	; 0x40
 8002f42:	0018      	movs	r0, r3
 8002f44:	f7ff fe7e 	bl	8002c44 <LL_GPIO_ResetOutputPin>

		  /**/
		  LL_GPIO_ResetOutputPin(IN2SYS_EN_GPIO_Port, IN2SYS_EN_Pin);
 8002f48:	2390      	movs	r3, #144	; 0x90
 8002f4a:	05db      	lsls	r3, r3, #23
 8002f4c:	2180      	movs	r1, #128	; 0x80
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f7ff fe78 	bl	8002c44 <LL_GPIO_ResetOutputPin>

		  Set_CurrentPowState(OFF);
 8002f54:	2000      	movs	r0, #0
 8002f56:	f7ff feb5 	bl	8002cc4 <Set_CurrentPowState>
	  }
}
 8002f5a:	46c0      	nop			; (mov r8, r8)
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20000025 	.word	0x20000025

08002f64 <time_1000ms_proc>:

void time_1000ms_proc(void)
{
 8002f64:	b590      	push	{r4, r7, lr}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
	  //BatteryVol_Check_And_Send();
	uint8_t current_pow_sts;

	current_pow_sts = Get_CurrentPowState();
 8002f6a:	1dfc      	adds	r4, r7, #7
 8002f6c:	f7ff fea0 	bl	8002cb0 <Get_CurrentPowState>
 8002f70:	0003      	movs	r3, r0
 8002f72:	7023      	strb	r3, [r4, #0]
	ADC_Check_And_Send(current_pow_sts);
 8002f74:	1dfb      	adds	r3, r7, #7
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	0018      	movs	r0, r3
 8002f7a:	f7ff fd1b 	bl	80029b4 <ADC_Check_And_Send>
}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	46bd      	mov	sp, r7
 8002f82:	b003      	add	sp, #12
 8002f84:	bd90      	pop	{r4, r7, pc}
	...

08002f88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	Uart_TxData[0] = 0x5a;
 8002f8c:	4b17      	ldr	r3, [pc, #92]	; (8002fec <main+0x64>)
 8002f8e:	225a      	movs	r2, #90	; 0x5a
 8002f90:	701a      	strb	r2, [r3, #0]
	Uart_TxData[1] = 0xa5;  //ipc header
 8002f92:	4b16      	ldr	r3, [pc, #88]	; (8002fec <main+0x64>)
 8002f94:	22a5      	movs	r2, #165	; 0xa5
 8002f96:	705a      	strb	r2, [r3, #1]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f98:	f7fd f942 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f9c:	f000 f828 	bl	8002ff0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  NVIC_EnableIRQ(SysTick_IRQn);
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	425b      	negs	r3, r3
 8002fa4:	0018      	movs	r0, r3
 8002fa6:	f7ff fe19 	bl	8002bdc <NVIC_EnableIRQ>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002faa:	f000 f947 	bl	800323c <MX_GPIO_Init>
  MX_ADC_Init();
 8002fae:	f000 f885 	bl	80030bc <MX_ADC_Init>
  MX_USART1_UART_Init();
 8002fb2:	f000 f90d 	bl	80031d0 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8002fb6:	f000 f8e7 	bl	8003188 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  /**/
  LL_GPIO_ResetOutputPin(BOOST_EN_GPIO_Port, BOOST_EN_Pin);
 8002fba:	2390      	movs	r3, #144	; 0x90
 8002fbc:	05db      	lsls	r3, r3, #23
 8002fbe:	2120      	movs	r1, #32
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f7ff fe3f 	bl	8002c44 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CHARGE_EN_GPIO_Port, CHARGE_EN_Pin);
 8002fc6:	2390      	movs	r3, #144	; 0x90
 8002fc8:	05db      	lsls	r3, r3, #23
 8002fca:	2140      	movs	r1, #64	; 0x40
 8002fcc:	0018      	movs	r0, r3
 8002fce:	f7ff fe39 	bl	8002c44 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(IN2SYS_EN_GPIO_Port, IN2SYS_EN_Pin);
 8002fd2:	2390      	movs	r3, #144	; 0x90
 8002fd4:	05db      	lsls	r3, r3, #23
 8002fd6:	2180      	movs	r1, #128	; 0x80
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f7ff fe33 	bl	8002c44 <LL_GPIO_ResetOutputPin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  time_proc();
 8002fde:	f000 fb65 	bl	80036ac <time_proc>

	  LL_mDelay(1);
 8002fe2:	2001      	movs	r0, #1
 8002fe4:	f7ff fcb8 	bl	8002958 <LL_mDelay>
	  time_proc();
 8002fe8:	e7f9      	b.n	8002fde <main+0x56>
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	20000028 	.word	0x20000028

08002ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	b095      	sub	sp, #84	; 0x54
 8002ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ff6:	2420      	movs	r4, #32
 8002ff8:	193b      	adds	r3, r7, r4
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	2330      	movs	r3, #48	; 0x30
 8002ffe:	001a      	movs	r2, r3
 8003000:	2100      	movs	r1, #0
 8003002:	f000 fc33 	bl	800386c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003006:	2310      	movs	r3, #16
 8003008:	18fb      	adds	r3, r7, r3
 800300a:	0018      	movs	r0, r3
 800300c:	2310      	movs	r3, #16
 800300e:	001a      	movs	r2, r3
 8003010:	2100      	movs	r1, #0
 8003012:	f000 fc2b 	bl	800386c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003016:	003b      	movs	r3, r7
 8003018:	0018      	movs	r0, r3
 800301a:	2310      	movs	r3, #16
 800301c:	001a      	movs	r2, r3
 800301e:	2100      	movs	r1, #0
 8003020:	f000 fc24 	bl	800386c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 8003024:	0021      	movs	r1, r4
 8003026:	187b      	adds	r3, r7, r1
 8003028:	2211      	movs	r2, #17
 800302a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800302c:	187b      	adds	r3, r7, r1
 800302e:	2201      	movs	r2, #1
 8003030:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8003032:	187b      	adds	r3, r7, r1
 8003034:	2201      	movs	r2, #1
 8003036:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8003038:	187b      	adds	r3, r7, r1
 800303a:	2210      	movs	r2, #16
 800303c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800303e:	187b      	adds	r3, r7, r1
 8003040:	2202      	movs	r2, #2
 8003042:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003044:	187b      	adds	r3, r7, r1
 8003046:	2280      	movs	r2, #128	; 0x80
 8003048:	0252      	lsls	r2, r2, #9
 800304a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800304c:	187b      	adds	r3, r7, r1
 800304e:	22e0      	movs	r2, #224	; 0xe0
 8003050:	0352      	lsls	r2, r2, #13
 8003052:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV5;
 8003054:	187b      	adds	r3, r7, r1
 8003056:	2204      	movs	r2, #4
 8003058:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800305a:	187b      	adds	r3, r7, r1
 800305c:	0018      	movs	r0, r3
 800305e:	f7fe f89f 	bl	80011a0 <HAL_RCC_OscConfig>
 8003062:	1e03      	subs	r3, r0, #0
 8003064:	d001      	beq.n	800306a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8003066:	f000 f9be 	bl	80033e6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800306a:	2110      	movs	r1, #16
 800306c:	187b      	adds	r3, r7, r1
 800306e:	2207      	movs	r2, #7
 8003070:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003072:	187b      	adds	r3, r7, r1
 8003074:	2202      	movs	r2, #2
 8003076:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003078:	187b      	adds	r3, r7, r1
 800307a:	2200      	movs	r2, #0
 800307c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800307e:	187b      	adds	r3, r7, r1
 8003080:	2200      	movs	r2, #0
 8003082:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003084:	187b      	adds	r3, r7, r1
 8003086:	2101      	movs	r1, #1
 8003088:	0018      	movs	r0, r3
 800308a:	f7fe fb7d 	bl	8001788 <HAL_RCC_ClockConfig>
 800308e:	1e03      	subs	r3, r0, #0
 8003090:	d001      	beq.n	8003096 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003092:	f000 f9a8 	bl	80033e6 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003096:	003b      	movs	r3, r7
 8003098:	2201      	movs	r2, #1
 800309a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800309c:	003b      	movs	r3, r7
 800309e:	2200      	movs	r2, #0
 80030a0:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030a2:	003b      	movs	r3, r7
 80030a4:	0018      	movs	r0, r3
 80030a6:	f7fe fcdd 	bl	8001a64 <HAL_RCCEx_PeriphCLKConfig>
 80030aa:	1e03      	subs	r3, r0, #0
 80030ac:	d001      	beq.n	80030b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80030ae:	f000 f99a 	bl	80033e6 <Error_Handler>
  }
}
 80030b2:	46c0      	nop			; (mov r8, r8)
 80030b4:	46bd      	mov	sp, r7
 80030b6:	b015      	add	sp, #84	; 0x54
 80030b8:	bd90      	pop	{r4, r7, pc}
	...

080030bc <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80030c2:	1d3b      	adds	r3, r7, #4
 80030c4:	0018      	movs	r0, r3
 80030c6:	230c      	movs	r3, #12
 80030c8:	001a      	movs	r2, r3
 80030ca:	2100      	movs	r1, #0
 80030cc:	f000 fbce 	bl	800386c <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 80030d0:	4b2b      	ldr	r3, [pc, #172]	; (8003180 <MX_ADC_Init+0xc4>)
 80030d2:	4a2c      	ldr	r2, [pc, #176]	; (8003184 <MX_ADC_Init+0xc8>)
 80030d4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80030d6:	4b2a      	ldr	r3, [pc, #168]	; (8003180 <MX_ADC_Init+0xc4>)
 80030d8:	2200      	movs	r2, #0
 80030da:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80030dc:	4b28      	ldr	r3, [pc, #160]	; (8003180 <MX_ADC_Init+0xc4>)
 80030de:	2200      	movs	r2, #0
 80030e0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80030e2:	4b27      	ldr	r3, [pc, #156]	; (8003180 <MX_ADC_Init+0xc4>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80030e8:	4b25      	ldr	r3, [pc, #148]	; (8003180 <MX_ADC_Init+0xc4>)
 80030ea:	2201      	movs	r2, #1
 80030ec:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80030ee:	4b24      	ldr	r3, [pc, #144]	; (8003180 <MX_ADC_Init+0xc4>)
 80030f0:	2204      	movs	r2, #4
 80030f2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ENABLE;
 80030f4:	4b22      	ldr	r3, [pc, #136]	; (8003180 <MX_ADC_Init+0xc4>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ENABLE;
 80030fa:	4b21      	ldr	r3, [pc, #132]	; (8003180 <MX_ADC_Init+0xc4>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	61da      	str	r2, [r3, #28]
  hadc.Init.ContinuousConvMode = ENABLE;
 8003100:	4b1f      	ldr	r3, [pc, #124]	; (8003180 <MX_ADC_Init+0xc4>)
 8003102:	2201      	movs	r2, #1
 8003104:	621a      	str	r2, [r3, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003106:	4b1e      	ldr	r3, [pc, #120]	; (8003180 <MX_ADC_Init+0xc4>)
 8003108:	2200      	movs	r2, #0
 800310a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800310c:	4b1c      	ldr	r3, [pc, #112]	; (8003180 <MX_ADC_Init+0xc4>)
 800310e:	22c2      	movs	r2, #194	; 0xc2
 8003110:	32ff      	adds	r2, #255	; 0xff
 8003112:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003114:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <MX_ADC_Init+0xc4>)
 8003116:	2200      	movs	r2, #0
 8003118:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 800311a:	4b19      	ldr	r3, [pc, #100]	; (8003180 <MX_ADC_Init+0xc4>)
 800311c:	2200      	movs	r2, #0
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003120:	4b17      	ldr	r3, [pc, #92]	; (8003180 <MX_ADC_Init+0xc4>)
 8003122:	2200      	movs	r2, #0
 8003124:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003126:	4b16      	ldr	r3, [pc, #88]	; (8003180 <MX_ADC_Init+0xc4>)
 8003128:	0018      	movs	r0, r3
 800312a:	f7fd f8bf 	bl	80002ac <HAL_ADC_Init>
 800312e:	1e03      	subs	r3, r0, #0
 8003130:	d001      	beq.n	8003136 <MX_ADC_Init+0x7a>
  {
    Error_Handler();
 8003132:	f000 f958 	bl	80033e6 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003136:	1d3b      	adds	r3, r7, #4
 8003138:	2202      	movs	r2, #2
 800313a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800313c:	1d3b      	adds	r3, r7, #4
 800313e:	2280      	movs	r2, #128	; 0x80
 8003140:	0152      	lsls	r2, r2, #5
 8003142:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003144:	1d3b      	adds	r3, r7, #4
 8003146:	2207      	movs	r2, #7
 8003148:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800314a:	1d3a      	adds	r2, r7, #4
 800314c:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <MX_ADC_Init+0xc4>)
 800314e:	0011      	movs	r1, r2
 8003150:	0018      	movs	r0, r3
 8003152:	f7fd fb19 	bl	8000788 <HAL_ADC_ConfigChannel>
 8003156:	1e03      	subs	r3, r0, #0
 8003158:	d001      	beq.n	800315e <MX_ADC_Init+0xa2>
  {
    Error_Handler();
 800315a:	f000 f944 	bl	80033e6 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800315e:	1d3b      	adds	r3, r7, #4
 8003160:	2209      	movs	r2, #9
 8003162:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003164:	1d3a      	adds	r2, r7, #4
 8003166:	4b06      	ldr	r3, [pc, #24]	; (8003180 <MX_ADC_Init+0xc4>)
 8003168:	0011      	movs	r1, r2
 800316a:	0018      	movs	r0, r3
 800316c:	f7fd fb0c 	bl	8000788 <HAL_ADC_ConfigChannel>
 8003170:	1e03      	subs	r3, r0, #0
 8003172:	d001      	beq.n	8003178 <MX_ADC_Init+0xbc>
  {
    Error_Handler();
 8003174:	f000 f937 	bl	80033e6 <Error_Handler>
  /* USER CODE BEGIN ADC_Init 2 */
  //LL_ADC_Enable(ADC1);
  //while(!LL_ADC_IsActiveFlag_ADRDY(ADC1)); //wait for ready
  /* USER CODE END ADC_Init 2 */

}
 8003178:	46c0      	nop			; (mov r8, r8)
 800317a:	46bd      	mov	sp, r7
 800317c:	b004      	add	sp, #16
 800317e:	bd80      	pop	{r7, pc}
 8003180:	200000dc 	.word	0x200000dc
 8003184:	40012400 	.word	0x40012400

08003188 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800318c:	4b0e      	ldr	r3, [pc, #56]	; (80031c8 <MX_CRC_Init+0x40>)
 800318e:	4a0f      	ldr	r2, [pc, #60]	; (80031cc <MX_CRC_Init+0x44>)
 8003190:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003192:	4b0d      	ldr	r3, [pc, #52]	; (80031c8 <MX_CRC_Init+0x40>)
 8003194:	2200      	movs	r2, #0
 8003196:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003198:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <MX_CRC_Init+0x40>)
 800319a:	2200      	movs	r2, #0
 800319c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800319e:	4b0a      	ldr	r3, [pc, #40]	; (80031c8 <MX_CRC_Init+0x40>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80031a4:	4b08      	ldr	r3, [pc, #32]	; (80031c8 <MX_CRC_Init+0x40>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80031aa:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <MX_CRC_Init+0x40>)
 80031ac:	2201      	movs	r2, #1
 80031ae:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <MX_CRC_Init+0x40>)
 80031b2:	0018      	movs	r0, r3
 80031b4:	f7fd fde2 	bl	8000d7c <HAL_CRC_Init>
 80031b8:	1e03      	subs	r3, r0, #0
 80031ba:	d001      	beq.n	80031c0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80031bc:	f000 f913 	bl	80033e6 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80031c0:	46c0      	nop			; (mov r8, r8)
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	20000044 	.word	0x20000044
 80031cc:	40023000 	.word	0x40023000

080031d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031d4:	4b17      	ldr	r3, [pc, #92]	; (8003234 <MX_USART1_UART_Init+0x64>)
 80031d6:	4a18      	ldr	r2, [pc, #96]	; (8003238 <MX_USART1_UART_Init+0x68>)
 80031d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80031da:	4b16      	ldr	r3, [pc, #88]	; (8003234 <MX_USART1_UART_Init+0x64>)
 80031dc:	22e1      	movs	r2, #225	; 0xe1
 80031de:	0252      	lsls	r2, r2, #9
 80031e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031e2:	4b14      	ldr	r3, [pc, #80]	; (8003234 <MX_USART1_UART_Init+0x64>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031e8:	4b12      	ldr	r3, [pc, #72]	; (8003234 <MX_USART1_UART_Init+0x64>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031ee:	4b11      	ldr	r3, [pc, #68]	; (8003234 <MX_USART1_UART_Init+0x64>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031f4:	4b0f      	ldr	r3, [pc, #60]	; (8003234 <MX_USART1_UART_Init+0x64>)
 80031f6:	220c      	movs	r2, #12
 80031f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031fa:	4b0e      	ldr	r3, [pc, #56]	; (8003234 <MX_USART1_UART_Init+0x64>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <MX_USART1_UART_Init+0x64>)
 8003202:	2280      	movs	r2, #128	; 0x80
 8003204:	0212      	lsls	r2, r2, #8
 8003206:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003208:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <MX_USART1_UART_Init+0x64>)
 800320a:	2200      	movs	r2, #0
 800320c:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800320e:	4b09      	ldr	r3, [pc, #36]	; (8003234 <MX_USART1_UART_Init+0x64>)
 8003210:	2220      	movs	r2, #32
 8003212:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8003214:	4b07      	ldr	r3, [pc, #28]	; (8003234 <MX_USART1_UART_Init+0x64>)
 8003216:	2280      	movs	r2, #128	; 0x80
 8003218:	0192      	lsls	r2, r2, #6
 800321a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800321c:	4b05      	ldr	r3, [pc, #20]	; (8003234 <MX_USART1_UART_Init+0x64>)
 800321e:	0018      	movs	r0, r3
 8003220:	f7fe fcee 	bl	8001c00 <HAL_UART_Init>
 8003224:	1e03      	subs	r3, r0, #0
 8003226:	d001      	beq.n	800322c <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8003228:	f000 f8dd 	bl	80033e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800322c:	46c0      	nop			; (mov r8, r8)
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	46c0      	nop			; (mov r8, r8)
 8003234:	2000006c 	.word	0x2000006c
 8003238:	40013800 	.word	0x40013800

0800323c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003242:	003b      	movs	r3, r7
 8003244:	0018      	movs	r0, r3
 8003246:	2318      	movs	r3, #24
 8003248:	001a      	movs	r2, r3
 800324a:	2100      	movs	r1, #0
 800324c:	f000 fb0e 	bl	800386c <memset>

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8003250:	2380      	movs	r3, #128	; 0x80
 8003252:	03db      	lsls	r3, r3, #15
 8003254:	0018      	movs	r0, r3
 8003256:	f7ff fd01 	bl	8002c5c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800325a:	2380      	movs	r3, #128	; 0x80
 800325c:	029b      	lsls	r3, r3, #10
 800325e:	0018      	movs	r0, r3
 8003260:	f7ff fcfc 	bl	8002c5c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8003264:	2380      	movs	r3, #128	; 0x80
 8003266:	02db      	lsls	r3, r3, #11
 8003268:	0018      	movs	r0, r3
 800326a:	f7ff fcf7 	bl	8002c5c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(MCU_REV1_GPIO_Port, MCU_REV1_Pin);
 800326e:	2390      	movs	r3, #144	; 0x90
 8003270:	05db      	lsls	r3, r3, #23
 8003272:	2101      	movs	r1, #1
 8003274:	0018      	movs	r0, r3
 8003276:	f7ff fce5 	bl	8002c44 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(MCU_REV2_GPIO_Port, MCU_REV2_Pin);
 800327a:	2390      	movs	r3, #144	; 0x90
 800327c:	05db      	lsls	r3, r3, #23
 800327e:	2102      	movs	r1, #2
 8003280:	0018      	movs	r0, r3
 8003282:	f7ff fcdf 	bl	8002c44 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(MCU_IND_GPIO_Port, MCU_IND_Pin);
 8003286:	2390      	movs	r3, #144	; 0x90
 8003288:	05db      	lsls	r3, r3, #23
 800328a:	2108      	movs	r1, #8
 800328c:	0018      	movs	r0, r3
 800328e:	f7ff fcd9 	bl	8002c44 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(BOOST_EN_GPIO_Port, BOOST_EN_Pin);
 8003292:	2390      	movs	r3, #144	; 0x90
 8003294:	05db      	lsls	r3, r3, #23
 8003296:	2120      	movs	r1, #32
 8003298:	0018      	movs	r0, r3
 800329a:	f7ff fcd3 	bl	8002c44 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CHARGE_EN_GPIO_Port, CHARGE_EN_Pin);
 800329e:	2390      	movs	r3, #144	; 0x90
 80032a0:	05db      	lsls	r3, r3, #23
 80032a2:	2140      	movs	r1, #64	; 0x40
 80032a4:	0018      	movs	r0, r3
 80032a6:	f7ff fccd 	bl	8002c44 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(IN2SYS_EN_GPIO_Port, IN2SYS_EN_Pin);
 80032aa:	2390      	movs	r3, #144	; 0x90
 80032ac:	05db      	lsls	r3, r3, #23
 80032ae:	2180      	movs	r1, #128	; 0x80
 80032b0:	0018      	movs	r0, r3
 80032b2:	f7ff fcc7 	bl	8002c44 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MCU_REV1_Pin;
 80032b6:	003b      	movs	r3, r7
 80032b8:	2201      	movs	r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80032bc:	003b      	movs	r3, r7
 80032be:	2201      	movs	r2, #1
 80032c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80032c2:	003b      	movs	r3, r7
 80032c4:	2203      	movs	r2, #3
 80032c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80032c8:	003b      	movs	r3, r7
 80032ca:	2200      	movs	r2, #0
 80032cc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80032ce:	003b      	movs	r3, r7
 80032d0:	2200      	movs	r2, #0
 80032d2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MCU_REV1_GPIO_Port, &GPIO_InitStruct);
 80032d4:	003a      	movs	r2, r7
 80032d6:	2390      	movs	r3, #144	; 0x90
 80032d8:	05db      	lsls	r3, r3, #23
 80032da:	0011      	movs	r1, r2
 80032dc:	0018      	movs	r0, r3
 80032de:	f7ff fad5 	bl	800288c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MCU_REV2_Pin;
 80032e2:	003b      	movs	r3, r7
 80032e4:	2202      	movs	r2, #2
 80032e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80032e8:	003b      	movs	r3, r7
 80032ea:	2201      	movs	r2, #1
 80032ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80032ee:	003b      	movs	r3, r7
 80032f0:	2203      	movs	r2, #3
 80032f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80032f4:	003b      	movs	r3, r7
 80032f6:	2200      	movs	r2, #0
 80032f8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80032fa:	003b      	movs	r3, r7
 80032fc:	2200      	movs	r2, #0
 80032fe:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MCU_REV2_GPIO_Port, &GPIO_InitStruct);
 8003300:	003a      	movs	r2, r7
 8003302:	2390      	movs	r3, #144	; 0x90
 8003304:	05db      	lsls	r3, r3, #23
 8003306:	0011      	movs	r1, r2
 8003308:	0018      	movs	r0, r3
 800330a:	f7ff fabf 	bl	800288c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = MCU_IND_Pin;
 800330e:	003b      	movs	r3, r7
 8003310:	2208      	movs	r2, #8
 8003312:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003314:	003b      	movs	r3, r7
 8003316:	2201      	movs	r2, #1
 8003318:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800331a:	003b      	movs	r3, r7
 800331c:	2203      	movs	r2, #3
 800331e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003320:	003b      	movs	r3, r7
 8003322:	2200      	movs	r2, #0
 8003324:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003326:	003b      	movs	r3, r7
 8003328:	2200      	movs	r2, #0
 800332a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(MCU_IND_GPIO_Port, &GPIO_InitStruct);
 800332c:	003a      	movs	r2, r7
 800332e:	2390      	movs	r3, #144	; 0x90
 8003330:	05db      	lsls	r3, r3, #23
 8003332:	0011      	movs	r1, r2
 8003334:	0018      	movs	r0, r3
 8003336:	f7ff faa9 	bl	800288c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = switch_input_Pin;
 800333a:	003b      	movs	r3, r7
 800333c:	2210      	movs	r2, #16
 800333e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8003340:	003b      	movs	r3, r7
 8003342:	2200      	movs	r2, #0
 8003344:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003346:	003b      	movs	r3, r7
 8003348:	2200      	movs	r2, #0
 800334a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(switch_input_GPIO_Port, &GPIO_InitStruct);
 800334c:	003a      	movs	r2, r7
 800334e:	2390      	movs	r3, #144	; 0x90
 8003350:	05db      	lsls	r3, r3, #23
 8003352:	0011      	movs	r1, r2
 8003354:	0018      	movs	r0, r3
 8003356:	f7ff fa99 	bl	800288c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BOOST_EN_Pin;
 800335a:	003b      	movs	r3, r7
 800335c:	2220      	movs	r2, #32
 800335e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003360:	003b      	movs	r3, r7
 8003362:	2201      	movs	r2, #1
 8003364:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003366:	003b      	movs	r3, r7
 8003368:	2203      	movs	r2, #3
 800336a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800336c:	003b      	movs	r3, r7
 800336e:	2200      	movs	r2, #0
 8003370:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003372:	003b      	movs	r3, r7
 8003374:	2200      	movs	r2, #0
 8003376:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(BOOST_EN_GPIO_Port, &GPIO_InitStruct);
 8003378:	003a      	movs	r2, r7
 800337a:	2390      	movs	r3, #144	; 0x90
 800337c:	05db      	lsls	r3, r3, #23
 800337e:	0011      	movs	r1, r2
 8003380:	0018      	movs	r0, r3
 8003382:	f7ff fa83 	bl	800288c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CHARGE_EN_Pin;
 8003386:	003b      	movs	r3, r7
 8003388:	2240      	movs	r2, #64	; 0x40
 800338a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800338c:	003b      	movs	r3, r7
 800338e:	2201      	movs	r2, #1
 8003390:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003392:	003b      	movs	r3, r7
 8003394:	2203      	movs	r2, #3
 8003396:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003398:	003b      	movs	r3, r7
 800339a:	2200      	movs	r2, #0
 800339c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800339e:	003b      	movs	r3, r7
 80033a0:	2200      	movs	r2, #0
 80033a2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(CHARGE_EN_GPIO_Port, &GPIO_InitStruct);
 80033a4:	003a      	movs	r2, r7
 80033a6:	2390      	movs	r3, #144	; 0x90
 80033a8:	05db      	lsls	r3, r3, #23
 80033aa:	0011      	movs	r1, r2
 80033ac:	0018      	movs	r0, r3
 80033ae:	f7ff fa6d 	bl	800288c <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = IN2SYS_EN_Pin;
 80033b2:	003b      	movs	r3, r7
 80033b4:	2280      	movs	r2, #128	; 0x80
 80033b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80033b8:	003b      	movs	r3, r7
 80033ba:	2201      	movs	r2, #1
 80033bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 80033be:	003b      	movs	r3, r7
 80033c0:	2203      	movs	r2, #3
 80033c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80033c4:	003b      	movs	r3, r7
 80033c6:	2200      	movs	r2, #0
 80033c8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80033ca:	003b      	movs	r3, r7
 80033cc:	2200      	movs	r2, #0
 80033ce:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(IN2SYS_EN_GPIO_Port, &GPIO_InitStruct);
 80033d0:	003a      	movs	r2, r7
 80033d2:	2390      	movs	r3, #144	; 0x90
 80033d4:	05db      	lsls	r3, r3, #23
 80033d6:	0011      	movs	r1, r2
 80033d8:	0018      	movs	r0, r3
 80033da:	f7ff fa57 	bl	800288c <LL_GPIO_Init>

}
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	46bd      	mov	sp, r7
 80033e2:	b006      	add	sp, #24
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033f6:	4b13      	ldr	r3, [pc, #76]	; (8003444 <HAL_MspInit+0x54>)
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	4b12      	ldr	r3, [pc, #72]	; (8003444 <HAL_MspInit+0x54>)
 80033fc:	2101      	movs	r1, #1
 80033fe:	430a      	orrs	r2, r1
 8003400:	619a      	str	r2, [r3, #24]
 8003402:	4b10      	ldr	r3, [pc, #64]	; (8003444 <HAL_MspInit+0x54>)
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	2201      	movs	r2, #1
 8003408:	4013      	ands	r3, r2
 800340a:	607b      	str	r3, [r7, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800340e:	4b0d      	ldr	r3, [pc, #52]	; (8003444 <HAL_MspInit+0x54>)
 8003410:	69da      	ldr	r2, [r3, #28]
 8003412:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <HAL_MspInit+0x54>)
 8003414:	2180      	movs	r1, #128	; 0x80
 8003416:	0549      	lsls	r1, r1, #21
 8003418:	430a      	orrs	r2, r1
 800341a:	61da      	str	r2, [r3, #28]
 800341c:	4b09      	ldr	r3, [pc, #36]	; (8003444 <HAL_MspInit+0x54>)
 800341e:	69da      	ldr	r2, [r3, #28]
 8003420:	2380      	movs	r3, #128	; 0x80
 8003422:	055b      	lsls	r3, r3, #21
 8003424:	4013      	ands	r3, r2
 8003426:	603b      	str	r3, [r7, #0]
 8003428:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800342a:	2200      	movs	r2, #0
 800342c:	2100      	movs	r1, #0
 800342e:	2004      	movs	r0, #4
 8003430:	f7fd fc72 	bl	8000d18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003434:	2004      	movs	r0, #4
 8003436:	f7fd fc84 	bl	8000d42 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800343a:	46c0      	nop			; (mov r8, r8)
 800343c:	46bd      	mov	sp, r7
 800343e:	b002      	add	sp, #8
 8003440:	bd80      	pop	{r7, pc}
 8003442:	46c0      	nop			; (mov r8, r8)
 8003444:	40021000 	.word	0x40021000

08003448 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003448:	b590      	push	{r4, r7, lr}
 800344a:	b08b      	sub	sp, #44	; 0x2c
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003450:	2314      	movs	r3, #20
 8003452:	18fb      	adds	r3, r7, r3
 8003454:	0018      	movs	r0, r3
 8003456:	2314      	movs	r3, #20
 8003458:	001a      	movs	r2, r3
 800345a:	2100      	movs	r1, #0
 800345c:	f000 fa06 	bl	800386c <memset>
  if(hadc->Instance==ADC1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a28      	ldr	r2, [pc, #160]	; (8003508 <HAL_ADC_MspInit+0xc0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d149      	bne.n	80034fe <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800346a:	4b28      	ldr	r3, [pc, #160]	; (800350c <HAL_ADC_MspInit+0xc4>)
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	4b27      	ldr	r3, [pc, #156]	; (800350c <HAL_ADC_MspInit+0xc4>)
 8003470:	2180      	movs	r1, #128	; 0x80
 8003472:	0089      	lsls	r1, r1, #2
 8003474:	430a      	orrs	r2, r1
 8003476:	619a      	str	r2, [r3, #24]
 8003478:	4b24      	ldr	r3, [pc, #144]	; (800350c <HAL_ADC_MspInit+0xc4>)
 800347a:	699a      	ldr	r2, [r3, #24]
 800347c:	2380      	movs	r3, #128	; 0x80
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4013      	ands	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
 8003484:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003486:	4b21      	ldr	r3, [pc, #132]	; (800350c <HAL_ADC_MspInit+0xc4>)
 8003488:	695a      	ldr	r2, [r3, #20]
 800348a:	4b20      	ldr	r3, [pc, #128]	; (800350c <HAL_ADC_MspInit+0xc4>)
 800348c:	2180      	movs	r1, #128	; 0x80
 800348e:	0289      	lsls	r1, r1, #10
 8003490:	430a      	orrs	r2, r1
 8003492:	615a      	str	r2, [r3, #20]
 8003494:	4b1d      	ldr	r3, [pc, #116]	; (800350c <HAL_ADC_MspInit+0xc4>)
 8003496:	695a      	ldr	r2, [r3, #20]
 8003498:	2380      	movs	r3, #128	; 0x80
 800349a:	029b      	lsls	r3, r3, #10
 800349c:	4013      	ands	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034a2:	4b1a      	ldr	r3, [pc, #104]	; (800350c <HAL_ADC_MspInit+0xc4>)
 80034a4:	695a      	ldr	r2, [r3, #20]
 80034a6:	4b19      	ldr	r3, [pc, #100]	; (800350c <HAL_ADC_MspInit+0xc4>)
 80034a8:	2180      	movs	r1, #128	; 0x80
 80034aa:	02c9      	lsls	r1, r1, #11
 80034ac:	430a      	orrs	r2, r1
 80034ae:	615a      	str	r2, [r3, #20]
 80034b0:	4b16      	ldr	r3, [pc, #88]	; (800350c <HAL_ADC_MspInit+0xc4>)
 80034b2:	695a      	ldr	r2, [r3, #20]
 80034b4:	2380      	movs	r3, #128	; 0x80
 80034b6:	02db      	lsls	r3, r3, #11
 80034b8:	4013      	ands	r3, r2
 80034ba:	60bb      	str	r3, [r7, #8]
 80034bc:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA2     ------> ADC_IN2
    PB1     ------> ADC_IN9 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80034be:	2414      	movs	r4, #20
 80034c0:	193b      	adds	r3, r7, r4
 80034c2:	2204      	movs	r2, #4
 80034c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034c6:	193b      	adds	r3, r7, r4
 80034c8:	2203      	movs	r2, #3
 80034ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	193b      	adds	r3, r7, r4
 80034ce:	2200      	movs	r2, #0
 80034d0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d2:	193a      	adds	r2, r7, r4
 80034d4:	2390      	movs	r3, #144	; 0x90
 80034d6:	05db      	lsls	r3, r3, #23
 80034d8:	0011      	movs	r1, r2
 80034da:	0018      	movs	r0, r3
 80034dc:	f7fd fcec 	bl	8000eb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80034e0:	193b      	adds	r3, r7, r4
 80034e2:	2202      	movs	r2, #2
 80034e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034e6:	193b      	adds	r3, r7, r4
 80034e8:	2203      	movs	r2, #3
 80034ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	193b      	adds	r3, r7, r4
 80034ee:	2200      	movs	r2, #0
 80034f0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034f2:	193b      	adds	r3, r7, r4
 80034f4:	4a06      	ldr	r2, [pc, #24]	; (8003510 <HAL_ADC_MspInit+0xc8>)
 80034f6:	0019      	movs	r1, r3
 80034f8:	0010      	movs	r0, r2
 80034fa:	f7fd fcdd 	bl	8000eb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80034fe:	46c0      	nop			; (mov r8, r8)
 8003500:	46bd      	mov	sp, r7
 8003502:	b00b      	add	sp, #44	; 0x2c
 8003504:	bd90      	pop	{r4, r7, pc}
 8003506:	46c0      	nop			; (mov r8, r8)
 8003508:	40012400 	.word	0x40012400
 800350c:	40021000 	.word	0x40021000
 8003510:	48000400 	.word	0x48000400

08003514 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a09      	ldr	r2, [pc, #36]	; (8003548 <HAL_CRC_MspInit+0x34>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d10b      	bne.n	800353e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003526:	4b09      	ldr	r3, [pc, #36]	; (800354c <HAL_CRC_MspInit+0x38>)
 8003528:	695a      	ldr	r2, [r3, #20]
 800352a:	4b08      	ldr	r3, [pc, #32]	; (800354c <HAL_CRC_MspInit+0x38>)
 800352c:	2140      	movs	r1, #64	; 0x40
 800352e:	430a      	orrs	r2, r1
 8003530:	615a      	str	r2, [r3, #20]
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_CRC_MspInit+0x38>)
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	2240      	movs	r2, #64	; 0x40
 8003538:	4013      	ands	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800353e:	46c0      	nop			; (mov r8, r8)
 8003540:	46bd      	mov	sp, r7
 8003542:	b004      	add	sp, #16
 8003544:	bd80      	pop	{r7, pc}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	40023000 	.word	0x40023000
 800354c:	40021000 	.word	0x40021000

08003550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08a      	sub	sp, #40	; 0x28
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003558:	2314      	movs	r3, #20
 800355a:	18fb      	adds	r3, r7, r3
 800355c:	0018      	movs	r0, r3
 800355e:	2314      	movs	r3, #20
 8003560:	001a      	movs	r2, r3
 8003562:	2100      	movs	r1, #0
 8003564:	f000 f982 	bl	800386c <memset>
  if(huart->Instance==USART1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a21      	ldr	r2, [pc, #132]	; (80035f4 <HAL_UART_MspInit+0xa4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d13b      	bne.n	80035ea <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003572:	4b21      	ldr	r3, [pc, #132]	; (80035f8 <HAL_UART_MspInit+0xa8>)
 8003574:	699a      	ldr	r2, [r3, #24]
 8003576:	4b20      	ldr	r3, [pc, #128]	; (80035f8 <HAL_UART_MspInit+0xa8>)
 8003578:	2180      	movs	r1, #128	; 0x80
 800357a:	01c9      	lsls	r1, r1, #7
 800357c:	430a      	orrs	r2, r1
 800357e:	619a      	str	r2, [r3, #24]
 8003580:	4b1d      	ldr	r3, [pc, #116]	; (80035f8 <HAL_UART_MspInit+0xa8>)
 8003582:	699a      	ldr	r2, [r3, #24]
 8003584:	2380      	movs	r3, #128	; 0x80
 8003586:	01db      	lsls	r3, r3, #7
 8003588:	4013      	ands	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
 800358c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800358e:	4b1a      	ldr	r3, [pc, #104]	; (80035f8 <HAL_UART_MspInit+0xa8>)
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	4b19      	ldr	r3, [pc, #100]	; (80035f8 <HAL_UART_MspInit+0xa8>)
 8003594:	2180      	movs	r1, #128	; 0x80
 8003596:	0289      	lsls	r1, r1, #10
 8003598:	430a      	orrs	r2, r1
 800359a:	615a      	str	r2, [r3, #20]
 800359c:	4b16      	ldr	r3, [pc, #88]	; (80035f8 <HAL_UART_MspInit+0xa8>)
 800359e:	695a      	ldr	r2, [r3, #20]
 80035a0:	2380      	movs	r3, #128	; 0x80
 80035a2:	029b      	lsls	r3, r3, #10
 80035a4:	4013      	ands	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80035aa:	2114      	movs	r1, #20
 80035ac:	187b      	adds	r3, r7, r1
 80035ae:	22c0      	movs	r2, #192	; 0xc0
 80035b0:	00d2      	lsls	r2, r2, #3
 80035b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035b4:	187b      	adds	r3, r7, r1
 80035b6:	2202      	movs	r2, #2
 80035b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ba:	187b      	adds	r3, r7, r1
 80035bc:	2200      	movs	r2, #0
 80035be:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035c0:	187b      	adds	r3, r7, r1
 80035c2:	2203      	movs	r2, #3
 80035c4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80035c6:	187b      	adds	r3, r7, r1
 80035c8:	2201      	movs	r2, #1
 80035ca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035cc:	187a      	adds	r2, r7, r1
 80035ce:	2390      	movs	r3, #144	; 0x90
 80035d0:	05db      	lsls	r3, r3, #23
 80035d2:	0011      	movs	r1, r2
 80035d4:	0018      	movs	r0, r3
 80035d6:	f7fd fc6f 	bl	8000eb8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80035da:	2200      	movs	r2, #0
 80035dc:	2100      	movs	r1, #0
 80035de:	201b      	movs	r0, #27
 80035e0:	f7fd fb9a 	bl	8000d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80035e4:	201b      	movs	r0, #27
 80035e6:	f7fd fbac 	bl	8000d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80035ea:	46c0      	nop			; (mov r8, r8)
 80035ec:	46bd      	mov	sp, r7
 80035ee:	b00a      	add	sp, #40	; 0x28
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	46c0      	nop			; (mov r8, r8)
 80035f4:	40013800 	.word	0x40013800
 80035f8:	40021000 	.word	0x40021000

080035fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003600:	46c0      	nop			; (mov r8, r8)
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800360a:	e7fe      	b.n	800360a <HardFault_Handler+0x4>

0800360c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003610:	46c0      	nop			; (mov r8, r8)
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}

08003616 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003616:	b580      	push	{r7, lr}
 8003618:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	static uint8_t flag_10ms = 10; //1ms*10
	static uint8_t flag_1000ms = 100;  //100*10ms

	flag_10ms--;
 8003624:	4b15      	ldr	r3, [pc, #84]	; (800367c <SysTick_Handler+0x5c>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	3b01      	subs	r3, #1
 800362a:	b2da      	uxtb	r2, r3
 800362c:	4b13      	ldr	r3, [pc, #76]	; (800367c <SysTick_Handler+0x5c>)
 800362e:	701a      	strb	r2, [r3, #0]
	if(flag_10ms == 0)
 8003630:	4b12      	ldr	r3, [pc, #72]	; (800367c <SysTick_Handler+0x5c>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d11b      	bne.n	8003670 <SysTick_Handler+0x50>
	{
		flag_10ms = 10;
 8003638:	4b10      	ldr	r3, [pc, #64]	; (800367c <SysTick_Handler+0x5c>)
 800363a:	220a      	movs	r2, #10
 800363c:	701a      	strb	r2, [r3, #0]
		flag_1000ms--;
 800363e:	4b10      	ldr	r3, [pc, #64]	; (8003680 <SysTick_Handler+0x60>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	3b01      	subs	r3, #1
 8003644:	b2da      	uxtb	r2, r3
 8003646:	4b0e      	ldr	r3, [pc, #56]	; (8003680 <SysTick_Handler+0x60>)
 8003648:	701a      	strb	r2, [r3, #0]
		flag_time |= FLAG_1OMS;
 800364a:	4b0e      	ldr	r3, [pc, #56]	; (8003684 <SysTick_Handler+0x64>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2201      	movs	r2, #1
 8003650:	431a      	orrs	r2, r3
 8003652:	4b0c      	ldr	r3, [pc, #48]	; (8003684 <SysTick_Handler+0x64>)
 8003654:	601a      	str	r2, [r3, #0]
		if(flag_1000ms == 0)
 8003656:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <SysTick_Handler+0x60>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d108      	bne.n	8003670 <SysTick_Handler+0x50>
		{
			flag_1000ms = 100;
 800365e:	4b08      	ldr	r3, [pc, #32]	; (8003680 <SysTick_Handler+0x60>)
 8003660:	2264      	movs	r2, #100	; 0x64
 8003662:	701a      	strb	r2, [r3, #0]
			flag_time |= FLAG_1000MS;
 8003664:	4b07      	ldr	r3, [pc, #28]	; (8003684 <SysTick_Handler+0x64>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2202      	movs	r2, #2
 800366a:	431a      	orrs	r2, r3
 800366c:	4b05      	ldr	r3, [pc, #20]	; (8003684 <SysTick_Handler+0x64>)
 800366e:	601a      	str	r2, [r3, #0]
		}
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003670:	f7fc fe06 	bl	8000280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003674:	46c0      	nop			; (mov r8, r8)
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	46c0      	nop			; (mov r8, r8)
 800367c:	20000001 	.word	0x20000001
 8003680:	20000002 	.word	0x20000002
 8003684:	2000003c 	.word	0x2000003c

08003688 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800368c:	46c0      	nop			; (mov r8, r8)
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003698:	4b03      	ldr	r3, [pc, #12]	; (80036a8 <USART1_IRQHandler+0x14>)
 800369a:	0018      	movs	r0, r3
 800369c:	f7fe fbea 	bl	8001e74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80036a0:	46c0      	nop			; (mov r8, r8)
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	46c0      	nop			; (mov r8, r8)
 80036a8:	2000006c 	.word	0x2000006c

080036ac <time_proc>:

/* USER CODE BEGIN 1 */
void time_proc(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
	if(flag_time & FLAG_1OMS)
 80036b0:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <time_proc+0x44>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2201      	movs	r2, #1
 80036b6:	4013      	ands	r3, r2
 80036b8:	d008      	beq.n	80036cc <time_proc+0x20>
	{
		flag_time &= ~FLAG_1OMS;
 80036ba:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <time_proc+0x44>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	2201      	movs	r2, #1
 80036c0:	4393      	bics	r3, r2
 80036c2:	001a      	movs	r2, r3
 80036c4:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <time_proc+0x44>)
 80036c6:	601a      	str	r2, [r3, #0]
		time_10ms_proc();
 80036c8:	f7ff fc2a 	bl	8002f20 <time_10ms_proc>
	}

	if(flag_time & FLAG_1000MS)
 80036cc:	4b08      	ldr	r3, [pc, #32]	; (80036f0 <time_proc+0x44>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2202      	movs	r2, #2
 80036d2:	4013      	ands	r3, r2
 80036d4:	d008      	beq.n	80036e8 <time_proc+0x3c>
	{
		flag_time &= ~FLAG_1000MS;
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <time_proc+0x44>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2202      	movs	r2, #2
 80036dc:	4393      	bics	r3, r2
 80036de:	001a      	movs	r2, r3
 80036e0:	4b03      	ldr	r3, [pc, #12]	; (80036f0 <time_proc+0x44>)
 80036e2:	601a      	str	r2, [r3, #0]
		time_1000ms_proc();
 80036e4:	f7ff fc3e 	bl	8002f64 <time_1000ms_proc>
	}
}
 80036e8:	46c0      	nop			; (mov r8, r8)
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	2000003c 	.word	0x2000003c

080036f4 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80036f8:	4b1a      	ldr	r3, [pc, #104]	; (8003764 <SystemInit+0x70>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4b19      	ldr	r3, [pc, #100]	; (8003764 <SystemInit+0x70>)
 80036fe:	2101      	movs	r1, #1
 8003700:	430a      	orrs	r2, r1
 8003702:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8003704:	4b17      	ldr	r3, [pc, #92]	; (8003764 <SystemInit+0x70>)
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	4b16      	ldr	r3, [pc, #88]	; (8003764 <SystemInit+0x70>)
 800370a:	4917      	ldr	r1, [pc, #92]	; (8003768 <SystemInit+0x74>)
 800370c:	400a      	ands	r2, r1
 800370e:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8003710:	4b14      	ldr	r3, [pc, #80]	; (8003764 <SystemInit+0x70>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	4b13      	ldr	r3, [pc, #76]	; (8003764 <SystemInit+0x70>)
 8003716:	4915      	ldr	r1, [pc, #84]	; (800376c <SystemInit+0x78>)
 8003718:	400a      	ands	r2, r1
 800371a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800371c:	4b11      	ldr	r3, [pc, #68]	; (8003764 <SystemInit+0x70>)
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	4b10      	ldr	r3, [pc, #64]	; (8003764 <SystemInit+0x70>)
 8003722:	4913      	ldr	r1, [pc, #76]	; (8003770 <SystemInit+0x7c>)
 8003724:	400a      	ands	r2, r1
 8003726:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8003728:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <SystemInit+0x70>)
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <SystemInit+0x70>)
 800372e:	4911      	ldr	r1, [pc, #68]	; (8003774 <SystemInit+0x80>)
 8003730:	400a      	ands	r2, r1
 8003732:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <SystemInit+0x70>)
 8003736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <SystemInit+0x70>)
 800373a:	210f      	movs	r1, #15
 800373c:	438a      	bics	r2, r1
 800373e:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8003740:	4b08      	ldr	r3, [pc, #32]	; (8003764 <SystemInit+0x70>)
 8003742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003744:	4b07      	ldr	r3, [pc, #28]	; (8003764 <SystemInit+0x70>)
 8003746:	490c      	ldr	r1, [pc, #48]	; (8003778 <SystemInit+0x84>)
 8003748:	400a      	ands	r2, r1
 800374a:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800374c:	4b05      	ldr	r3, [pc, #20]	; (8003764 <SystemInit+0x70>)
 800374e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003750:	4b04      	ldr	r3, [pc, #16]	; (8003764 <SystemInit+0x70>)
 8003752:	2101      	movs	r1, #1
 8003754:	438a      	bics	r2, r1
 8003756:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003758:	4b02      	ldr	r3, [pc, #8]	; (8003764 <SystemInit+0x70>)
 800375a:	2200      	movs	r2, #0
 800375c:	609a      	str	r2, [r3, #8]

}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	40021000 	.word	0x40021000
 8003768:	08ffb80c 	.word	0x08ffb80c
 800376c:	fef6ffff 	.word	0xfef6ffff
 8003770:	fffbffff 	.word	0xfffbffff
 8003774:	ffc0ffff 	.word	0xffc0ffff
 8003778:	fffffeec 	.word	0xfffffeec

0800377c <HAL_UART_TxCpltCallback>:
#include "crc.h"
#include "usart.h"


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]

}
 8003784:	46c0      	nop			; (mov r8, r8)
 8003786:	46bd      	mov	sp, r7
 8003788:	b002      	add	sp, #8
 800378a:	bd80      	pop	{r7, pc}

0800378c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
	if(huart->pRxBuffPtr[PAYLOAD_POS] == SHORT_PRESS_ACK)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003798:	3304      	adds	r3, #4
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2bf1      	cmp	r3, #241	; 0xf1
 800379e:	d012      	beq.n	80037c6 <HAL_UART_RxCpltCallback+0x3a>
	{

	}
	else if(huart->pRxBuffPtr[PAYLOAD_POS] == MIDDLE_PRESS_ACK)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a4:	3304      	adds	r3, #4
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2bf2      	cmp	r3, #242	; 0xf2
 80037aa:	d103      	bne.n	80037b4 <HAL_UART_RxCpltCallback+0x28>
	{
		Set_CurrentPowState(READY_OFF);
 80037ac:	2002      	movs	r0, #2
 80037ae:	f7ff fa89 	bl	8002cc4 <Set_CurrentPowState>
	}
	else
	{

	}
}
 80037b2:	e008      	b.n	80037c6 <HAL_UART_RxCpltCallback+0x3a>
	else if(huart->pRxBuffPtr[PAYLOAD_POS] == MIDDLE_PRESS_CANCEL_ACK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b8:	3304      	adds	r3, #4
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2bff      	cmp	r3, #255	; 0xff
 80037be:	d102      	bne.n	80037c6 <HAL_UART_RxCpltCallback+0x3a>
		Set_CurrentPowState(ON);
 80037c0:	2003      	movs	r0, #3
 80037c2:	f7ff fa7f 	bl	8002cc4 <Set_CurrentPowState>
}
 80037c6:	46c0      	nop			; (mov r8, r8)
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b002      	add	sp, #8
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80037d0:	480d      	ldr	r0, [pc, #52]	; (8003808 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80037d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037d4:	480d      	ldr	r0, [pc, #52]	; (800380c <LoopForever+0x6>)
  ldr r1, =_edata
 80037d6:	490e      	ldr	r1, [pc, #56]	; (8003810 <LoopForever+0xa>)
  ldr r2, =_sidata
 80037d8:	4a0e      	ldr	r2, [pc, #56]	; (8003814 <LoopForever+0xe>)
  movs r3, #0
 80037da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80037dc:	e002      	b.n	80037e4 <LoopCopyDataInit>

080037de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037e2:	3304      	adds	r3, #4

080037e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037e8:	d3f9      	bcc.n	80037de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037ea:	4a0b      	ldr	r2, [pc, #44]	; (8003818 <LoopForever+0x12>)
  ldr r4, =_ebss
 80037ec:	4c0b      	ldr	r4, [pc, #44]	; (800381c <LoopForever+0x16>)
  movs r3, #0
 80037ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037f0:	e001      	b.n	80037f6 <LoopFillZerobss>

080037f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037f4:	3204      	adds	r2, #4

080037f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037f8:	d3fb      	bcc.n	80037f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80037fa:	f7ff ff7b 	bl	80036f4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80037fe:	f000 f811 	bl	8003824 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003802:	f7ff fbc1 	bl	8002f88 <main>

08003806 <LoopForever>:

LoopForever:
    b LoopForever
 8003806:	e7fe      	b.n	8003806 <LoopForever>
  ldr   r0, =_estack
 8003808:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 800380c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003810:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8003814:	080038d4 	.word	0x080038d4
  ldr r2, =_sbss
 8003818:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 800381c:	20000128 	.word	0x20000128

08003820 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003820:	e7fe      	b.n	8003820 <ADC1_IRQHandler>
	...

08003824 <__libc_init_array>:
 8003824:	b570      	push	{r4, r5, r6, lr}
 8003826:	2600      	movs	r6, #0
 8003828:	4d0c      	ldr	r5, [pc, #48]	; (800385c <__libc_init_array+0x38>)
 800382a:	4c0d      	ldr	r4, [pc, #52]	; (8003860 <__libc_init_array+0x3c>)
 800382c:	1b64      	subs	r4, r4, r5
 800382e:	10a4      	asrs	r4, r4, #2
 8003830:	42a6      	cmp	r6, r4
 8003832:	d109      	bne.n	8003848 <__libc_init_array+0x24>
 8003834:	2600      	movs	r6, #0
 8003836:	f000 f821 	bl	800387c <_init>
 800383a:	4d0a      	ldr	r5, [pc, #40]	; (8003864 <__libc_init_array+0x40>)
 800383c:	4c0a      	ldr	r4, [pc, #40]	; (8003868 <__libc_init_array+0x44>)
 800383e:	1b64      	subs	r4, r4, r5
 8003840:	10a4      	asrs	r4, r4, #2
 8003842:	42a6      	cmp	r6, r4
 8003844:	d105      	bne.n	8003852 <__libc_init_array+0x2e>
 8003846:	bd70      	pop	{r4, r5, r6, pc}
 8003848:	00b3      	lsls	r3, r6, #2
 800384a:	58eb      	ldr	r3, [r5, r3]
 800384c:	4798      	blx	r3
 800384e:	3601      	adds	r6, #1
 8003850:	e7ee      	b.n	8003830 <__libc_init_array+0xc>
 8003852:	00b3      	lsls	r3, r6, #2
 8003854:	58eb      	ldr	r3, [r5, r3]
 8003856:	4798      	blx	r3
 8003858:	3601      	adds	r6, #1
 800385a:	e7f2      	b.n	8003842 <__libc_init_array+0x1e>
 800385c:	080038cc 	.word	0x080038cc
 8003860:	080038cc 	.word	0x080038cc
 8003864:	080038cc 	.word	0x080038cc
 8003868:	080038d0 	.word	0x080038d0

0800386c <memset>:
 800386c:	0003      	movs	r3, r0
 800386e:	1812      	adds	r2, r2, r0
 8003870:	4293      	cmp	r3, r2
 8003872:	d100      	bne.n	8003876 <memset+0xa>
 8003874:	4770      	bx	lr
 8003876:	7019      	strb	r1, [r3, #0]
 8003878:	3301      	adds	r3, #1
 800387a:	e7f9      	b.n	8003870 <memset+0x4>

0800387c <_init>:
 800387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387e:	46c0      	nop			; (mov r8, r8)
 8003880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003882:	bc08      	pop	{r3}
 8003884:	469e      	mov	lr, r3
 8003886:	4770      	bx	lr

08003888 <_fini>:
 8003888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800388a:	46c0      	nop			; (mov r8, r8)
 800388c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800388e:	bc08      	pop	{r3}
 8003890:	469e      	mov	lr, r3
 8003892:	4770      	bx	lr
